[
    {
        "id": "027908751f6277f8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d1c4b1351d312895",
        "type": "http in",
        "z": "027908751f6277f8",
        "name": "MetSci LDDS75 Input",
        "url": "/metsci-ldds75-data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "4d9224c659b4ddb5",
                "b4650265d05fbe80"
            ]
        ]
    },
    {
        "id": "4d9224c659b4ddb5",
        "type": "http response",
        "z": "027908751f6277f8",
        "name": "http response",
        "statusCode": "",
        "headers": {},
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "b4650265d05fbe80",
        "type": "json",
        "z": "027908751f6277f8",
        "name": "Parse JSON",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 430,
        "y": 60,
        "wires": [
            [
                "98d9a80b293a28ab"
            ]
        ]
    },
    {
        "id": "98d9a80b293a28ab",
        "type": "switch",
        "z": "027908751f6277f8",
        "name": "Route by Device Type",
        "property": "payload.deviceInfo.deviceProfileName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "LDDS75",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "AM319",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 660,
        "y": 60,
        "wires": [
            [
                "9075d5fa4e0118d6"
            ],
            [],
            []
        ]
    },
    {
        "id": "9075d5fa4e0118d6",
        "type": "function",
        "z": "027908751f6277f8",
        "name": "LDDS75 Function",
        "func": "try {\n    // Log receipt of message\n    node.warn(\"LDDS75 function processing message\");\n    \n    const originalPayload = msg.payload;\n    const gateway = originalPayload.rxInfo?.[0] || {};\n    \n    // Create payload array with fields and tags objects\n    msg.payload = [\n        // Fields object (numeric measurements)\n        {\n            distance: parseInt(originalPayload.object?.distance || 0),\n            battery: parseFloat(originalPayload.object?.battery_voltage || 0),\n            temperature: parseFloat(originalPayload.object?.temperature || 0),\n            rssi: parseInt(gateway.rssi || 0),\n            snr: parseFloat(gateway.snr || 0),\n            frequency: parseInt(originalPayload.txInfo?.frequency || 0),\n            spreading_factor: parseInt(originalPayload.dr || 0), // Using DR instead of SF\n            sensor_status: Boolean(originalPayload.object?.sensor_status),\n            interrupt_status: Boolean(originalPayload.object?.interrupt_status)\n        },\n        // Tags object (metadata for filtering and grouping)\n        {\n            device: String(originalPayload.deviceInfo?.deviceName || \"\"),\n            device_eui: String(originalPayload.deviceInfo?.devEui || \"\"),\n            application: String(originalPayload.deviceInfo?.applicationName || \"\"),\n            gateway: String(gateway.metadata?.gateway_id || \"\"),\n            gateway_id: String(gateway.gatewayId || \"\"),\n            region: String(gateway.metadata?.region_common_name || \"\"),\n            network: String(gateway.metadata?.network || \"\")\n        }\n    ];\n    \n    // Set measurement name for MetSci LDDS75 sensors\n    msg.measurement = \"ldds75_metsci\";\n    \n    // Add timestamp if not present\n    if (!msg.payload[0].timestamp) {\n        msg.payload[0].timestamp = new Date(originalPayload.time).getTime() * 1000000; // Convert to nanoseconds for InfluxDB\n    }\n    \n    // Log the attempt for debugging\n    node.warn(\"Preparing InfluxDB write for device: \" + msg.payload[1].device);\n    node.warn(\"Distance reading: \" + msg.payload[0].distance + \" mm\");\n    \n    return msg;\n} catch(err) {\n    node.error(\"LDDS75 Processing Error: \" + err.message);\n    node.error(\"Failed payload: \" + JSON.stringify(msg.payload, null, 2));\n    // Add status node indication\n    node.status({fill:\"red\", shape:\"dot\", text:\"Processing Error\"});\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 40,
        "wires": [
            [
                "a0483032f56cf5f9"
            ]
        ]
    },
    {
        "id": "a0483032f56cf5f9",
        "type": "influxdb out",
        "z": "027908751f6277f8",
        "influxdb": "",
        "name": "MeteoScientific",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1160,
        "y": 100,
        "wires": []
    }
]