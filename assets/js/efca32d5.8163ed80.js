"use strict";(self.webpackChunkmeteoscientific=self.webpackChunkmeteoscientific||[]).push([[7980],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const s={},d=i.createContext(s);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(d.Provider,{value:n},e.children)}},9231:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>c,toc:()=>o});var i=t(4848),s=t(8453);const d={title:"Workflow for Metsci Upgrade",description:"Step-by-step guide for upgrading and standardizing data in MetSci"},r="Workflow for Standardizing Data Structure in MetSci",c={type:"mdx",permalink:"/workflow-metsci-upgrade",source:"@site/src/pages/workflow-metsci-upgrade.md",title:"Workflow for Metsci Upgrade",description:"Step-by-step guide for upgrading and standardizing data in MetSci",frontMatter:{title:"Workflow for Metsci Upgrade",description:"Step-by-step guide for upgrading and standardizing data in MetSci"},unlisted:!1},a={},o=[{value:"Step 1: Assess Your Current State",id:"step-1-assess-your-current-state",level:2},{value:"Review Existing Payloads:",id:"review-existing-payloads",level:3},{value:"Map Current Codec Coverage:",id:"map-current-codec-coverage",level:3},{value:"Step 2: Define Your Standardized Structure",id:"step-2-define-your-standardized-structure",level:2},{value:"Create a Unified Tag and Field Schema:",id:"create-a-unified-tag-and-field-schema",level:3},{value:"Plan for Metadata Sharing:",id:"plan-for-metadata-sharing",level:3},{value:"Step 3: Re-Write the Codec",id:"step-3-re-write-the-codec",level:2},{value:"Test the Existing Codec:",id:"test-the-existing-codec",level:3},{value:"Re-Write the Codec:",id:"re-write-the-codec",level:3},{value:"Validate the New Codec:",id:"validate-the-new-codec",level:3},{value:"Step 4: Deploy the Codec",id:"step-4-deploy-the-codec",level:2},{value:"Make the Codec Tenant-Agnostic:",id:"make-the-codec-tenant-agnostic",level:3},{value:"Associate the Codec with Device Profiles:",id:"associate-the-codec-with-device-profiles",level:3},{value:"Test in Production:",id:"test-in-production",level:3},{value:"Step 5: Share the Codec",id:"step-5-share-the-codec",level:2},{value:"Document the Codec:",id:"document-the-codec",level:3},{value:"Publish the Codec:",id:"publish-the-codec",level:3},{value:"Step 6: Monitor and Iterate",id:"step-6-monitor-and-iterate",level:2},{value:"Monitor Data Consistency:",id:"monitor-data-consistency",level:3},{value:"Iterate as New Devices Are Added:",id:"iterate-as-new-devices-are-added",level:3},{value:"Key Notes:",id:"key-notes",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"workflow-for-standardizing-data-structure-in-metsci",children:"Workflow for Standardizing Data Structure in MetSci"}),"\n",(0,i.jsx)(n.h2,{id:"step-1-assess-your-current-state",children:"Step 1: Assess Your Current State"}),"\n",(0,i.jsx)(n.h3,{id:"review-existing-payloads",children:"Review Existing Payloads:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Identify all device types and the payloads they send."}),"\n",(0,i.jsxs)(n.li,{children:["For each device:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Collect sample uplinks (you can use the Events tab for this)."}),"\n",(0,i.jsx)(n.li,{children:"Document the structure, units, and fields present in the payload."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"map-current-codec-coverage",children:"Map Current Codec Coverage:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Review existing codecs for each device type."}),"\n",(0,i.jsx)(n.li,{children:"Check if any codecs are incomplete, outdated, or inconsistent with the new structure."}),"\n",(0,i.jsx)(n.li,{children:"Note gaps (e.g., missing fields, inconsistent naming)."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-2-define-your-standardized-structure",children:"Step 2: Define Your Standardized Structure"}),"\n",(0,i.jsx)(n.h3,{id:"create-a-unified-tag-and-field-schema",children:"Create a Unified Tag and Field Schema:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use the tags and fields table from the ",(0,i.jsx)(n.code,{children:".md"})," file as your baseline."]}),"\n",(0,i.jsxs)(n.li,{children:["Decide on naming conventions (e.g., ",(0,i.jsx)(n.code,{children:"temperature"})," instead of ",(0,i.jsx)(n.code,{children:"temp"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Standardize units (e.g., ",(0,i.jsx)(n.code,{children:"\xb0C"})," for temperature, ",(0,i.jsx)(n.code,{children:"ppm"})," for gas concentrations)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"plan-for-metadata-sharing",children:"Plan for Metadata Sharing:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Identify metadata (e.g., ",(0,i.jsx)(n.code,{children:"tenant_id"}),", ",(0,i.jsx)(n.code,{children:"region"}),", ",(0,i.jsx)(n.code,{children:"device_id"}),") that should be consistent across codecs."]}),"\n",(0,i.jsx)(n.li,{children:"Ensure tags represent static data and fields represent dynamic measurements."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-3-re-write-the-codec",children:"Step 3: Re-Write the Codec"}),"\n",(0,i.jsx)(n.h3,{id:"test-the-existing-codec",children:"Test the Existing Codec:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Run a sample payload through the current codec in the ChirpStack Codec Debugger."}),"\n",(0,i.jsx)(n.li,{children:"Note where the output deviates from the standard structure."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"re-write-the-codec",children:"Re-Write the Codec:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Edit the codec to align with the standardized structure."}),"\n",(0,i.jsxs)(n.li,{children:["Include:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tag extraction"}),": Map static metadata into tags."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Field extraction"}),": Convert dynamic payload data into fields with standardized names and units."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Use clear comments to document each section of the codec."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"validate-the-new-codec",children:"Validate the New Codec:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Test the updated codec with various sample payloads in the ChirpStack Codec Debugger."}),"\n",(0,i.jsxs)(n.li,{children:["Verify that:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All expected fields and tags are present."}),"\n",(0,i.jsx)(n.li,{children:"Units and data types are correct."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-4-deploy-the-codec",children:"Step 4: Deploy the Codec"}),"\n",(0,i.jsx)(n.h3,{id:"make-the-codec-tenant-agnostic",children:"Make the Codec Tenant-Agnostic:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remove any tenant-specific logic (e.g., hardcoded tenant IDs or regions)."}),"\n",(0,i.jsx)(n.li,{children:"Use dynamic extraction based on the payload or device metadata."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"associate-the-codec-with-device-profiles",children:"Associate the Codec with Device Profiles:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Go to the ",(0,i.jsx)(n.strong,{children:"Device Profiles"})," in MetSci."]}),"\n",(0,i.jsx)(n.li,{children:"Assign the new codec to each profile that uses the corresponding device type."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-in-production",children:"Test in Production:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Send live payloads from devices to verify they are correctly decoded in MetSci."}),"\n",(0,i.jsx)(n.li,{children:"Check the application integration (e.g., Node-RED or InfluxDB) for proper output."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-5-share-the-codec",children:"Step 5: Share the Codec"}),"\n",(0,i.jsx)(n.h3,{id:"document-the-codec",children:"Document the Codec:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Write clear documentation for the codec, explaining:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Input format (e.g., raw payload structure)."}),"\n",(0,i.jsx)(n.li,{children:"Output format (tags and fields)."}),"\n",(0,i.jsx)(n.li,{children:"Any assumptions or limitations."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"publish-the-codec",children:"Publish the Codec:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add the codec to a shared repository or tenant-wide accessible location in MetSci"}),"\n",(0,i.jsx)(n.li,{children:"Optionally, contribute it to the open-source community or post it in forums like GitHub or ChirpStack discussions."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-6-monitor-and-iterate",children:"Step 6: Monitor and Iterate"}),"\n",(0,i.jsx)(n.h3,{id:"monitor-data-consistency",children:"Monitor Data Consistency:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Periodically review incoming data for anomalies or inconsistencies."}),"\n",(0,i.jsx)(n.li,{children:"Run queries in your database (e.g., InfluxDB) to check for schema alignment."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"iterate-as-new-devices-are-added",children:"Iterate as New Devices Are Added:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use the standardized workflow to onboard new devices and codecs."}),"\n",(0,i.jsx)(n.li,{children:"Ensure they adhere to the schema from the start."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-notes",children:"Key Notes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Start Small"}),": Begin with one device type and scale as you refine the process."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reuse Logic"}),": Write modular functions in your codec for common transformations (e.g., unit conversions, metadata extraction)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Tenant Compatibility"}),": Ensure all device profiles and applications across tenants use the same schema."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);