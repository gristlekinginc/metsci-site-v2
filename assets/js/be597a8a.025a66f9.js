"use strict";(self.webpackChunkmeteoscientific=self.webpackChunkmeteoscientific||[]).push([[6575],{3580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var i=t(4848),r=t(8453);const s={sidebar_position:1,title:"Dragino LDDS75",description:"Distance/Level Detection Sensor",tags:["dragino","distance","level","liquid level","temperature"]},d="Dragino LDDS75 Distance Sensor",a={id:"codecs/codecs/dragino-ldds75",title:"Dragino LDDS75",description:"Distance/Level Detection Sensor",source:"@site/docs/codecs/codecs/dragino-ldds75.md",sourceDirName:"codecs/codecs",slug:"/codecs/codecs/dragino-ldds75",permalink:"/docs/codecs/codecs/dragino-ldds75",draft:!1,unlisted:!1,editUrl:"https://github.com/gristlekinginc/metsci-site-v2/tree/main/docs/codecs/codecs/dragino-ldds75.md",tags:[{label:"dragino",permalink:"/docs/tags/dragino"},{label:"distance",permalink:"/docs/tags/distance"},{label:"level",permalink:"/docs/tags/level"},{label:"liquid level",permalink:"/docs/tags/liquid-level"},{label:"temperature",permalink:"/docs/tags/temperature"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Dragino LDDS75",description:"Distance/Level Detection Sensor",tags:["dragino","distance","level","liquid level","temperature"]},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/codecs/overview"}},l={},o=[{value:"Features",id:"features",level:2},{value:"Codec Implementation",id:"codec-implementation",level:2},{value:"Output Fields",id:"output-fields",level:2},{value:"Sample Output",id:"sample-output",level:2},{value:"Device Configuration",id:"device-configuration",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dragino-ldds75-distance-sensor",children:"Dragino LDDS75 Distance Sensor"}),"\n",(0,i.jsx)(n.p,{children:"The LDDS75 is a LoRaWAN ultrasonic distance/level detection sensor. It provides decent non-contact measurement of distance or liquid levels up to 7.5 meters (about 24', aka freedom units), with precision to a few inches.  Confusingly for a new deployer, there is an optional temperature sensor you can add.  If you don't add it, part of your payload will be \"temperature = 0\" or something similar.  These work well for tank level monitoring, bin fill measurement, or any application requiring generally accurate distance sensing."}),"\n",(0,i.jsxs)(n.p,{children:["It's not precisely accurate; if you're fine with a few inches of variance this is a great solution.  I've used 'em in the ",(0,i.jsx)(n.a,{href:"https://gristleking.com/how-to-measure-endangered-vernal-pool-depth-using-the-helium-network/",children:"Vernal Pools Project."})]}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Distance measurement range: 0-75cm"}),"\n",(0,i.jsx)(n.li,{children:"Temperature monitoring (optional)"}),"\n",(0,i.jsx)(n.li,{children:"Battery voltage monitoring"}),"\n",(0,i.jsx)(n.li,{children:"Interrupt and sensor status reporting"}),"\n",(0,i.jsx)(n.li,{children:"Class A LoRaWAN device"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"codec-implementation",children:"Codec Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Codec by MeteoScientific\n// Feel free to share and modify as needed\n// meteoscientific.com\n\nfunction decodeUplink(input) {\n    var decoded = {};\n\n    try {\n        var bytes = input.bytes;\n        \n        // Battery Voltage (naturally a float)\n        var batValue = (bytes[0] << 8 | bytes[1]) & 0x3FFF;\n        decoded.battery_voltage = parseFloat((batValue / 1000).toFixed(3));  // in V\n\n        // Distance (naturally an integer in mm)\n        decoded.distance = bytes[2] << 8 | bytes[3];  // in mm\n\n        // Temperature if present (naturally an integer in \xb0C)\n        if (bytes.length > 6) {\n            var tempValue = (bytes[5] << 8 | bytes[6]);\n            decoded.temperature = (tempValue & 0x8000) ? tempValue - 0x10000 : tempValue;  // in \xb0C\n        }\n\n        // Status flags as booleans\n        if (bytes.length > 4) {\n            decoded.interrupt_status = bytes[4] === 1;\n        }\n        \n        if (bytes.length > 7) {\n            decoded.sensor_status = bytes[7] === 1;\n        }\n\n        return {\n            data: decoded\n        };\n    } catch (err) {\n        return {\n            errors: [`Decoder error: ${err.message}`]\n        };\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"output-fields",children:"Output Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Unit"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"battery_voltage"})}),(0,i.jsx)(n.td,{children:"Float"}),(0,i.jsx)(n.td,{children:"V"}),(0,i.jsx)(n.td,{children:"Battery voltage level"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"distance"})}),(0,i.jsx)(n.td,{children:"Integer"}),(0,i.jsx)(n.td,{children:"mm"}),(0,i.jsx)(n.td,{children:"Measured distance in millimeters"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"temperature"})}),(0,i.jsx)(n.td,{children:"Integer"}),(0,i.jsx)(n.td,{children:"\xb0C"}),(0,i.jsx)(n.td,{children:"Temperature (if enabled)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"interrupt_status"})}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Interrupt flag status"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sensor_status"})}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Sensor operation status"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"sample-output",children:"Sample Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "battery_voltage": 3.395,\n    "distance": 1248,\n    "temperature": 0,\n    "interrupt_status": false,\n    "sensor_status": true\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"device-configuration",children:"Device Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The LDDS75 can be configured using a USB-TTL adapter. Key configuration options include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Measurement interval"}),"\n",(0,i.jsx)(n.li,{children:"Temperature monitoring enable/disable"}),"\n",(0,i.jsx)(n.li,{children:"Interrupt thresholds"}),"\n",(0,i.jsx)(n.li,{children:"LoRaWAN parameters"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For detailed configuration instructions, see our ",(0,i.jsx)(n.a,{href:"/docs/tutorial-basics/configure-a-device",children:"device configuration guide"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/tutorial-basics/good-housekeeping-for-LoRaWAN-sensor-fleets",children:"Data Structure Guidelines"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.dragino.com/downloads/downloads/LoRa_End_Node/LDDS75/LDDS75_LoRaWAN_User_Manual_v1.1.0.pdf",children:"Device Manual"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.dragino.com/products/lora-lorawan-end-node/item/174-ldds75.html",children:"Manufacturer Website"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/tutorial-basics/configure-a-device",children:"Configuration Guide"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);