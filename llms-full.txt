# MeteoScientific Complete Documentation
Generated on 2025-07-01

This file contains the complete text of MeteoScientific's LoRaWAN documentation and selected blog posts, optimized for AI consumption with enhanced metadata.

================================================================================

## Category: Codec Library
Path: codecs
Type: category
Intent: Navigate to category: codec library
Summary: Browse content in the category: codec library section
Difficulty: Beginner
Keywords: LoRaWAN, documentation



--------------------------------------------------------------------------------

## Category: Tutorial - Basics
Path: tutorial-basics
Type: category
Intent: Navigate to category: tutorial - basics
Summary: Browse content in the category: tutorial - basics section
Difficulty: Beginner
Keywords: LoRaWAN, documentation



--------------------------------------------------------------------------------

## Category: Tutorial - Extras
Path: tutorial-extras
Type: category
Intent: Navigate to category: tutorial - extras
Summary: Browse content in the category: tutorial - extras section
Difficulty: Beginner
Keywords: LoRaWAN, documentation



--------------------------------------------------------------------------------

## Intro
Path: intro.md
Type: tutorial
Intent: Learn the fundamentals of LoRaWAN and how to implement IoT solutions using Helium.
Summary: This tutorial introduces beginners to the Helium LoRaWAN ecosystem, guiding users through essential concepts and device setup. It covers basic to intermediate topics, including common troubleshooting issues. Ideal for those interested in vehicle tracking, agricultural monitoring, or expanding their IoT knowledge, this resource serves as a practical bridge to real-world applications of LoRaWAN technology.
Difficulty: Beginner
Keywords: LoRaWAN, IoT, Helium Network, device setup, tracking devices, agriculture monitoring, troubleshooting, basic concepts
Technologies: Helium Network, LoRaWAN, IoT devices, tracking devices, agricultural sensors
Prerequisites: Basic understanding of IoT, Familiarity with LoRa technology, Introduction to Helium Network
Related Topics: LoRaWAN device configuration, Advanced troubleshooting in LoRaWAN, IoT applications in agriculture, Setting up a LoRaWAN gateway

# MeteoScientific Intro

The point of MeteoScientific is to provide you with a way to learn about and then actually DO stuff using the Helium LoRaWAN.  

The Tutorial - Basics section is more or less a mirror of the YouTube videos transcribed and cleaned up.  it walks you through everything from the basic concepts to getting a device online.

The Tutorial - Extras section is where we take the issues that come up most commonly for people once they've gotten the basics down and see if we can solve them.  Since MetSci is still in the **new & experimental** mode, some of the lessons are still unproven, and represent only a starting point for where to begin.

Whether you're using tracking devices for vehicles, monitoring an agriculture field, or just want to learn more about LoRaWAN, this site was built to be the bridge between what is possible and how YOU can do it.

--------------------------------------------------------------------------------

## Codec Template
Path: codecs/codec-template.md
Type: tutorial
Intent: Learn how to create and implement device codecs for LoRaWAN documentation.
Summary: This tutorial provides a structured codec template for documenting new LoRaWAN device codecs. It guides users through the codec implementation, output format, and device configuration, making it ideal for beginners and intermediate learners in the IoT field. Enhance your understanding of how to effectively document and utilize device codecs within LoRaWAN applications.
Difficulty: Intermediate
Keywords: LoRaWAN codec, IoT device documentation, codec implementation, sensor output format, device configuration
Technologies: LoRaWAN, JavaScript, JSON, device manual, data structure guidelines
Prerequisites: Understanding of LoRaWAN basics, Familiarity with JSON format, Basic JavaScript knowledge
Related Topics: LoRaWAN Basics, Configuring LoRaWAN Devices, Data Structure Guidelines for IoT, Advanced Codec Implementations, IoT Sensor Types

# Device Codec Template

Use this template when adding new device codecs to the documentation.

```markdown
---
sidebar_position: 1
title: [Manufacturer] [Model]
description: [Brief description]
tags:
  - [manufacturer]
  - [sensor type]
  - [measurement type]
---

# [Manufacturer] [Model] Codec

Brief description of the device and its primary use case.

## Codec Implementation

```javascript
// Codec implementation here
```

## Output Format

| Field | Type | Unit | Description |
|-------|------|------|-------------|
| `field_name` | Type | Unit | Description |

## Sample Output

```json
{
    "sample": "output"
}
```

## Device Configuration

Configuration instructions or link to configuration guide.

## Additional Resources
- [Data Structure Guidelines](/docs/tutorial-basics/good-housekeeping-for-LoRaWAN-sensor-fleets)
- [Device Manual](#)
- [Manufacturer Website](#)
```

--------------------------------------------------------------------------------

## Overview
Path: codecs/overview.md
Type: tutorial
Intent: Discover how to efficiently implement codecs for various IoT sensors in a LoRaWAN environment.
Summary: The MeteoScientific Codec Library tutorial provides a structured overview of codecs for IoT sensors, organized by manufacturer and sensor type. It guides users in finding and implementing the right codec for their needs, making it ideal for beginners to intermediate learners interested in LoRaWAN technology. Best practices and contribution guidelines are also included.
Difficulty: Beginner
Keywords: LoRaWAN codecs, IoT sensor implementation, MeteoScientific Console, sensor types, codec library
Technologies: MeteoScientific Console, LoRaWAN, codec, sensor, manufacturer
Prerequisites: Basic understanding of LoRaWAN, Familiarity with IoT sensors, Knowledge of codec implementation
Related Topics: Data Structure Guidelines, LoRaWAN Best Practices, IoT Sensor Types, Contributing Codecs, MeteoScientific Tutorials

# Codec Library Overview

Welcome to the MeteoScientific Codec Library. This collection of codecs is organized to help you quickly find and implement the right decoder for your sensor.

Many of these codecs are available in the [MetSci Console](https://console.meteoscientific.com/front/), where you can easily import them when in your account.

![Choosing from a template in the MetSci Console](/images/codecs/device-profile-templates.png)

## Organization
Our codecs are organized by manufacturer and sensor type, making it easy to find exactly what you need. Each codec includes:
- Brief sensor description
- Manufacturer and type tags
- Ready-to-use codec implementation

For best practices on implementing these codecs, see our [Data Structure Guidelines](/docs/tutorial-basics/good-housekeeping-for-LoRaWAN-sensor-fleets).

## Finding Codecs
You can find codecs by:
1. **Manufacturer**: Dragino, Milesight, Seeed Studio, etc.
2. **Sensor Type**: Weather, Soil Moisture, Air Quality, etc.
3. **Search**: Use the search bar above to find specific sensors

## Adding New Codecs
Contributing a new codec? Use our [Codec Template](./codec-template) to ensure consistent documentation.

--------------------------------------------------------------------------------

## Dragino LDDS75
Path: codecs/codecs/dragino-ldds75.md
Type: tutorial
Intent: Learn how to utilize the Dragino LDDS75 ultrasonic distance sensor for IoT applications.
Summary: This tutorial introduces the Dragino LDDS75, a LoRaWAN ultrasonic distance sensor ideal for beginners to intermediate learners. It covers features such as distance measurement, optional temperature monitoring, and battery status reporting. The guide includes codec implementation for data decoding, device configuration, and practical applications in tank level monitoring and distance sensing.
Difficulty: Intermediate
Keywords: LoRaWAN sensor, Dragino LDDS75, ultrasonic distance measurement, IoT applications, temperature monitoring, battery voltage monitoring, distance sensing, LoRaWAN device, codec implementation
Technologies: LoRaWAN, Dragino, USB-TTL adapter, JSON, MeteoScientific
Prerequisites: Understanding of LoRaWAN technology, Basic knowledge of IoT sensors, Familiarity with JSON data format
Related Topics: Introduction to LoRaWAN, Configuring LoRaWAN devices, IoT sensor integration, Data decoding in IoT, Monitoring liquid levels with IoT

# Dragino LDDS75 Distance Sensor

The LDDS75 is a LoRaWAN ultrasonic distance/level detection sensor. It provides decent non-contact measurement of distance or liquid levels up to 7.5 meters (about 24', aka freedom units), with precision to a few inches.  Confusingly for a new deployer, there is an optional temperature sensor you can add.  If you don't add it, part of your payload will be "temperature = 0" or something similar.  These work well for tank level monitoring, bin fill measurement, or any application requiring generally accurate distance sensing.  

It's not precisely accurate; if you're fine with a few inches of variance this is a great solution.  I've used 'em in the [Vernal Pools Project.](https://gristleking.com/how-to-measure-endangered-vernal-pool-depth-using-the-helium-network/)

## Features
- Distance measurement range: 0-75cm
- Temperature monitoring (optional)
- Battery voltage monitoring
- Interrupt and sensor status reporting
- Class A LoRaWAN device

## Codec Implementation

```javascript
// Codec by MeteoScientific
// Feel free to share and modify as needed
// meteoscientific.com

function decodeUplink(input) {
    var decoded = {};

    try {
        var bytes = input.bytes;
        
        // Battery Voltage (naturally a float)
        var batValue = (bytes[0] << 8 | bytes[1]) & 0x3FFF;
        decoded.battery_voltage = parseFloat((batValue / 1000).toFixed(3));  // in V

        // Distance (naturally an integer in mm)
        decoded.distance = bytes[2] << 8 | bytes[3];  // in mm

        // Temperature if present (naturally an integer in °C)
        if (bytes.length > 6) {
            var tempValue = (bytes[5] << 8 | bytes[6]);
            decoded.temperature = (tempValue & 0x8000) ? tempValue - 0x10000 : tempValue;  // in °C
        }

        // Status flags as booleans
        if (bytes.length > 4) {
            decoded.interrupt_status = bytes[4] === 1;
        }
        
        if (bytes.length > 7) {
            decoded.sensor_status = bytes[7] === 1;
        }

        return {
            data: decoded
        };
    } catch (err) {
        return {
            errors: [`Decoder error: ${err.message}`]
        };
    }
}
```

## Output Fields

| Field | Type | Unit | Description |
|-------|------|------|-------------|
| `battery_voltage` | Float | V | Battery voltage level |
| `distance` | Integer | mm | Measured distance in millimeters |
| `temperature` | Integer | °C | Temperature (if enabled) |
| `interrupt_status` | Boolean | - | Interrupt flag status |
| `sensor_status` | Boolean | - | Sensor operation status |

## Sample Output

```json
{
    "battery_voltage": 3.395,
    "distance": 1248,
    "temperature": 0,
    "interrupt_status": false,
    "sensor_status": true
}
```

## Device Configuration

The LDDS75 can be configured using a USB-TTL adapter. Key configuration options include:
- Measurement interval
- Temperature monitoring enable/disable
- Interrupt thresholds
- LoRaWAN parameters

For detailed configuration instructions, see our [device configuration guide](/docs/tutorial-basics/configure-a-device).

## Additional Resources
- [Data Structure Guidelines](/docs/tutorial-basics/good-housekeeping-for-LoRaWAN-sensor-fleets)
- [Device Manual](https://www.dragino.com/downloads/downloads/LoRa_End_Node/LDDS75/LDDS75_LoRaWAN_User_Manual_v1.1.0.pdf)
- [Manufacturer Website](https://www.dragino.com/products/lora-lorawan-end-node/item/174-ldds75.html)
- [Configuration Guide](/docs/tutorial-basics/configure-a-device)

--------------------------------------------------------------------------------

## 004 Set Up Applications
Path: tutorial-basics/004-set-up-applications.md
Type: tutorial
Intent: Learn how to create and manage applications within a LoRaWAN network.
Summary: This tutorial guides beginners to intermediate learners through the process of setting up applications in a LoRaWAN environment. It covers defining applications, establishing naming conventions, creating new applications, adding devices, and utilizing multicast groups and integrations. Perfect for those looking to organize and manage IoT devices effectively.
Difficulty: Beginner
Keywords: LoRaWAN applications, IoT device management, multicast groups, HTTP integrations, naming conventions
Technologies: LoRaWAN, HTTP integrations, multicast groups, MeteoScientific Console
Prerequisites: Understanding of LoRaWAN basics, Familiarity with IoT concepts, Access to MeteoScientific Console
Related Topics: How to Add Devices in LoRaWAN, Understanding LoRaWAN Protocols, Integrating IoT Devices with HTTP

# Applications 

## Introduction to Applications

When you're in your [Console](https://console.meteoscientific.com/front/login) and first sign in, go down to **Applications** on the left-hand side. I've already set up a couple of applications, but before we jump into those, let's take a look at what an application actually is.

## Want to Watch?

If learning by watching is easier for you, the video for this is here:
<iframe width="560" height="315" src="https://www.youtube.com/embed/if3FsIUoInk?si=hyjZ2ct_pzykOtks" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

### What is an Application?

It's really simple:  An **application** is just a group of devices that are similar. For example, it could be a group of weather stations, trash can fill level sensors, traffic counters, or parking sensors at a specific garage.

The really important thing with applications, especially at the beginning, is to think about and organize your **naming convention**. 

I use a naming convention that includes the client group, device type, etc. For example, it might be something like "Acme Parking Occupancy Sensor Franklin Garage Daily." These names make sense to me, but they may not make sense to you, and that's totally fine. If you're not the only user on the account, you might want to add a brief description to explain the naming convention.

### Creating a New Application

Let's go ahead and add a new application. Using the example I just gave, you might name it "Acme Occupancy Franklin Daily." You can also add a description, like:

```This is the Acme account using parking sensors to measure occupancy at the Franklin garage.```

Once you've filled in the details, hit Submit, and the new application will be created. 

You can see it listed in the Applications section. If you need to make changes, just click on the application again, and go over to Application Configuration. For example, if you made a typo like "garag" instead of "garage," just correct it and hit the Submit button to save the changes.

### Adding Devices
Next, let's talk about adding devices. Right now, I don't have any devices in this application, but I will show you how to add one in the next lesson. It's a pretty simple process, but for now, let's stick with the basics of applications.

### Multicast Groups
The next tab you'll see is Multicast Groups. A multicast group is a way to send the same downlink to every device in an application. For instance, if you want to tell all the parking sensors to report every five minutes instead of every ten minutes, you would send a downlink using a multicast group.

### Integrations
Finally, let's discuss Integrations. What we're mostly going to be doing is using HTTP integrations. To give you a quick preview of what that might look like, I'll show you an example over at app.meteoscientific.com. You can sign up for this as well if you want to.

At the time this was written on June 8th, 2023, there wasn't much available, but you can still see how I have a bunch of different regions set up. Think of each region as an application. For example, all the soil moisture sensors in Region Three might have a different setting than those in Region Four—perhaps we're growing roses in Region Three and oak trees in Region Four, so we need different uplink intervals. You can set up these applications in whatever way suits your needs.

--------------------------------------------------------------------------------

## Add A Device
Path: tutorial-basics/005-adding-a-device.md
Type: tutorial
Intent: Learn how to add a device to the ChirpStack console for LoRaWAN applications.
Summary: This tutorial guides beginners and intermediate learners through the process of adding a device, such as a soil moisture sensor, to the ChirpStack console. Key steps include preparing the console, inputting device identifiers like DevEUI, AppEUI, and AppKey, and monitoring the device post-setup. Enhance your IoT skills with this practical guide to LoRaWAN device management.
Difficulty: Beginner
Keywords: LoRaWAN, ChirpStack, IoT device, DevEUI, AppEUI, AppKey, soil moisture sensor, device management, IoT tutorial
Technologies: ChirpStack, LoRaWAN, DevEUI, AppEUI, AppKey
Prerequisites: Understanding of LoRaWAN basics, Familiarity with ChirpStack console, Knowledge of device profiles
Related Topics: Configuring a LoRaWAN Gateway, Understanding LoRaWAN Protocols, IoT Device Profiles, Monitoring LoRaWAN Devices, Setting Up ChirpStack

# Add A Device

### Step 1: Prepare the ChirpStack Console

Here we are in our ChirpStack console, currently in the dashboard with nothing going on. Before we get started, you’ll need three things. I’m assuming you already have a device profile and an application set up, in this case, a soil moisture sensor. However, you’ll also need three other important pieces of information that come with every sensor.

## Want to Watch?
If watching a video is easier for you than reading, I've recorded one for ya here:
<iframe width="560" height="315" src="https://www.youtube.com/embed/rhNYKyC3Avs?si=1LimXlj78xfzqPb-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

### The Three Key Identifiers

When you get a sensor, every sensor *should* come with three long and complicated numbers:
```
- DevEUI (Device EUI)
- AppEUI (Application EUI)
- AppKey (Application Key)
```

> **Note:** EUI stands for Extended Unique Identifier. It’s not something you hear often, but now you know!

These three identifiers are necessary to add the device to your console and ensure it’s recognized properly.

### Step 2: Add the Device to the ChirpStack Console

Let's move forward with adding the device:

1. **Go to Applications:** 
   - Navigate to your application (we’ve set this up in a previous video).
   - Click on **Add Device**.

2. **Naming Convention:**
   - Use a naming convention that makes sense to you. For example, you might use the name of the device, the last four digits of the DevEUI, and the position of the device.

3. **Fill in Device Details:**
   - Enter any additional details that are important to you, such as a description or location (e.g., “Avocado Tree in the Backyard”). 
   - Set up the date and any other relevant notes.

4. **Input the DevEUI:**
   - Typically, you would copy and paste the DevEUI. Don’t bother typing it manually; it’s a big hassle.
   - Reputable manufacturers will provide the DevEUI, AppEUI, and AppKey.

5. **Generate EUI and Keys:**
   - ChirpStack allows you to generate these identifiers if needed.
   - Copy and store them in a safe place, like a Google Sheet.

6. **Configure the Device Profile:**
   - If required, add a variable called `app_eui` with the correct value (e.g., 16 zeros in ChirpStack for LoRaWAN).

7. **Submit the Device:**
   - Once all details are filled in, submit the device.

8. **Application Key:**
   - Most devices come with an application key. Add this key to the appropriate field.

9. **Finalize Setup:**
   - Make sure the console is ready before powering on the device.

### Step 3: Power On and Monitor the Device

Once you’ve set everything up in the console:

1. **Power on the Device:**
   - Wait for the console to recognize the device.

2. **Check the Dashboard:**
   - The console will display various metrics such as received packets (RSSI) and signal-to-noise ratio (SNR). These metrics let you know how well the device is communicating.

3. **Explore Configuration Tabs:**
   - Go through the various tabs such as **Tags and Variables**, **OTA Keys**, **Activation**, **Queue**, **Events**, and **LoRaWAN Frames**.

### Understanding Events and Frames

- **Events:** Contain information from the sensor (e.g., battery status).
- **Frames:** Include both the sensor events and additional information from the gateway.

### Now...wait.  

After a few minutes, you should see events and frames start to populate. You’ll see the status, battery level, and other details. The console will show you when the sensor requests to join and when it’s accepted.

That’s how you add a device to the MeteoScientific ChirpStack console.

--------------------------------------------------------------------------------

## 003 Device Profiles
Path: tutorial-basics/003-device-profiles.md
Type: tutorial
Intent: Learn how to create and manage device profiles in the ChirpStack Console for LoRaWAN devices.
Summary: This tutorial introduces beginners to intermediate learners on how to utilize device profiles within the MeteoScientific ChirpStack Console. It covers the creation of device templates, naming conventions, and uplink/downlink concepts essential for managing IoT devices effectively. Understanding these profiles is crucial for organizing and optimizing LoRaWAN sensor deployments.
Difficulty: Intermediate
Keywords: LoRaWAN device profiles, ChirpStack Console, IoT device management, uplink, downlink, sensor configuration, MakerFabs, LoRaWAN templates
Technologies: ChirpStack, LoRaWAN, MakerFabs, IoT sensors
Prerequisites: Basic understanding of LoRaWAN, Familiarity with IoT concepts, Knowledge of ChirpStack
Related Topics: LoRaWAN Basics, Configuring LoRaWAN Gateways, Understanding Uplinks and Downlinks, IoT Device Types, Data Management in IoT

# Device Profiles

This is a lesson on how to use the device profiles part of the MeteoScientific ChirpStack Console. 

## Getting Started

If you haven't already signed up for a console account [console.meteoscientific.com](https://console.meteoscientific.com) knock that out now.  It's free to sign up, you get a few DC to test things out, and without an account none of the rest of this will make sense.

## Want to Watch?

I get it, it's nice to have a video walk-through for this.  If you'd rather watch than read, check it out here:
<iframe width="560" height="315" src="https://www.youtube.com/embed/rr77pVG1bDk?si=0CXmAFAsQgl6d_2r" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

## What is a Device Profile?

A device profile is a template for what a device is, can, and should do. It's pretty straightforward.  It just makes it easier for you to create groups of devices that all do similar things. These could be parking sensors, traffic counters, or whatever devices you're working with. I'll also discuss the naming convention I use to keep everything organized.

I've already set up a device profile, so we can walk through it together. This is the MakerFab Soil Moisture LWUS 915 one-hour device profile. 

### Naming Convention

Inside the profile, I've got the naming convention: 

- **Maker:** MakerFabs
- **Device:** Soil Moisture LW (LoRaWAN)
- **Region:** US-915
- **Interval:** One-hour

That's just my naming convention. You can use whatever notes will be useful to you or other users in your account. Set your region to whatever region you're in; I'm in the US-915 region here in sunny San Diego, California. 

### Default Settings

Almost all the other settings can be left alone. You can change them if you want, but for now, I'd recommend leaving them as they are. The only other thing to change is the **Expected Uplink Interval.**

#### What is an Uplink?

An uplink is the information coming from the sensor. In LoRaWAN terms, we're always talking about data moving **from** the sensor. An uplink is a packet sent from the sensor to the hotspot, which then forwards it to the LNS (LoRaWAN Network Server) and onto the console where it gets decoded. The decoded data is then forwarded to app, which can show you what's happening or send a notification "Hey, a pipe is leaking!" or trigger an action `Airstrikes on leaking pipe.`

If we wanted to send something back down to the sensor, that would be called a **downlink**. 

Most devices are **Class A** devices, meaning they only occasionally send out an uplink and only listen to hear if you have any instructions after they've sent an uplink.  It's part of what makes 'em low power.  They wake up on a timer, fire off a message, see if you've said anything in the meantime, then go back to low power sleep. For example, this soil moisture sensor sends out an uplink every hour.  

Other devices, called **Class B** and **Class C** devices, can be more active (and more power hungry).  We'll cover them in another lesson.  

Now, even with a Class A device, you might place it in a location where the signal is occasionally be blocked, in which case you may want to adjust the expected uplink interval from your computer rather than wading out into the swamps with your laptop to manually reset. 

On our end, the Console expects a device to send on schedule.  If the device doesn't uplink on time, Console can fire off a notification to us.  This can get a little tiresome; if a device sends an uplink every hour but occasionally fails due to signal interference, you might change the expected uplink interval to 7200 seconds (two hours) to avoid unnecessary warnings.

### Additional Settings

#### Join OTA

Join OTA (Over The Air) is a setting that should be left on. Class B and Class C devices will be discussed in a later video, but for now, just leave these settings as they are.

#### Codec

The codec is the decoder that translates the scrambled data packet into readable information, like temperature or humidity. Almost all devices will come with a codec provided by the manufacturer. You can find and use these codecs, or, if you're more technically inclined, you can customize them.  ChatGPT has made writing codecs MUCH easier.

#### Tags

Tags allow you to categorize devices. For example, you might set up a location tag for "Quadrant 2A." This helps you organize and assign tags to devices within this template.

#### Measurements

In the ChirpStack console, you can configure the decoder to display the values you're seeing, like soil moisture percentage. This won't create graphs or send notifications, but it's a quick way to verify that your decoder and device are working properly.

Once you've configured everything to your liking, hit **Submit** to save the device profile.

## Adding Device Profiles

### Method 1: Using Templates

Let's say you're new and want to add a MakerFab sensor. Instead of manually entering all the details, you can select a **Device Profile Template**. The MeteoScientific console includes a few templates, and more are being added regularly. This means if we have a pre-built template, you can add it easily to Console without having to figure out the codec and other details.

### Method 2: Manual Entry

If you need to manually add a device profile, you can do so by filling in all the necessary details. For example, if you're adding a Senzemo Send Stick, you would:

1. Set the naming convention (e.g., Senzemo Send Stick SMC 30).
2. Set the region (e.g., US-915).
3. Set the uplink interval (e.g., 7200 seconds for a two-hour interval).

You can add notes, like a link to the device manual or information about where the device is located. For the codec, you'll either paste in the manufacturer's codec or customize it as needed. Once everything is set, hit **Submit** to save the profile.

## Conclusion

You've now learned what a device profile is, how it fits into the system, how it gets used, and two ways to add it—either by using a template or manually. 

Rock and roll—have a great day, and I'll see you on the console!

--------------------------------------------------------------------------------

## Structure Your Data
Path: tutorial-basics/009-good-housekeeping-for-LoRaWAN-sensor-fleets.md
Type: tutorial
Intent: Learn best practices for structuring data in LoRaWAN applications.
Summary: This tutorial guides beginners and intermediate learners in structuring data for LoRaWAN sensors to ensure clean and consistent data processing. It covers the importance of structured data, cardinality considerations, and best practices for integrating with databases like InfluxDB, helping prevent common pitfalls in IoT data management.
Difficulty: Intermediate
Keywords: LoRaWAN, data structures, InfluxDB, IoT sensors, cardinality, data processing, best practices, sensor integration
Technologies: InfluxDB, LoRaWAN, devEui, sensor_type, region
Prerequisites: Understanding of LoRaWAN basics, Familiarity with IoT concepts, Knowledge of data storage systems
Related Topics: LoRaWAN Data Management, InfluxDB for IoT, Best Practices for IoT Data, LoRaWAN Sensor Deployment, Debugging LoRaWAN Codecs

# Good Housekeeping for Data Structures

This guide is an attempt to help you step neatly past a major mistake I made when first getting into deploying LoRaWAN sensors: **Bolloxing up my data structures.**

In the madly exciting journey of actually getting a sensor to connect to the [MetSci LNS](https://console.meteoscientific.com/front/) and then send me data, I added all that data higgledy-piggeldy, using `Distance` or `distance` or `meters` or whatever set of units I had at the time for whatever sensor I was deploying.

This worked at the onesy-twosy level, but as I started adding more sensors and building databases to store the data, it bit me in the ass.

Let the bite marks on my ass be a guide to you. While scars add character, you don’t have to replicate all of mine.

This guide focuses on best practices for writing, modifying, and debugging LoRaWAN codecs to ensure clean, consistent, and reliable data processing. These principles help prevent common issues when integrating with databases like InfluxDB or visualizing data in applications.

---

## **Why Structured Data Matters (Engineer Answer)**

1. **Scalability**: As you add more devices, consistent structures simplify integration and maintenance.  
2. **Compatibility**: Adopting standardized fields and tags minimizes schema conflicts in databases like InfluxDB.  
3. **Query Efficiency**: Well-structured tags and fields enable faster and more precise queries.

---

### Cardinality Considerations (Nerd Talk)

Cardinality refers to the number of unique values a tag or field can have in your database. While tags are indexed in InfluxDB for fast querying, high-cardinality tags (e.g., unique `devEui` values for thousands of devices) can significantly impact database performance.

This may not be a problem for most of us, as "high cardinality" only becomes an issue when you have hundreds of thousands of unique tag values.

#### Why Cardinality Matters
1. **Storage Overhead**: Each unique combination of tags creates a new series in InfluxDB, increasing storage requirements.  
2. **Query Performance**: High-cardinality tags slow down queries because the database must search through a larger index.  
3. **Management Complexity**: Excessively granular tags make it harder to maintain consistent schemas.

#### Rules of Thumb for High Cardinality
1. **Small Deployments (10–1,000 Devices)**  
   - Using `device_id` or `devEui` as tags is acceptable.  
   - Use broader tags like `sensor_type` or `region` to group data logically.

2. **Medium Deployments (1,000–10,000 Devices)**  
   - Avoid `devEui` as a tag unless necessary for querying.  
   - Consider grouping devices by broader categories (e.g., `region`, `building_id`).

3. **Large Deployments (10,000+ Devices)**  
   - Avoid high-cardinality tags entirely.  
   - Store unique metadata (e.g., `device_id`) in external systems or as fields.

#### Best Practices
- Use high-cardinality tags like `devEui` only when you frequently filter or group data by individual devices.  
- Favor low-cardinality tags such as `region` or `sensor_type` for broader groupings.  
- Move metadata that rarely changes (e.g., `firmware_version`, `manufacturer`) into fields or external metadata stores.

---

## **Inspiration From Six Real LoRaWAN Payloads**

To illustrate consistent naming, consider the following top-level fields from **six sample LoRaWAN payloads** commonly seen on the MetSci LNS. This structure helps ensure each payload is parsed and stored in a standardized way:

### Common Top-Level Fields

1. **deduplicationId**  
2. **time**  
3. **deviceInfo**  
   - `tenantId`, `tenantName`, `applicationId`, `applicationName`,  
   - `deviceProfileId`, `deviceProfileName`, `deviceName`,  
   - `devEui`, `deviceClassEnabled`, `tags`  
4. **devAddr**  
5. **adr**  
6. **dr**  
7. **fCnt**  
8. **fPort**  
9. **confirmed**  
10. **data**  
11. **object** (contains sensor readings; may vary by device)  
12. **rxInfo** (array detailing gateways, RSSI, SNR, etc.)  
13. **txInfo** (frequency, modulation, etc.)

### Example Device Payload Structures

- **LDDS75** (Liquid Level Sensor):  
  - `object` includes keys like `Distance`, `TempC_DS18B20`, `log.distance`, etc.
- **AM319** (Indoor Conditions Sensor):  
  - `object` includes `pm2.5`, `co2`, `lightLevel`, `temperature`, etc.
- **S2120** (Weather Station):  
  - `object` includes `wind_speed`, `barometric_pressure`, `air_temperature`, etc.
- **Senzemo SMC30 Stick**:  
  - *No top-level `object`*; raw data is in `data`.  
- **PIR Sensor**:  
  - `object` includes `capacity`, `roomStatusTime`, `roomStatusOccupied`, etc.
- **Water Leak Sensor**:  
  - `object` includes `waterLeakage`, `temperature`, `humidity`, etc.

This consistency makes it easier to write and maintain decoders, store data in databases, and query for sensor metrics.

---

## **Planned Tags and Fields**

For InfluxDB or other time-series databases, plan your structure around tags (metadata for grouping/ filtering) and fields (actual measurements). Even if you’re not using InfluxDB, this general approach applies well to other databases.

### **Tags Table**
Tags provide metadata about each measurement and are ideal for filtering and grouping data.

| **Tag**             | **Description**                                                           |
|---------------------|---------------------------------------------------------------------------|
| `devEui`           | Unique identifier for each sensor                                         |
| `device_name`      | Human-readable name of the device                                         |
| `firmware_version` | For tracking device firmware                                              |
| `label`            | Context-specific label for the device                                     |
| `location`         | Physical location of the sensor (e.g., "Office")                          |
| `sensor_type`      | Device type (e.g., "AM319", "LDDS75", "PIR", "S2120")                     |
| `tenant_id`        | Identifier for the tenant owning the device                               |
| `network`          | The network the sensor is part of (e.g., "helium_iot")                    |
| `gateway_id`       | Identifier of the gateway forwarding the data                             |
| `gateway_name`     | Human-readable name of the gateway                                        |
| `gateway_location` | Physical location of the gateway (lat, long)                              |
| `region`           | LoRaWAN region configuration (e.g., "US915")                              |
| `hardware_mode`    | Specific hardware configuration or mode (e.g., "CLASS_A", "LT22222")       |
| `work_mode`        | Operational mode of the device                                            |
| `parking_status`   | Parking availability status (e.g., "FREE", "OCCUPIED")                    |
| `schema_version`   | For tracking data structure changes                                       |
| `status_changed`   | Indicates if a status change occurred                                     |

### **Fields Table**
Fields store the actual sensor readings and vary by sensor type. Below are some examples inspired by the payloads above.

| **Field**                 | **Type** | **Unit** | **Description**                              |
|--------------------------|----------|----------|----------------------------------------------|
| `battery_voltage`        | Float    | V        | Battery voltage (e.g., from LDDS75 or PIR)   |
| `distance`               | Integer  | mm       | Distance measurement (LDDS75)                |
| `air_humidity`           | Float    | %        | Air humidity (AM319, S2120)                  |
| `air_temperature`        | Float    | °C       | Air temperature (AM319, S2120)               |
| `co2`                    | Float    | ppm      | CO2 concentration (AM319)                    |
| `light_level`            | Integer  | lux      | Light level measurement (AM319)              |
| `pm10`                   | Float    | µg/m³    | PM10 concentration (AM319)                   |
| `pm2_5`                  | Float    | µg/m³    | PM2.5 concentration (AM319)                  |
| `pressure`               | Integer  | Pa       | Atmospheric pressure (S2120)                 |
| `wind_speed`             | Float    | m/s      | Wind speed (S2120)                           |
| `wind_direction_sensor`  | Float    | degrees  | Wind direction (S2120)                       |
| `rain_gauge`             | Float    | mm       | Rain gauge reading (S2120)                   |
| `temperature`            | Float    | °C       | Basic temperature reading (could be from PIR or Water Leak) |
| `roomStatusOccupied`     | Boolean  | N/A      | Occupancy status (PIR)                       |
| `water_leakage`          | Boolean  | N/A      | Leak status (Water Leak Sensor)              |
| `rssi`                   | Integer  | dBm      | Signal strength                              |
| `snr`                    | Float    | dB       | Signal-to-noise ratio                       |

---

## **Example Data Structure for InfluxDB**

Below is a sample representation of how you might structure one of your sensor payloads (for example, a S2120 Weather Station) when sending it to InfluxDB:

```json
{
  "measurement": "sensor_measurements",
  "tags": {
    "devEui": "6081f905e7de05d7",
    "device_name": "S2120 - Sensecap WX 001",
    "location": "Field",
    "sensor_type": "S2120",
    "tenant_id": "2f78609d-a859-41b9-8d19-2c06e2edd5b4",
    "network": "helium_iot",
    "gateway_id": "112kwtzsie4hAujhtyjPuZdRZ8kKLvLqhXn63wuyDqkxFN2Q7noo",
    "gateway_name": "acidic-punch-copperhead",
    "region": "US915",
    "hardware_mode": "CLASS_A",
    "work_mode": "default",
    "parking_status": "FREE",
    "status_changed": true
  },
  "fields": {
    "wind_speed": 0.0,
    "air_humidity": 37.0,
    "barometric_pressure": 100160.0,
    "light_intensity": 0.0,
    "uv_index": 0.0,
    "air_temperature": 12.6,
    "rain_gauge": 0.0,
    "wind_direction_sensor": 302.0,
    "rssi": -114,
    "snr": -6.0
  },
  "timestamp": "2025-01-06T04:24:41.409Z"
}
```

This example is based on the fields from the **S2120** Weather Station payload. Notice how we are using the top-level metadata (like `region`, `network`, etc.) as tags and the sensor readings (like `air_temperature`, `wind_speed`, and `snr`) as fields.

---

## **Integrating Metadata Optimization in Codec Design**

### Caching Metadata for Periodic Updates

You can optimize your codec by caching metadata that rarely changes (e.g., `tenant_id`, `region`, `sensor_type`) and refreshing it periodically. Here's an example approach:

```javascript
function decodeUplink(input) {
    let metadataCache = getMetadataCache(); // Retrieve cached metadata
    const currentTime = Date.now();
    const metadataRefreshInterval = 86400000; // 24 hours in milliseconds

    if (!metadataCache || (currentTime - metadataCache.lastUpdated > metadataRefreshInterval)) {
        // Update metadata cache if expired or not present
        metadataCache = {
            devEui: "0004a30b012d3577",
            sensor_type: "SMC30",
            tenant_id: "2f78609d-a859-41b9-8d19-2c06e2edd5b4",
            region: "US915",
            lastUpdated: currentTime
        };
        setMetadataCache(metadataCache); // Save updated metadata
    }

    // Decode dynamic measurements
    const measurements = {
        // Hypothetical Senzemo SMC30 decoding
        // Suppose input.bytes = [0xAA, 0xE2, 0x10, ...]
        // Typically you'd parse actual sensor data here
        some_measurement: 42,
    };

    // Combine metadata and measurements
    return {
        data: {
            ...metadataCache,
            ...measurements,
        },
    };
}

// Mocked cache functions for demonstration
function getMetadataCache() {
    return JSON.parse(localStorage.getItem("metadataCache"));
}

function setMetadataCache(cache) {
    localStorage.setItem("metadataCache", JSON.stringify(cache));
}
```

### Explanation:
1. **Metadata Cache**: A local storage object holds metadata like `tenant_id` and `sensor_type`.  
2. **Periodic Refresh**: Metadata is refreshed only when its cache has expired (e.g., every 24 hours).  
3. **Dynamic Measurements**: Each uplink includes only the dynamic measurements, reducing payload size.

### Advantages
- Reduces repetitive transmission of static data.  
- Improves uplink efficiency and database storage.

---

## **Workflow for Aligning Codec Output to Best Practices**

1. **Design Your Schema**: Use the above tag and field guidelines (plus the top-level fields from real sensor payloads) as your reference.  
2. **Adapt the Codec**: Modify your ChirpStack codec to output JSON that matches your schema (paying attention to consistent naming for `object` fields like `distance`, `air_humidity`, etc.).  
3. **Test with Sample Payloads**: Verify that your output adheres to the schema using ChirpStack’s uplink debugger or Node-RED debug nodes.  
4. **Validate in Database**: Send test payloads to your InfluxDB instance and run queries to ensure the data is stored and indexed correctly.

---

By following these practices, you’ll create a reliable and scalable system for managing and analyzing your LoRaWAN sensor fleet.

:::note Advanced Topic
For large deployments with very different sensor types, you might consider splitting your data into multiple measurements (e.g., `weather_measurements`, `parking_measurements`). This requires more complex codec design but can provide better data organization and query performance. Start with the single measurement approach and refactor if needed.
:::

## **Data Structure Planning**

### Small Deployments (1–100 devices)
- Use a simple, flat data structure.  
- Store all metadata as tags.  
- Example implementation:
```json
{
  "measurement": "sensor_data",
  "tags": {
    "devEui": "a84041d000000001",
    "location": "office",
    "sensor_type": "AM319"
  },
  "fields": {
    "air_temperature": 22.5,
    "air_humidity": 65
  }
}
```

### Medium Deployments (100–1,000 devices)
- Group devices by type and location.  
- Use hierarchical tags.  
- Consider separating metadata to reduce cardinality.  
- Example implementation:
```json
{
  "measurement": "environmental_sensors",
  "tags": {
    "region": "west",
    "building": "HQ",
    "floor": "3",
    "sensor_type": "AM319"
  },
  "fields": {
    "air_temperature": 22.5,
    "air_humidity": 65,
    "devEui": "a84041d000000001" // Moved to field to reduce tag cardinality
  }
}
```

### Large Deployments (1,000+ devices)
- Separate measurements by sensor type.  
- Use external metadata store for rarely changing info.  
- Implement data retention policies.  
- Example implementation:
```json
// Main data measurement
{
  "measurement": "temperature_sensors",
  "tags": {
    "region": "west",
    "sensor_group": "environmental"
  },
  "fields": {
    "value": 22.5,
    "devEui": "a84041d000000001",
    "metadata_version": "2024.1"
  }
}

// Separate metadata store (updated less frequently)
{
  "measurement": "device_metadata",
  "tags": {
    "devEui": "a84041d000000001",
    "sensor_type": "AM319"
  },
  "fields": {
    "location": "HQ-3F-Room301",
    "install_date": "2024-01-15",
    "firmware": "1.2.3",
    "calibration_date": "2024-01-01"
  }
}
```

### Key Scaling Considerations
1. **Data Volume Management**  
   - Implement downsampling for historical data.  
   - Use retention policies based on data importance.  
   - Consider multi-tier storage solutions.

2. **Query Optimization**  
   - Index frequently queried tags.  
   - Use time-based partitioning.  
   - Implement query caching where appropriate.

3. **Metadata Management**  
   - Store static metadata separately.  
   - Version control your metadata.  
   - Implement metadata update procedures.

4. **Monitoring and Maintenance**  
   - Track database size and growth.  
   - Monitor query performance.  
   - Set up alerts for anomalies.

---

## **Implementing in the MetSci Chirpstack Console**

Once you've planned your data structure using these guidelines—and referenced real payloads like **LDDS75**, **AM319**, **S2120**, **Senzemo SMC30**, **PIR**, and **Water Leak** sensors—see our [Metrics & Decoders guide](/docs/tutorial-basics/007-metrics-on-chirpstack.md) for detailed implementation steps in ChirpStack or other LoRaWAN servers.

--------------------------------------------------------------------------------

## Configure A Device
Path: tutorial-basics/008-configure-a-device.md
Type: tutorial
Intent: Learn how to configure a LoRaWAN sensor for optimal packet transmission settings.
Summary: This tutorial guides beginners and intermediate learners through the process of configuring a LoRaWAN sensor, specifically the Dragino LDDS75. It covers hardware and software requirements, connecting to a Bus Pirate, and adjusting UART settings for effective data transmission. Ideal for those looking to enhance their IoT skills and understand LoRaWAN device management.
Difficulty: Intermediate
Keywords: LoRaWAN sensor, IoT configuration, UART settings, Dragino LDDS75, Bus Pirate, BLE connectivity, packet transmission, LoRaWAN tutorial
Technologies: LoRaWAN, UART, Bus Pirate, Dragino LDDS75, BLE
Prerequisites: Understanding of LoRaWAN basics, Familiarity with UART communication, Basic knowledge of IoT devices
Related Topics: Add A Device, LoRaWAN Basics, IoT Device Management, Data Transmission Techniques, Troubleshooting LoRaWAN Devices

# Configure a LoRaWAN Sensor

Ok, you just got a new sensor in the mail.  It came with an `DevEUI`, `AppEUI`, `AppKey` and maybe some other fancy stuff. 

You've added it to your [MetSci Console](https://console.meteoscientific.com/front/) following the [Add A Device tutorial](/docs/tutorial-basics/adding-a-device), but...

It's set to fire off a packet every 4 hours.  You want to test it by running it every minute.  How do you configure it?

Some devices have bluetooth (`BLE`) connectivity.  The manufacturer will have a config app you can use, and it'll usually be pretty easy.

Other devices are a little nerdier...

# Maximum Nerd

We're going full nerd today.  

You'll need the following stuff. 

### Hardware

 - Device: I'm going to use a Dragino LDDS75
 - USB-TTL adapter.  I'm going to use a [Bus Pirate v5](https://buspirate.com/get/).  As I write this (late December 2024) there's a v6 out.  Get it if you want to.  
 - DuPont Wires.  These are what you use to connect the Bus Pirate and the device.  You can [get a set here](https://amzn.to/3BYYfPy) for under $10.
 
![Bus Pirate and LDDS75 sensor](/images/tutorial-basics/008-images/bus-pirate-ldds75.png)

### Software
 - Any Terminal emulator.  I'm using [Ghostty](https://ghostty.org/) because it's fun, but you could use Mac's native Terminal or VS Code or anything.  

I'm using a Mac, you can use Windows.  To be honest, Windows is usually easier.  If you're on Windows, try TeraTerm.  If you want to deeply explore your inner nerd, try [Tio](https://github.com/tio/tio).

### 2. Connect to the Bus Pirate 
Follow the docs over at the [BusPirate page](https://firmware.buspirate.com/tutorial-basics/quick-setup) to connect to the BusPirate, then:


### 3. Set Up UART on Bus Pirate

Now that you're talking to the Bus Pirate, we're going to set it up to talk to the LDDS75 over `UART`.   

In your connected terminal (where you should be once you finish the Bus Pirate setup above), type `m` for Menu, then answer `Y` to the VT100 color compatible question.

When you see the `HiZ>` prompt), press `m` again:

```bash
HiZ> m

Mode selection
 1. HiZ
 2. 1-WIRE
 3. UART
 4. HDUART
 5. I2C
 6. SPI
 7. 2WIRE
 8. 3WIRE
 9. DIO
 10. LED
 11. INFRARED
 x. Exit
```
Choose `3` for `UART`.

Now you'll need to enter the correct connection settings for the Dragino.  For each step it'll give you a little hint of what to put.  Use the following as a guide:

```bash
 UART speed: 9600 baud
 Data bits: 8
 Parity: None
 Stop bits: 1
 Hardware flow control: None
 Signal inversion: Non-inverted (Standard)
```
When you finish and save, you'll end up with this:

```UART>```

Enter `W` to set up your power supply.  Enter `3.30` for volts, then just hit `enter` for maximum current.

It'll look like this:
```bash
UART> W
Power supply
Volts (0.80V-5.00V)
x to exit (3.30) > 3.30
Maximum current (0mA-500mA), <enter> for none
x to exit (none) >
3.30V requested, closest value: 3.30V
Current limit:Disabled

Power supply:Enabled
Vreg output: 3.3V, Vref/Vout pin: 3.3V, Current: 1.9mA
```

Finally, type in `bridge` to put it into bridge mode.  

Once you're in `bridge` mode you're flying blind; you won't be able to see what you type in, just the response.

### 3. Physical Connection from Bus Pirate to LDDS75

Whenever you connect a device over UART (which is what we're doing here), you'll need to make the following physical connnections:

- Ground to Ground.  Usually labled`GND`, and is usually a black wire.
- `TX` on device to `RX` on Bus Pirate, wire color on example below is yellow. 
- `RX` on device to `TX` on Bus Pirate, wire color on example below is orange.

Here's what it looks like.  

**LDDS75 Wiring - UART**

![LDDS75 Device wiring](/images/tutorial-basics/008-images/ldds75.png)

To get the layout, use the Dragino docs (which we'll talk about in a sec), for now, here's the relevant image:

![LDDS75 device layout](/images/tutorial-basics/008-images/ldds-dragino-layout.png)

While you're looking at the device, double check all the switches and the jumper are correctly set:

![LDDS75 Set Up](/images/tutorial-basics/008-images/ldds75-settings.png)

**Bus Pirate Wiring - UART**

![Bus Pirate wiring](/images/tutorial-basics/008-images/bus-pirate.png)

### 4. Talk to the Device
Ok, so we're `bridge` mode on the Bus Pirate.  Let's just make sure we have a good connection.  

Type in `AT+VER=?` and hit `Enter`.  You won't see anything when you type, but something like this should show up after you hit `Enter`.
```bash
v1.1.4 US915
```

If you want to poke the bear, now that you've confirmed you're talking to and hearing back what it says, hit the black reset button on the LDDS75(shown in the image above).

That should get you something like this:
```bash
Hardware version:LSN50 RS-485-UART-I2C V1.3
LDDS75 LoRaWAN Distance Sensor
Image Version: v1.1.4
LoRaWan Stack: DR-LWS-005
Frequency Band: US915
DevEui= B7 53 16 EP 32 53 20 G1

Please use AT+DEBUG to see debug info

JoinRequest NbTrials= 72

***** UpLinkCounter= 0 *****
TX on freq 903.300 MHz at DR 0
txDone
RX on freq 926.300 MHz at DR 10
rxTimeOut
RX on freq 923.300 MHz at DR 8
rxTimeOut

***** UpLinkCounter= 0 *****
TX on freq 905.100 MHz at DR 0
txDone
RX on freq 926.900 MHz at DR 10
rxDone
Rssi= -114
JOINED

Join Accept:
Rx1DrOffset:0
Rx2Datarate:8
ReceiveDelay1:1000 ms
ReceiveDelay2:2000 ms
distanceSum:3597

***** UpLinkCounter= 0 *****
TX on freq 904.900 MHz at DR 0
txDone
RX on freq 926.300 MHz at DR 10

Received: ADR Message

rxDone
Rssi= -55

***** UpLinkCounter= 1 *****
```

### 5. Configure Your Device

Each device has a set of commands to configure it.  In general, a query for: `AT commands, YOUR-DEVICE-MAKE-MODEL, documentation` on Google will get you started.

For this tutorial, since we're using the `Dragino LDDS75` we've got two sets of command docs.

We'll use the overarching Dragino Commands doc that lists all the "regular commands" for any Dragino device, and then another doc with the commands custom to the device.

In this case, their [general AT command documentation is here](https://wiki.dragino.com/xwiki/bin/view/Main/End%20Device%20AT%20Commands%20and%20Downlink%20Command/).

The [LDDS75 documentation is here](https://wiki.dragino.com/xwiki/bin/view/Main/User%20Manual%20for%20LoRaWAN%20End%20Nodes/LDDS75%20-%20LoRaWAN%20Distance%20Detection%20Sensor%20User%20Manual/#H3.A0ConfigureLDDS75viaATCommandorLoRaWANDownlink), and I've set the link to go right to the `Configure LDDS75 via AT Command or LoRaWAN Downlink` section.

You can go wild from here with commands.  The general pattern will be `AT+<command>=?` will be your "query" command, to figure out what the current setting is, and then `AT+<command>=<value>` will be how you set it.

For example:
```bash
AT+TDC=?
```

Will return how much time in milliseconds we have between transmit intervals (uplinks).

![Query the transmit interval](/images/tutorial-basics/008-images/example-command-transmit-interval.png)

43,200,000 milliseconds is equal to 12 hours.  Depending on what you want to do, that might work.  If, however, you want to do some testing, whether it's just to confirm connectivity or muck about with payloads or something else, you might want to drop down that interval to 1 minute (or 5, or whatever.)

So...
```bash
AT+TDC=43200000 sets a 12 hour interval
AT+TDC=60000 sets a 1 minute interval
```

If you use the `AT+TDC=60000` you'll start seeing data flow through the UART connection, like this:

```bash
***** UpLinkCounter= 0 *****
TX on freq 904.900 MHz at DR 0
txDone
RX on freq 926.300 MHz at DR 10

Received: ADR Message

rxDone
Rssi= -55
```

And that's it, you're off to the races with configuring a device.  If you want to get the configs for your device, try `AT+CFG`. 

From here, you can use those same documents I linked to above to figure out downlink commands to send over the air, and once your device is deployed in the field you can manage it with those.  

I would strongly suggest that before you deploy any device, you test it both on the bench and in the backyard. 

Enjoy the LoRaWAN journey!

### Credits

Enormous thanks to Travis Teague for all the assistance with this; he is and remains a world-class nerd and one of my fave IoT wizards.

--------------------------------------------------------------------------------

## 001 Lorawan Big Picture
Path: tutorial-basics/001-LoRaWAN-Big-Picture.md
Type: tutorial
Intent: Understand the fundamental concepts and workings of LoRaWAN networks.
Summary: This tutorial provides a foundational overview of LoRaWAN, focusing on the Helium Network. It explains how sensors collect data, transmit it to hotspots, and decode it via a LoRaWAN Network Server. Ideal for beginners and intermediate learners, this guide demystifies key terms and processes in IoT and LoRaWAN technology.
Difficulty: Beginner
Keywords: LoRaWAN, Helium Network, IoT sensors, Hotspot, LoRaWAN Network Server, data transmission, packet decoding, network overview
Technologies: Helium Network, LoRaWAN, Hotspot, LoRaWAN Network Server, MeteoScientific Console
Prerequisites: Basic understanding of IoT, Familiarity with wireless communication, Introductory knowledge of network protocols
Related Topics: LoRaWAN Basics, Setting Up a LoRaWAN Gateway, IoT Sensor Deployment, Data Visualization in IoT, Advanced LoRaWAN Applications

# LoRaWAN - The Big Picture

# Lesson Overview: Understanding How LoRaWAN Works

Let's start with a map of the territory. You're going to hear some terms for the first time. If you don't understand them at first, don't worry about it—we're just getting some reps in so that you have a chance to hear all these terms multiple times.

If you'd prefer a video walk through, go here:

<iframe width="560" height="315" src="https://www.youtube.com/embed/_VSy5-AQe7E?si=GjTkUVBOlMdWQbLZ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

## Introduction to the Network

Let's start at the very beginning. For this tutorial series, we are going to use what's called the **Helium Network**. The Helium Network is a global **LoRaWAN**, which stands for Long Range Wide Area Network. It's a wireless or radio network that anyone can use, without first asking permission or going through a giant setup process.

There are lots of LoRaWAN networks that you can use, both public and private.  Helium may not be the best fit for your use case, but it's an excellent way to get started easily

## How It Works

The way that the whole thing works is that there are sensors that you **deploy**, or put out in the wild.  Let's use the example of a soil moisture sensor. That sensor picks up data, like how moist the soil is. It then takes that data and puts it into what's called a packet. This packet is sent wirelessly over the radio waves to a local **Hotspot**. 

In the rest of the LoRaWAN world, **Hotspots** are called *Gateways**, but in Helium we call 'em hotspots.

There are hotspots all over the place; in fact, in the developed world, there's probably nowhere that is not covered by a hotspot as far as radio coverage.

The sensor sends the packet up to the hotspot. The hotspot receives the packet and sends it on to what's called an **LNS**, or a LoRaWAN Network Server. 

Once it gets to the LNS, that packet gets decoded. When it goes over the air, it's sent in really short form and might look like something random, such as `AAcyF0InPJw=`. Whatever it is, it needs to be decoded. It'll get decoded to something like "the soil moisture is 72%," "the temperature is 82 degrees," or "the relative humidity is XYZ."

Once that packet is decoded in the LNS via a **Console** (one of which is run by [MeteoScientific](https://console.meteoscientific.com/front/)) it is then sent to an **app**, where you or your customers get to see it. That will be a graph of the temperature over time, a graph of the soil moisture over time, or an indication of whether or not a rat is in a trap or a porta potty is full—however you're using sensors and devices in your business.

## Summary

And that's it—that's the 30,000-foot view of the network that we're going to be using, and that's all you need to start using it.

## Next Steps

The first two things I'd like you to do from here are:

1. Open up a [Console Account with MeteoScientific](https://console.meteoscientific.com/front/login).  It's free to open and poke around, and if you want to test out some sensors $10 will go a long way, but more on that later.  

2. Rock and roll!

--------------------------------------------------------------------------------

## 002 Intro To Console
Path: tutorial-basics/002-intro-to-console.md
Type: tutorial
Intent: Learn how to navigate and utilize the MeteoScientific Console for LoRaWAN data management.
Summary: This tutorial introduces beginners to the MeteoScientific Console, guiding users through the process of signing up, understanding data flow in a LoRaWAN network, and navigating the dashboard. Key concepts include sensor data transmission, hotspot functionality, and data credit management, making it essential for anyone looking to leverage IoT technology effectively.
Difficulty: Beginner
Keywords: MeteoScientific Console, LoRaWAN, IoT data flow, data credits, sensor data, hotspot, LoRaWAN Network Server, application integration
Technologies: MeteoScientific Console, LoRaWAN Network Server, Helium Explorer, data credits, sensors
Prerequisites: Understanding of IoT basics, Familiarity with LoRaWAN technology, Knowledge of data transmission concepts
Related Topics: Getting Started with LoRaWAN, Understanding LoRaWAN Data Rates, Configuring IoT Sensors, Using Helium Network for IoT, Data Management in IoT

# How to Use the Helium Console

This lesson will walk you through the process of using the **MeteoScientific (MetSci) Console**. You can follow along by visiting [console.meteoscientific.com](https://console.meteoscientific.com) and signing up for an account; you'll get 400 free data credits to start. This guide will give you an overview of the console and how data flows within the LoRaWAN network.

## Want to Watch?

If you'd rather do this via video, check that out here:
<iframe width="560" height="315" src="https://www.youtube.com/embed/pLJh061R_9w?si=-VJDDDX79X5D2Xfk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

## Understanding Data Flow

Before diving into the console, let's break down the flow of data in the system:

1. **Sensors**: It all starts with a sensor. For example, a sensor detects a leaky pipe and sends a coded packet through the airwaves.
2. **Hotspots**: The packet is received by a hotspot, which then forwards it to the MetSci console through the Internet.
3. **LoRaWAN Network Server**: The packet passes through a LoRaWAN Network Server (LNS), which decodes the data.
4. **Console Decoding**: The MetSci console interprets the decoded data, determining if a pipe is leaking, the current temperature, wind speed, etc.
5. **Applications**: Finally, the decoded data is sent to an application or it can be integrated with other systems to trigger an action; say, if a door is opened a light gets turned on.

Today, we'll be focusing on the **MetSci Console**. 

## Getting Started with the MetSci Console

1. **Sign In**: Head over to [console.meteoscientific.com](https://console.meteoscientific.com) and sign up for an account. 
2. **Dashboard Overview**: After signing in, you'll land on the dashboard, where you'll see four cards: 

![MetSci Console Dashboard](/images/tutorial-basics/002-images/metsci-demo-console-dashboard.png)
   - **Active Devices**: This is the most important card. Here, you can view devices you've set up.
   - **Active Gateways**: You can safely ignore this for now; all Helium's gateways are your active gateways.
   - **Device Data Rate Usage**: This is more technical, and we'll cover it in a separate video.
   - **Gateway Map**: This doesn't show in Console.  You'll need to use the [Helium Explorer](https://explorer.helium.com) to view all gateways.

## Tenant Details

Every console account starts with **400 free data credits**. Here are a few things to know about data credits:
- **Cost of Data Credits**: Each data credit (DC) costs $0.0001. The minimum purchase amount is **50,000 DC**, which costs $5.
- **Usage**: For a minimal sensor, you could run a device sending 1 DC every hour for a year using just under 9,000 DC.
- **Managing Duplicates**: If you want redunancy, you can get duplicate packets from multiple hotspots. For now, iff you see a setting called **Current Value**, set it to 1 to avoid unnecessary duplicates.

## Adding Users and API Keys

The console allows you to add Users, such as a business partner or admin, by navigating to **Users** and entering their email information.

Additionally, you can generate **API Keys** to connect your console to other software systems.  We'll cover that more in depth later. 

## Device Profiles and Applications

One key area where new users get tripped up is understanding **Device Profiles** and **Applications**. 

Here's a quick breakdown:
- **Device Profiles**: Think of this as an application template. It holds settings that apply to a group of devices.
- **Applications**: An application is a collection of devices, such as parking sensors or trash can level sensors.
- **Tags**: You can use tags to organize devices, such as grouping parking sensors by levels in a parking structure.

## Additional Features

- **Purchase Data Credits**: You can purchase additional data credits directly through the console.
- **Service Requests**: If you encounter any issues, you can submit a service request here, although it's far more helpful to the public if you submit over on the [Github Issues](https://github.com/gristlekinginc/metsci-site-v2/issues) page.
- **Migrating from Legacy**: If you're transitioning from the original Helium Console (almost no one is as of January 2025), there's an option to migrate your data.
- **User Profile**: You can update your profile details at any time, including your name, address, and company info.

## Conclusion

That wraps up this overview of the MetSci Console! We'll dive deeper into specific features in the following lessons. If you haven't signed up for a console account yet, head over to [console.meteoscientific.com](https://console.meteoscientific.com), sign up, and poke around.

--------------------------------------------------------------------------------

## Metrics & Decoders
Path: tutorial-basics/007-metrics-on-chirpstack.md
Type: tutorial
Intent: Learn how to configure metrics and decoders for LoRaWAN devices in ChirpStack.
Summary: This tutorial guides beginners to intermediate learners through the setup of metrics and decoders in ChirpStack, focusing on effective data structure planning and implementation. Key steps include configuring device profiles and measurements, using a MileSight AM319 as an example. Ideal for those looking to enhance their IoT sensor data management skills in a LoRaWAN environment.
Difficulty: Intermediate
Keywords: LoRaWAN, ChirpStack, IoT metrics, data decoders, MileSight AM319, sensor data management, device profiles, measurements configuration
Technologies: ChirpStack, MileSight AM319, LoRaWAN, IoT, JavaScript
Prerequisites: Basic understanding of ChirpStack, Familiarity with IoT concepts, Knowledge of data structure planning
Related Topics: Data Structure Planning Guide, Configuring LoRaWAN Devices, IoT Sensor Management, ChirpStack Device Profiles, Advanced LoRaWAN Metrics

# Setting Up Metrics & Decoders

This guide walks you through the practical steps of configuring decoders and measurements in ChirpStack. Before diving in, we recommend reading our [Data Structure Planning Guide](/docs/tutorial-basics/good-housekeeping-for-LoRaWAN-sensor-fleets) to understand how to organize your data effectively.

## Prerequisites

Before starting, ensure you have:
- A MileSight AM319 device added to your ChirpStack.
- Basic understanding of ChirpStack console navigation.
> Note: You can use any device you'd like, the AM319 is just the demo I have handy for this.

## Step 1: Planning Your Data Structure
1. Review the [Data Structure Planning Guide](/docs/tutorial-basics/good-housekeeping-for-LoRaWAN-sensor-fleets)
2. Identify which measurements you need
3. Decide on your tag structure
4. Plan your field names and types

## Step 2: Implementing in ChirpStack

### Configuring Device Profiles
1. Navigate to Device Profiles
2. Add or modify codec based on your planned structure
3. Configure measurements to match your data plan

### Setting Up Measurements
1. Define measurements using consistent naming from your plan
2. Configure correct measurement types:
   - Use `gauge` for continuous values (temperature, humidity)
   - Use `string` for status values (occupancy)
   - Use `counter` for cumulative values

### Example Implementation
Here's a real-world example using the AM319 indoor air quality sensor:

```javascript
// Codec by MeteoScientific
// Feel free to share and modify as needed
// https://www.meteoscientific.com

function decodeUplink(input) {
    const bytes = input.bytes;
    let decoded = {};
    let i = 0;

    while (i < bytes.length) {
        const channel = bytes[i++];
        const type = bytes[i++];

        try {
            switch (channel) {
                case 0x03: // Air Temperature
                    if (type !== 0x67) throw "Unexpected type for Temperature";
                    decoded.air_temperature = parseFloat(((bytes[i] | (bytes[i + 1] << 8)) / 10.0).toFixed(1));  // in °C
                    i += 2;
                    break;

                case 0x04: // Air Humidity
                    if (type !== 0x68) throw "Unexpected type for Humidity";
                    decoded.air_humidity = parseFloat((bytes[i++] / 2.0).toFixed(1));  // in %
                    break;

                case 0x05: // PIR status (Occupied / Vacant)
                    if (type !== 0x00) throw "Unexpected type for PIR Status";
                    decoded.occupancy_status = (bytes[i++] === 1) ? "Occupied" : "Vacant";
                    break;

                case 0x06: // Light level
                    if (type !== 0xCB) throw "Unexpected type for Light Level";
                    const llIndex = bytes[i++];
                    const luxRanges = [
                        [0, 5],
                        [6, 50],
                        [51, 100],
                        [101, 500],
                        [501, 2000],
                        [2001, 99999],
                    ];
                    if (llIndex < luxRanges.length) {
                        const [lower, upper] = luxRanges[llIndex];
                        const avgValue = (lower + upper) / 2;
                        decoded.light_level = parseFloat(avgValue.toFixed(1));  // in lux
                    } else {
                        decoded.light_level = 0.0;  // Explicit float
                    }
                    break;

                case 0x07: // CO2
                    if (type !== 0x7D) throw "Unexpected type for CO2";
                    decoded.co2 = parseFloat(((bytes[i] | (bytes[i + 1] << 8)) / 100.0).toFixed(2));  // in ppm
                    i += 2;
                    break;

                case 0x08: // TVOC
                    if (type !== 0x7D) throw "Unexpected type for TVOC";
                    decoded.tvoc = parseFloat(((bytes[i] | (bytes[i + 1] << 8)) / 100.0).toFixed(2));  // in ppm
                    i += 2;
                    break;

                case 0x09: // Pressure
                    if (type !== 0x73) throw "Unexpected type for Pressure";
                    decoded.barometric_pressure = parseFloat(((bytes[i] | (bytes[i + 1] << 8)) / 10.0).toFixed(1));  // in hPa
                    i += 2;
                    break;

                case 0x0B: // PM2.5
                    if (type !== 0x7D) throw "Unexpected type for PM2.5";
                    decoded.pm2_5 = parseFloat(((bytes[i] | (bytes[i + 1] << 8)) / 100.0).toFixed(2));  // in µg/m³
                    i += 2;
                    break;

                case 0x0C: // PM10
                    if (type !== 0x7D) throw "Unexpected type for PM10";
                    decoded.pm10 = parseFloat(((bytes[i] | (bytes[i + 1] << 8)) / 100.0).toFixed(2));  // in µg/m³
                    i += 2;
                    break;

                case 0x0D: // O3
                    if (type !== 0x7D) throw "Unexpected type for O3";
                    decoded.o3 = parseFloat(((bytes[i] | (bytes[i + 1] << 8)) / 100.0).toFixed(2));  // in ppm
                    i += 2;
                    break;

                default:
                    console.warn("Ignoring unknown channel: " + channel);
                    break;
            }
        } catch (err) {
            console.warn("Error decoding channel " + channel + ": " + err);
        }
    }

    return { data: decoded };
}
```

Example output from a real device:
```json
{
    "data": {
        "air_temperature": 19.1,
        "air_humidity": 59.5,
        "occupancy_status": "Vacant",
        "light_level": 2.5,
        "co2": 5.04,
        "tvoc": 1.00,
        "barometric_pressure": 1005.6,
        "pm2_5": 0.43,
        "pm10": 0.72,
        "o3": 0.07
    }
}
```

This example demonstrates:
- Domain-specific field naming (`air_temperature`, `air_humidity` for air quality sensors)
- Consistent unit handling (°C, %, ppm, µg/m³, hPa)
- Error handling for malformed payloads
- InfluxDB-compatible data types:
  - All numerical values as explicit floats with appropriate decimal places
  - String values for status fields
- Type validation for each channel

## Step 3: Testing and Verification

To expedite testing, you may want to adjust the uplink interval on your device so that it sends data more frequently. This allows for quicker debugging and verification of your setup.

## Configured, Congrats!

Following these steps, you should now have your MileSight AM319 device correctly configured within ChirpStack, with device metrics and measurements properly displayed. This guide also provides a basic workflow for troubleshooting and modifying device codecs using tools like ChatGPT.

For any questions or further assistance, feel free to reach out or consult the relevant documentation.

--------------------------------------------------------------------------------

## 003 Google_Sheets
Path: tutorial-extras/003-Google_Sheets.md
Type: tutorial
Intent: Learn how to integrate Google Sheets with LoRaWAN devices to capture and analyze data.
Summary: This tutorial guides beginners and intermediate users through the process of setting up a Google Sheet to receive data from a LoRaWAN device using Google Apps Script. By following the steps, users can effectively log weather data from devices like the SeeedStudio S2120, enhancing their understanding of IoT data management and analysis.
Difficulty: Intermediate
Keywords: LoRaWAN, Google Sheets, IoT data logging, Google Apps Script, weather station, data integration, MeteoScientific
Technologies: Google Sheets, Google Apps Script, LoRaWAN, SeeedStudio S2120, MeteoScientific Console
Prerequisites: Basic understanding of LoRaWAN, Familiarity with Google Sheets, Access to MeteoScientific Console
Related Topics: LoRaWAN Data Visualization, Setting Up IoT Devices, Using Google Apps Script with IoT, MeteoScientific Console Overview

# Integrating Google Sheets

This guide walks through the steps to set up a Google Sheet to capture data from a device on the Meteoscientific Console using a Google Apps Script. 

Conceptually what we'll do is send the data from the device to a Google script, which will then fill in a Google sheet.

I'll be using a weather station, the [SeeedStudio S2120 8-in-1 LoRaWAN version.](https://metsci.ai/s2120-gsheet), but you can use any device you'd like.

## Prerequisites

- A device already set up on the [MetSci console](https://console.meteoscientific.com/front/).
- A Google account 

## Step 1: Create a Google Sheet

1. Open [Google Sheets](https://sheets.google.com/) and create a new spreadsheet.
2. Name your spreadsheet something relevant, like "S2120 Weather Station"
3. For our weather station, I'll add the following column headers in the first row (starting at A1):

> timestamp, devAddr, air_temperature, wind_speed, air_humidity, wind_direction_sensor, uv_index, barometric_pressure, rain_gauge, light_intensity, deduplicationId


4. Your sheet should now look something like this:

![Google Sheet Columns](/images/tutorial-extras/003-images/columns_g_sheet.png)


## Step 2: Create a Google Apps Script

1. In your Google Sheet, go to `Extensions > Apps Script`. This opens the Google Apps Script editor.
2. Replace the default code with the following script:

```javascript
function doPost(e) {
  try {
    // Parse the incoming JSON data
    var payload = JSON.parse(e.postData.contents);

    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sheet1');
    
    // Extract relevant data from the root of the payload
    var deduplicationId = payload.deduplicationId || '';
    var timestamp = payload.time || new Date();
    var devAddr = payload.devAddr || '';
    
    // Initialize variables for weather data with default values
    var air_temperature = 0;
    var wind_speed = 0;
    var air_humidity = 0;
    var wind_direction_sensor = 0;
    var uv_index = 0;
    var barometric_pressure = 0;
    var rain_gauge = 0;
    var light_intensity = 0;

    // Check if the "object" field exists and is an object
    if (payload.hasOwnProperty('object') && typeof payload.object === 'object') {
      var data = payload.object;
      air_temperature = data.hasOwnProperty('air_temperature') ? data.air_temperature : 0;
      wind_speed = data.hasOwnProperty('wind_speed') ? data.wind_speed : 0;
      air_humidity = data.hasOwnProperty('air_humidity') ? data.air_humidity : 0;
      wind_direction_sensor = data.hasOwnProperty('wind_direction_sensor') ? data.wind_direction_sensor : 0;
      uv_index = data.hasOwnProperty('uv_index') ? data.uv_index : 0;
      barometric_pressure = data.hasOwnProperty('barometric_pressure') ? data.barometric_pressure : 0;
      rain_gauge = data.hasOwnProperty('rain_gauge') ? data.rain_gauge : 0;
      light_intensity = data.hasOwnProperty('light_intensity') ? data.light_intensity : 0;
    }
    
    // Append the data to the next available row in the sheet
    sheet.appendRow([
      timestamp,
      devAddr,
      air_temperature,
      wind_speed,
      air_humidity,
      wind_direction_sensor,
      uv_index,
      barometric_pressure,
      rain_gauge,
      light_intensity,
      deduplicationId
    ]);
    
    // Return a success response
    return ContentService.createTextOutput(JSON.stringify({status: 'success'}))
                         .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    // Return error response
    return ContentService.createTextOutput(JSON.stringify({status: 'error', message: error.message}))
                         .setMimeType(ContentService.MimeType.JSON);
  }
}
```
Save the script by clicking the disk icon or pressing Ctrl + S (Windows) or Cmd + S (Mac).

# Step 3: Deploy the Script as a Web App
After saving the script, click on the Deploy button in the top-right corner of the editor.

![Save and Deploy](/images/tutorial-extras/003-images/save_deploy_g_script.png)

Select **Manage Deployments**.

Click on **New Deployment**.

Under Select Type, choose **Web App**.

You can give your deployment a description like WxStation_v1, but it's optional.

Set the access level to **Anyone**, even anonymous (this is necessary for ChirpStack to be able to send data to the script).

Click **Deploy**.

Now you'll see a few things.  Copy the Web App URL that is generated. This is the endpoint (the link you'll past into the http integration) you'll use in ChirpStack.

# Step 4: Configure the HTTP Integration in MeteoScientific
Log in to your MeteoScientific Console account.

Go to the **Applications** section and select your application.

Navigate to the **Integrations** tab.

Under HTTP Integration, click Add.

In the Event Endpoint URL(s) field, paste the Web App URL you copied from Google Apps Script.

![App Integration](/images/tutorial-extras/003-images/met_sci_integration.png)

Make sure the payload encoding is set to JSON.

**Optional** I've heard that adding a header with `Content-Type` and then `application/json` will make it work.  Only try that if you need to.  It would look like this:

![Optional additional header](/images/tutorial-extras/003-images/header_content_type_application_json.png)

Click Submit to save the integration.

# Step 5: Test the Integration
If you can trigger the device (I couldn't on the weather station since it was deployed), fire off an uplink.  If you can't trigger it, just...wait for your device to send an uplink.

Check your Google Sheet to see if the data has been appended to the next available row.  It should look like this:

![Sheet correctly filling with data](/images/tutorial-extras/003-images/sheet_looks_like_this.png)

If the data appears correctly, your integration is successfully set up!

# Troubleshooting
The devil will be in the details here, and it may take you a few tries of "Deploying" the script to get it to work. 

No Data in Google Sheet: Ensure that your script is correctly deployed. Double-check that the Web App URL is correctly configured in the MetSci Console.

Missing Fields: Make sure that your script is handling all possible fields from the payload, and that the default values are correctly set when data is missing.

--------------------------------------------------------------------------------

## Class C via API
Path: tutorial-extras/002-class_C_kuando_busylight.md
Type: tutorial
Intent: Learn how to control a Kuando Busylight using the Meteoscientific API.
Summary: This tutorial guides beginners to intermediate learners in using the Meteoscientific REST API to control a Kuando Busylight. It covers prerequisites like API access and using Curl, and explains how to send commands to Class C devices, which are always listening for instructions. Enhance your IoT skills with practical API application in LoRaWAN.
Difficulty: Intermediate
Keywords: LoRaWAN, API, Kuando Busylight, IoT, REST API, Class C devices, command queue, Meteoscientific
Technologies: Meteoscientific API, Kuando Busylight, LoRaWAN, Curl, REST
Prerequisites: Basic understanding of APIs, Familiarity with Curl, Access to Meteoscientific Console
Related Topics: Introduction to LoRaWAN, Using REST APIs in IoT, Class A vs Class C devices, Setting up IoT devices with Meteoscientific

# Class C via API

This guide walks you through using Meteoscientific's API to control a Kuando Busylight via a script. The guide assumes you can follow directions and copy/paste. We will demonstrate how to enqueue a command using the Meteoscientific REST API to control the light.

## Prerequisites

1. **API Access:** You need access to Meteoscientific's REST API. Sign up and generate your authorization token via the [Meteoscientific Console](https://console.meteoscientific.com/front/login).  If you don't know how to generate your authorization token, relax, I'll walk you through it a little later on.
2. **Bash Shell:** Ensure you have a Bash shell available on your system.  You probably do.  If not, get Google or ChatGPT to help you add it.
3. **Curl:** This command-line tool is used to make HTTP requests. If you don’t have it installed, you can install it with your package manager (e.g., `sudo apt install curl`).

---

## Overview

Unlike the many Class A devices most of us are used to in Helium (trackers, temp checkers, soil moisture, etc) where they listen and only occasionally chirpm, Class C devices are ones that are always "listening" for commands.  That means they're usually plugged into the wall (or "into mains" if you want to sound hip) because they need more more power in order to constantly listen. 

The upside is you can make 'em dance when you want to, instead of (as with Class A) waiting for them to pop up and transmit, then listen very briefly after the transmit window.

You can trigger those "Dance NOW!" commands directly in the MetSci Console to test, but if you want to use a class C device without logging into Console, try using an API (Application Programming Interface).  Now you're getting fancy!

Relax, we'll walk you through it.  

For this tutorial, we'll use a Kuando Busylight, which is a little light that'll light up with any color (even flashing ones!) you want when you tell it to via the Helium LoRaWAN.

As it says in the prerequisites, you'll need to be logged into your Console account (and already have your Busylight set up in there).

## Step 1: Understand the API Call

**For the nerds:**  We will use the following endpoint to send the command to the Busylight:

```
POST /api/devices/{queueItem.devEui}/queue
```

This endpoint enqueues a message in the downlink queue for a specific device identified by its `devEui`. 

- **Headers:**
  - `Authorization: Bearer <YOUR_TOKEN>`: The token you obtained from the Meteoscientific console.
  - `Accept: application/json`: The API expects and returns JSON.
  - `Content-Type: application/json`: The payload must be sent as JSON.

- **Payload Structure:**
  - `queueItem.data`: Base64-encoded command data. In this case, it represents the command to set the Busylight to solid red.
  - `fPort`: The port the data will be sent through.
  - `confirmed`: Indicates whether the message requires acknowledgment.
  - `flushQueue`: If true, flushes the queue before enqueuing the new message.

### For my non-nerds:  Let's do it step by step:

Start by generating an API key in your [Chirpstack Console](https://console.meteoscientific.com/front/login).  

![Get an API Key from Chirpstack](/images/tutorial-extras/002-images/get_API_key_from_Chirpstack.png)

**Save that somewhere secure**, you'll need it later!

Now, head over to the [SwaggerUI API page](https://console.meteoscientific.com/rest-api/) and let's test this sucker.  First, for the "Authorize" button, up at the top right.

![Image description](/images/tutorial-extras/002-images/top_of_REST_API_look_for_authorize_button.png)

Paste in "Bearer" then your API key and hit "Close".

![Image description](/images/tutorial-extras/002-images/entering_API_key_in_Chirpstack_Rest_API_to_test_using_Bearer.png)

Now scroll down to [just above Gateway Service](https://console.meteoscientific.com/rest-api/#/DeviceService/DeviceService_Enqueue) and expand the **POST** with **queue** in it, like this:

![Image description](/images/tutorial-extras/002-images/scroll_down_to_POST_queue_just_above_GatewayService.png)

Expand that **POST** and then hit **Try it out**.

![Image description](/images/tutorial-extras/002-images/expand_POST_and_try_it_out.png)

Fill in your **DevEUI** and the body:
```{
  "queueItem": {
    "data": "mQAA/wA=",
    "fPort": 15,
    "confirmed": true,
    "flushQueue": true
  }
}
```

Like this, then hit **Execute**.

![Image description](/images/tutorial-extras/002-images/fill_in_deveui_and_body_then_execute.png)

You should see the **response curl** and your light should change color to red (`mQAA/wA=`)

![Image description](/images/tutorial-extras/002-images/response_curl_and_light_turns_red.png)

Great, now you've got your curl script and the light works, woohoo!
![Image description](/images/tutorial-extras/002-images/red_kuando_busylight.JPG)

---

## Step 2: Sample Bash Script to Control the Light

Now you can use a Bash script to send a command to the Busylight using the Meteoscientific API:

```bash
#!/bin/bash

# API endpoint
URL="https://console.meteoscientific.com/api/devices/[YOUR_DEV_EUI_HERE]/queue"

# Authorization token (replace this with your actual token)
AUTH_TOKEN="[Your MetSci API key here, without Bearer in front]"

# Payload data (base64-encoded)
DATA="mQAA/wA="  # This is the base64-encoded payload for solid red

# Making the API request with curl
curl -X POST "$URL" \
  -H "Accept: application/json" \
  -H "Authorization: Bearer $AUTH_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
        "queueItem": {
          "data": "'"$DATA"'",
          "fPort": 15,
          "confirmed": true,
          "flushQueue": true
        }
      }'

```

This script does the following:

1. **API Endpoint:** The script points to the device's queue endpoint.
2. **Authorization Token:** A JWT token is used for authentication. Replace the placeholder with your actual token.
3. **Payload Data:** The `DATA` variable contains a base64-encoded string, which represents the command to set the light to solid red. You can modify this data for other colors or actions.
4. **Curl Command:** The script uses `curl` to make an HTTP POST request to the API endpoint, passing the necessary headers and payload.

---

## Step 3: Explanation of the Payload

- **`data`:** The base64-encoded payload represents the command for the Kuando Busylight. In this example, the value `mQAA/wA=` sets the light to solid red. 
  - You can generate different base64 commands depending on the color or pattern you want the Busylight to display.
- **`fPort`:** This indicates the port number. For the Busylight, port `15` is typically used.
- **`confirmed`:** Setting this to `true` means the message requires confirmation from the device.
- **`flushQueue`:** This option ensures that the device queue is cleared before adding this new command, ensuring immediate execution.

---

## Step 4: Running the Script

1. Save the script to a file, e.g., `control_busylight.sh`.
2. Make the script executable:

   ```bash
   chmod +x control_busylight.sh
   ```

3. In Terminal, run the script:

   ```bash
   ./control_busylight.sh
   ```

If everything is set up correctly, the Kuando Busylight should change to the color or pattern specified by the base64 payload.

Now you've got a script that uses the API to make your Busylight turn colors (or off).  Congrats!

---

## Streamdeck & Keyboard Maestro Integration

I got a little fancy and set up a script to turn the light red, green, purple, flashing blue, and off using my Streamdeck.  Use the script above as a template, modifying the actual command each time, then save each of those as a separate script, and trigger them with buttons on your Streamdeck.  Easy day.  Here are the colors I used plus a Yellow in case ya need it:

```
1. Solid Red:
Hex: 990000FF00
Base64: mQAA/wA=

2. Solid Green: 
Hex: 000099FF00
Base64: AABZ/wA=

3. Solid Yellow: 
Hex: FF00FF6400
Base64: /wD/ZAA=

4. Solid Purple:
Hex: FFFF006400
Base64: //9AZAA=

5. Blue Flashing (1 sec on/off):
Hex: 00FF000A0A
Base64: AP8ACgo=

6. Off:
Hex: 00000000FF
Base64: AAAAAP8=
```

## Troubleshooting

Unnecessary.  I don't see how anything could possibly go wrong.  

---

By following this guide, you can control your Kuando Busylight via the Meteoscientific API. This is useful for creating automation scripts or integrating the light with other tools.

For further reference, consult the [Meteoscientific API documentation](https://console.meteoscientific.com/rest-api/) to explore more API capabilities.

--------------------------------------------------------------------------------

## Finding Docs
Path: tutorial-extras/001-documentation.md
Type: tutorial
Intent: Learn how to access and utilize documentation for MeteoScientific and Chirpstack integrations.
Summary: This tutorial guides beginners and intermediate learners on how to find and use documentation for MeteoScientific and Chirpstack. It covers accessing custom integrations, including HTTP and MQTT, and provides links to relevant resources. Users are encouraged to seek help from the community if needed, enhancing their understanding of LoRaWAN and IoT applications.
Difficulty: Beginner
Keywords: LoRaWAN, Chirpstack, MeteoScientific, HTTP integration, MQTT integration, API documentation, IoT applications, community support
Technologies: Chirpstack, MeteoScientific Console, HTTP, MQTT, API
Prerequisites: Basic understanding of LoRaWAN, Familiarity with IoT concepts, Knowledge of MQTT protocol
Related Topics: Integrating IoT devices, Using the MeteoScientific Console, Advanced Chirpstack configurations

# Documentation

As you progress further into your MeteoScientific & Chirpstack journey, you'll want to start integrating outside apps so you can actually use your data.

The MeteoScientific Console uses a custom implemented version of **Chirpstack** maintained by Paul Pinault at Disk91.  

For many Chirpstack aspects of the MetSci LNS, you can find [relevant vanilla Chirpstack docs here.](https://www.chirpstack.io/docs/) 

There are, however, more custom aspects, like how to do an HTTP integration, or manage an MQTT integration, or questions about the API.  You can find answers to all of those [here](https://github.com/disk91/helium-chirpstack-community/wiki).

You can always find the docs from your MetSci Console account when logged by going to the top right profile pic and looking in the dropdown menu, like this:


![MeteoScientific Documentation](/images/tutorial-extras/001-images/metsci_api_menu_find.png)

Finally, if you're get totally stuck after banging your head against the docs, swing on by the Gristle King Discord server and ask for help in the `#meteoscientific` channel.  Most of us don't bite and we generally are interested in helping people solve problems.

--------------------------------------------------------------------------------

## MetSci Demo Dashboard
Path: tutorial-extras/004-metsci-demo-dash.md
Type: tutorial
Intent: Learn how to build a custom IoT dashboard using LoRaWAN technology.
Summary: This tutorial guides beginners to intermediate learners in creating a custom dashboard for a sensor using Helium and Raspberry Pi. It covers essential hardware components, installation steps, and aims to empower users to build their own no-subscription dashboards for IoT projects, emphasizing the fun and accessibility of IoT exploration.
Difficulty: Beginner
Keywords: LoRaWAN, IoT dashboard, Raspberry Pi, Helium Network, Dragino sensor, DIY IoT, public dashboard, sensor data, no-subscription
Technologies: Helium, Raspberry Pi, Dragino LDDS 75, BusPirate, SD Card
Prerequisites: Basic understanding of IoT concepts, Familiarity with Raspberry Pi, Knowledge of LoRaWAN technology
Related Topics: Getting Started with LoRaWAN, Building IoT Projects with Raspberry Pi, Understanding IoT Sensors, Data Visualization in IoT, Exploring the Helium Network

# Build a Custom Dashboard

Ok nerds, let's do something rad with [Helium](https://www.helium.com/) and build a dashboard for a sensor.

**You don't actually have to be a nerd to do this.** As long as you can get the hardware listed below, follow directions, and copy/paste, you're going to end up with a working dashboard.

When you're done, this'll be something you can share with your friends to let them know when the rain barrel is full (or if you're Joey's friends, when the sauna is hot)!  

I know, I know, you could use a ready-made service like [Datacake](https://datacake.de) for public dashbaords, but...we're nerds, and wherever possible we build our own things.

Relax, it won't be super hard.  We'll use a few scripts to make installing things secure and easy, so they just "work".  

My goal here is to enable a non-technical person to build your own "no-subscription" public or private dashboards for about $200, most of which you'll spend on equipment you'll use in every other IoT project you do.  

IoT stuff has been super fun for me to explore, and I'm pumped to share it with you.  This is pretty much a love letter to you from me about IoT.  

Enjoy!

### Get After It

Make sure you have the following on hand:

### A. Hardware

#### 1. Core Development Hardware, ~$150 (use this for your next 50 projects)
 - [Rasbperry Pi 4 with 4 or 8 GB RAM](https://amzn.to/3DAVCnO), about $60. 
 - [SD Card for Pi](https://amzn.to/40ha8K5), about $10 
 - External SSD for the Pi, about $30.  IoT data sets can get pretty big and you'll want plenty of space beyond the SD card on the Pi.  SD cards can also wear out if you write to 'em a bunch. Something like [this](https://amzn.to/3PbhbNY) is fine.
 - USB-TTL adapter (the thing that allows you to communicate directly over-the-wire with the sensor)
    - [BusPirate](https://buspirate.com/)  This is what the mighty Teague uses, and I recommend it. I used the v5 for this, but the v6 is already out!  $40-80
    - Cheapie [Amazon Kit](https://www.amazon.com/dp/B07VNVVXW6?ref=ppx_pop_mob_ap_share) (thanks to GreyHat for the rec) $14
    - [Segger J-Link EDU Mini](https://www.sparkfun.com/products/24078) - $60 on Sparkfun
 - 2 x [USB A to USB C cables](https://amzn.to/4aoqS5N) (connecting the Pi to the SD card and the Bus Pirate to your computer)
 - [Dupont wires](https://amzn.to/4h0Jn2w) for connecting the Bus Pirate to the sensor - $7

:::tip
If you want a fancy case for your Pi (NOT needed), this is what I use: [FLIRC case](https://amzn.to/3E9OEpM) for Raspberry Pi 4B, about $16
::: 

#### 2. Sensor, $60-80
- Dragino LDDS 75 sensor.  You can buy one at [RobotShop](https://www.robotshop.com/products/dragino-ldds75-lorawan-distance-detection-sensor-915-mhz) for $60-80.

:::note
1. The Pi, SD, SSD, and USB cables are Amazon affiliate links.  If 300 of you use those I'll probably be able to pay half my annual $12 domain name bill with the commissions.
2. I'm doing this whole thing on a Mac.  If you're on Windows, there'll be a couple commands that are slightly different, usually stuff like using `CMD` instead of `CTRL`.  I'll try to call them out as we go.
:::

### B. Not-Hardware
    - Custom domain.  For this tutorial I'll be using mine, `gristleking.dev`.  If you don't already have a domain, I'd **strongly** recommend buying one at [Cloudflare](https://cloudflare.com).  They're about $12/year and buying it there makes everything else a little bit easier.
    - If you have a domain already, you'll need to set up your domain's name servers to point to Cloudflare.

### C. Notes on what you "Need"
You don't actually NEED a USB-TTL adapter, but it's generally good practice to have one hanging around the work bench if you're any kind of aspiring nerd.  You could use downlinks instead of the adapter to make changes to your sensor, but in practice I've found that to add both complication and time (especially if you have to wait for the next uplink & you get your downlink command wrong...ask me how I know)

You *could* do this without a custom domain by hosting in the cloud and managing tunnels with Cloudflare, but then you're on the hook for cloud hosting, which is probably $6/month at the cheapest.  A domain is something like $70/year for an expensive `.ai` one and $12/year for a cheap one. Trust me, just buy a domain. 

Having your own domain makes part of this workflow way simpler, plus it's just cool to have your own domain.  Ask Larry at Google or Steve at Apple.  Having a custom domain is cool. 

## 1. Set Up Overview

1. **Set Up Your Rasbperry Pi:** Basic setup and security

2. **Install Services:** Node-RED, InfluxDB, Grafana, integrate external SSD.

3. **Cloudflare:** Set up tunnels, tokens, applications, and policies.

4. **Sensor:** Get the sensor sending data through MetSci

5. **Local Integration Testing:** Node-RED flows, integrate InfluxDB, create Grafana dashboards.

6. **System Maintenance & Troubleshooting:** Keep it rolling smooth, yo.

---
## 2. **Setting Up Your Rasbperry Pi**
### A. Basic Setup
Rather than re-writing (and constantly updating) this part, I'm going to suggest you [follow the official docs](https://www.raspberrypi.com/software/) for the first part of this and load **Raspberry Pi OS Lite (64-bit)**.  If you've never done it before, that's ok. 

The basic flow is to write (or "flash") the OS onto an SD card using your computer, then plug the SD card into your Pi.  After that you'll find the Pi on your local network and you can SSH in.  All of those things have lots of tutorials on the internet already.  

:::tip
Starting with a fresh OS install is recommended to avoid conflicts with existing packages.
:::

Once you've set up your Pi, connect it to your local network (Ethernet/LAN cable strongly preferred over WiFi).  SSH in using Terminal, then update/upgrade with:

```bash
sudo apt update && sudo apt dist-upgrade -y && sudo apt autoremove -y
```

### B. Securing Your Pi

Your Pi can be made a bit more secure with a few commands.  We're going to wrap them all up into one.  This is going to get the latest security patches, make sure everything is up to date, then set some basic firewall rules. 

There's nothing ultra fancy in here, just generally good Pi housekeeping.

```bash 
curl -sSL meteoscientific.com/scripts/secure-pi.sh -o secure.sh && chmod +x secure.sh && sudo ./secure.sh
```

Once you've run it to the end, it'll ask you if you want to reboot.  Just type in `y` and hit `Enter`.

If you want to make your Pi significantly more protected, set up keys instead of passwords.  Doing that is beyond the scope of this tutorial and is well covered on the interwebz in general.  I'd [start here](https://pimylifeup.com/raspberry-pi-ssh-keys/) if you need help (or have ChatGPT walk you through it).

Let's move on to installing the services we need.


## 3. **Install Services (Node-RED, InfluxDB, Grafana)**

### A. Service Install Script

Copy & paste the following command into your Pi's Terminal:

```bash
curl -sSL meteoscientific.com/scripts/install-dashboard-v3.sh -o dashboard.sh && chmod +x dashboard.sh && sudo ./dashboard.sh
```

During the installation you'll get a few questions and warnings. 

:::note
If you have a 4GB RAM Pi, you'll see a warning message about performance.  This is just to clarify that if you want to run a shitload of sensors frequently you'll probablly be better with an 8GB RAM Pi.  For most people, **4GB is fine** and **8GB is overkill**.
:::

The script will set up your "Organization" name (used in the database).  The default is `MeteoScientific`, feel free to change that if you'd like.  This is mostly a structural thing, so just use something descriptive.

It'll also set up a bunch of random sci-fi usernames for the various services.  

You can accept all the defaults and be fine, or feel free to change them if you want different user names.  Don't get too twisted up with it; again, the defaults are fine.

:::warning
Make sure you copy down your credentials when you see 'em at the end.  They'll be saved to a file in your home directory just in case, but you really should copy them down and then delete that file before you move on.
:::

After installation, visit your shiny new setups:
   - Node-RED: http://your-pi:1880
   - InfluxDB: http://your-pi:8086
   - Grafana: http://your-pi:3000


**DON'T skip copying down your credentials** (instructions are at the end of the script) and then deleting that file.  

```bash
cat /home/<YOUR-USER>/metsci-credentials.txt
```
That will print out your credentials, which you'll need to use later.  Save those somewhere safe, then delete the file with:
```bash
rm -rf /home/<YOUR-USER>/metsci-credentials.txt
```

### B. Integrate External SSD 
Now that your services are installed, let's make sure InfluxDB is using the SSD.

Using a USB cable, connect your external SSD to one of the USB 3.0 ports on your Pi. Here I'm using PoE to power and connect the Pi, and the SSD is just laid on top.  The case is a 3D print so I can mount the Pi on the wall in my server (and clothes) closet.

![Raspberry Pi mounted on closet wall with SSD](/images/tutorial-extras/004-images/raspberry-pi-with-ssd-closet.png)

Then, in your Terminal:

1. Verify the SSD is detected:
   ```bash
   lsblk
   ```
   You should see something like this:
   ```bash
   core@myrmytron:~ $ lsblk
    NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
    sda           8:0    0 111.8G  0 disk 
    └─sda1        8:1    0 111.8G  0 part 
    mmcblk0     179:0    0 116.2G  0 disk 
    ├─mmcblk0p1 179:1    0   512M  0 part /boot/firmware
    └─mmcblk0p2 179:2    0 115.7G  0 part /
   ```
See how my sda lists `sda1`?  We'll use that `sda1` in this next command; yours may be named differently.

2. Mount the SSD to a permanent location, e.g., `/mnt/ssd`:
   ```bash
   sudo mkdir -p /mnt/ssd
   sudo mount /dev/sda1 /mnt/ssd
   ```
3. Set the ownership for your user.  In my case, that's `core`.  You may have named yours different.  Replace **core:core** with your user name.
   ```bash
   sudo chown -R core:core /mnt/ssd
   ```
4. Open up `/etc/fstab` so we can set this up for persistence.
   ```bash
   sudo nano /etc/fstab
   ```
   In your `/etc/fstab`, add a line like this, replacing `sda1` with the correct partition identifier from `lsblk` above.
   ```bash
   /dev/sda1 /mnt/ssd ext4 defaults 0 2
   ```
   Save and exit with `CTRL-X`, then `y`, then `Enter`.

Nice work!

Now make sure you did that right. Verify SSD with the following commands:

After mounting:

1. Check mount: `lsblk`
   ```bash
   # You should see your SSD mounted at /mnt/ssd
   NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
   sda           8:0    0 111.8G  0 disk 
   └─sda1        8:1    0 111.8G  0 part /mnt/ssd
   ```

2. Verify permissions:
```bash
ls -l /mnt/ssd`
```
You should see something like this:
   ```bash
   total 16
   drwx------ 2 core core 16384 Nov 30 14:41 lost+found
   ```
The `lost+found` directory is normal for a fresh ext4 filesystem.

3. Test write access:
```bash
   touch /mnt/ssd/test.txt
```
 
Verify it was created
```bash
ls -l /mnt/ssd/test.txt
```

You should see something like:
```bash
-rw-r--r-- 1 core core 0 Jan 4 22:45 test.txt
```
   
Clean up
```bash
rm /mnt/ssd/test.txt
   ```

If any of these commands fail with "permission denied", your ownership isn't set correctly.

Nice work, you've set up the major components of your dashboard.  Now let's set up the Cloudflare tunnel to securely move data between your Pi and the internet.


## 4. **Cloudflare:** Tunnels, Applications, and Tokens

Cloudflare provides a secure connection called a "tunnel" between your Pi and the internet.  Within a tunnel will be different public hostnames for different services, like `node-red.gristleking.dev` for Node-RED and `grafana.gristleking.dev` for Grafana.  We'll use those to connect our Pi to the internet in a secure way.

Think of a tunnel like a big PVC pipe that connects your Pi to the internet.  Within that pipe are lots of individual pipes that carry separate types of information to different places.  Each individualpipe is a public hostname in the tunnel, and within those pipes you'll split it out even further into different Applications that manage the data from different types of sensors. 

Cloudflare changes and updates all the time, so the screenshots and instructions below may be slightly different than what you see in Cloudflare.  

Before we set up the tunnel, we're going to build the access control we need to keep our Pi secure.

### A. Set Up Zero Trust

To start this off, login to [Cloudflare](https://www.cloudflare.com/). I'm assuming you've already set up your domain with Cloudflare, so when you log in you'll see something like this:

![Cloudflare Dashboard](/images/tutorial-extras/004-images/cloudflare-dashboard.png)

You'll need to set up your Zero Trust account in Cloudflare (relax, it's free).  

If you haven't set up Zero Trust yet, you may not see "Zero Trust" in your menu.  If that's the case, navigate to your domain name, look for `Access` in the left menu, then hit the `Launch Zero Trust` blue button on the right, then click it and set up Zero Trust.

![Cloudflare Zero Trust](/images/tutorial-extras/004-images/set-up-zero-trust.png)

Once you have it, you'll see it in your **Main** (not your domain) Cloudflare menu, like this.

![Cloudflare Zero Trust](/images/tutorial-extras/004-images/go-to-zero-trust.png)

With Zero Trust on and ready to go, let's set up all the access control we need before connecting our Pi to the internet.

### B. Zero Trust Token & Application Setup

With our public hostnames set up we'll need to protect them so that not every jackass and their brother can drop into our Node-RED or Grafana instances.  We'll do that with Cloudflare's Zero Trust.

For each public hostname, we'll create Applications and Tokens to manage access for them.  In general, we don't want the public to have any access to our Node-RED instance, but we do want to share our Grafana dashboard with the public.  

Let's start with the Node-RED Application and Token, focusing on what we'll need for the LDDS75.

We'll need three things in order to manage access in Cloudflare Zero Trust:

```
1. A Service Token
2. A Zero Trust Application
3. A Zero Trust Policy Rule
```

:::note
The use of the word "Application" can be a bit confusing here, as we have both Cloudflare Applications and MetSci Applications.  

Remember, a `MetSci Application` is a group of sensors that share the same data structure.  If you were monitoring 30 rainwater tanks with 30 LDDS75 sensors, all of the sensors would be in one MetSci Application, which would map to one `Cloudflare Application`.  

A `Cloudflare Application` is used to manage a Zero Trust setup.  In our case, we'll use `Service Tokens` as a gatekeeper ("No token no entry") as well as a routing requirement, where the LDDS75 token will help route all the LDDS75 data to the Node-RED instance.
:::

#### 1. Create Service Tokens

In Cloudflare, back in Zero Trust, go to `Access-->Service Auth` and click `Create Service Token`.  

We'll start with a Service Token for Node-RED.  Name your token something descriptive (I'll use `ldds75`) and set the duration to `Non-expiring`.

![Add a Service Token in Zero Trust](/images/tutorial-extras/004-images/cloudflare-configure-service-auth-token-ldds75.png)

That will give you an `Access ID` and an `Access secret`.  Save **both the headers and the access codes** in a secure place.  We'll need them when we set up the HTTP integration in MetSci.  What you save should look like this:

```
CF-Access-Client-Id: 5xxxxxxxxxxxxxxxxxxxxxxxx3.access

CF-Access-Client-Secret: ffxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx2
```
Hit the `Save` button at the bottom right.

Using that same process of `Access-->Service Auth-->Create Service Token`, create another Service Token for Grafana.  I'll use `grafana-admin`.  When you're finished, you'll have two Service Tokens, like this:

![Two Service Tokens](/images/tutorial-extras/004-images/cloudflare-service-tokens-created.png)


### C. Zero Trust Applications

We're going to set up 4 Applications.  Two for NOD-RED, and two for Grafana.  They'll do slightly different things, but the process of setting them up is the same.

#### Node-RED Applications

Go to `Access-->Applications` and add a new Cloudflare Application.  

![Add a Zero Trust Application](/images/tutorial-extras/004-images/zero-trust-applications.png)

Select `Self Hosted`

In Node-RED, we don't want any public access, so we'll set up a global gatekeeper and then a specific application to allow our MetSci LDDS75 data to pass through.

#### Node-RED Application - Global
Let's start with the global Node-RED application. 

Set the Application name to `Node-RED` and set the `Session Duration` to `24 hours`.  Then set the subdomain to `node-red`, the `domain` to `<YOUR-DOMAIN>.com`, and the `path` to `*`.

![Add a global application](/images/tutorial-extras/004-images/cloudflare-global-application.png)

Scroll down to the bottom and click `Next` to proceed to the `Policies` section.  Here we'll set up a Policy rule that requires anything using this Application to have a valid token.  

#### Node-RED Policy Rule - Global

Set the policy name to `Node-RED` and set the Action to `Service Auth`, leave the duration as is.

Scroll down a bit until you see `Configure rules`.  On the Selector choose `Any Access Service Token`.  It will automatically fill in a value of `Any non expired Service Token will be matched`.

![Add a policy rule](/images/tutorial-extras/004-images/cloudflare-global-application-policy.png)

Hit `Next` and scroll down to the bottom of the next page (past `CORS`, `Cookies`, and `Additional Settings`), then click `Add Application`.

#### Node-RED Application - LDDS75

Now you'll create the LDDS75 Application, which will only apply to our LDDS75 data.  Hit the `Add Application`, then `Self Hosted` (just like last time), then give it a descriptive name like `ldds75`.  

Leave the session duration at `24 hours` then enter the subdomain, domain, and path it'll use.

In this case, use `node-red` . `gristleking.dev` / `metsci-ldds75-data`. 

We'll use the `metsci-ldds75-data` path later when we set up our Node-RED flow.

![Configure Zero Trust Appication](/images/tutorial-extras/004-images/cloudflare-configure-application-details.png)

Scroll down past `Application Appearances` and `Tags` etc to the bottom.

Click `Next` to proceed to the `Policies` section.  

#### Node-RED Policy Rule - LDDS75

We'll use the same `Service Auth` policy as the global application, but this time we'll restrict it to the `ldds75` token we've set up.

Set the policy name to `ldds75` and set the Action to `Allow`, leave the duration as is.

![Set up your policy](/images/tutorial-extras/004-images/cloudflare-policy-configure.png)

Scroll down to `Configure rules`.  On the Selector choose `Service Token`, then select the Service Token you just created. 

![Configure Policy for your LDDS75 Zero Trust Application](/images/tutorial-extras/004-images/cloudflare-set-service-token-rule-ldds75.png)

Click `Next`, then scroll through the next page, past CORS settings, Cookies settings, and Additional settings. Click `Add Application` at the bottom right and you're done with the Node-RED Applications.

#### Grafana Applications

Ok, now we'll set up the Grafana Applications.  Unlike Node-RED where we're blocking ALL access to the public, this time we want to block access to the Grafana admin side but allow public access to specific Grafana dashboards.  

Since you've already set up two Applications, I'll go a little faster.

#### Grafana Application & Policy - Access Control

```Zero Trust --> Access --> Applications --> Add Application --> Self Hosted```

```
Application name: `Grafana Access Control`
Session Duration: `24 hours`
Subdomain: `grafana`
Domain: `<YOUR-DOMAIN>.com`
Path: `*`
```

Scroll down to the bottom and click `Next` to proceed to the `Policies` section.  

Add a policy with the following:
```
Policy name: Token Auth
Action: Service Auth
Session Duration: Same as application session timeout

Scroll down and

Configure rules:
Include: Any Access Service Token
Value: Any non expired Service Token will be matched
```

![Grafana Access Control Application](/images/tutorial-extras/004-images/cloudflare-grafana-access-control.png)

Scroll down to the bottom of the next page and click `Add Application`.  You don't need to set up a specific Service Auth token for this, you just need to require that any service token is needed to access Grafana except for viewing public dashboards.  We'll set that Application and Policy up next.

#### Grafana Application & Policy - Public Access

```Zero Trust --> Access --> Applications --> Add Application --> Self Hosted```

```
Application name: `Grafana Public Access`
Session Duration: `24 hours`
Subdomain: `grafana`
Domain: `<YOUR-DOMAIN>.com`
Path: `public*`
```

Then add two more domains, with two different paths:

![Add a Grafana Public Access Application](/images/tutorial-extras/004-images/cloudflare-grafana-public-access-domains.png)

```
- Subdomain: `grafana`
- Domain: `<YOUR-DOMAIN>.com`
- Path: `public-dashboards*`
```
and
```
- Subdomain: `grafana`
- Domain: `<YOUR-DOMAIN>.com`
- Path: `api/public*`
```

Scroll down to the bottom and click `Next` to proceed to the `Policies` section.  

Add a policy with the following:
```
Policy name: Bypass
Action: Bypass
Session Duration: Same as application session timeout

Scroll down and

Configure rules:
Include: Everyone
Value: Everyone (will fill in automatically)
```

Super, now you've set up all your Cloudflare Applications and Policies.  The "gates" are setup, so now we can set up and connect the Cloudflare Tunnel to securely move data between your Pi and the internet.

### D. Prepare Your Pi for Cloudflare

In the Pi terminal, install Cloudflare Tunnel.  It's good practice when you're adding anything to your Pi to kick things off with a system update:

```bash
sudo apt update && sudo apt upgrade -y
```

Now that the Pi is cleaned & ready, download the Cloudflare binary to the Pi.  I'm running a Pi 4B with 64-bit ARM architecture (use `uname -m` to check yours if you're unsure), so here's the command I'm using:

```bash
wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64 -O cloudflared
```

That may take a few minutes depending on your connection speed.

When it's done, let's do a few nerdy things (making the binary executable, moving it to a system path, then verifying the installation).

Make it executable:
```bash
chmod +x cloudflared
```

Move it to a system directory:
```bash
sudo mv cloudflared /usr/local/bin/cloudflared
```

Verify the installation:
```bash
cloudflared --version
```

That should get you here on your Pi:

![Cloudflare tunnel installed and ready to set up](/images/tutorial-extras/004-images/set-up-cloudflare-tunnel.png)

### E. Create a Tunnel In Cloudflare Zero Trust

With Cloudflare's Zero Trust on and our Pi set up, we're going to set up the actual tunnel. 

Back in your Cloudflare account, in Zero Trust, go to `Networks --> Tunnels --> Add a tunnel`.

![Zero Trust Network Tunnels](/images/tutorial-extras/004-images/zero-trust-networks-tunnels.png)

On the next page (not shown here), select `Cloudflared`, **NOT** `WARP Connector`, then choose a tunnel name.  I'll use `metsci-demo` for mine.

![Name your Cloudflare tunnel](/images/tutorial-extras/004-images/choose-tunnel-name.png)

Save the tunnel and you'll be taken to the `Configure` page.  Look for the `Install and Run Connector` section and copy the command on the right.

![Install and run connector](/images/tutorial-extras/004-images/install-and-run-connector.png)

### F. Add The Tunnel To Your Raspberry Pi
Back on your Pi, run the command they gave us:

`sudo cloudflared service install super-duper-alpha-numeric-string`

You should see a success message, like this. 

![Tunnel successfully installed](/images/tutorial-extras/004-images/tunnel-success.png)

Hit `Next` at the bottom right of your Cloudflare Configure tunnel screen.

### G. Setting Up Public Hostnames

With our tunnel set up, now we'll create our Public Hostnames (subdomains), starting with Node-RED.

#### 1. Node-RED Subdomain

Add `node-red` in the Subdomain field, then choose your domain. I'm using `gristleking.dev` for this tutorial.  Throughout the tutorial, wherever you see `gristleking.dev`, replace it with your own domain.

For Type choose `HTTP`, then set the URL to `localhost:1880`, which is the port Node-RED runs on.

Now hit the blue `Save tunnel` button at the bottom right. 

![Configure your initial public hostname](/images/tutorial-extras/004-images/cloudflare-initial-tunnel-setup-route-setup.png)

You'll be taken back to the Tunnels page.  Click on the three stacked dots on the right side of the row for your tunnel, then click `Configure`.

![Adding a new public hostname to a Cloudflare Tunnel](/images/tutorial-extras/004-images/cloudflare-add-route-to-tunnel.png)

Now we'll set up the Grafana public hostname.

#### 2. Grafana Subdomain

Select `Public Hostname` and click `Add a public hostname`.

![Add a new public hostname](/images/tutorial-extras/004-images/cloudflare-select-add-public-hostname-for-new-route.png)

Set it up the same way you did for Ned-RED, just subbing in `grafana` and the correct port as follows:

```
-Subdomain: grafana
-Domain: <YOUR-DOMAIN>.com
-Type: HTTP
-URL: localhost:3000
```

It should look like this:  

![Add the hostname and post for Grafana](/images/tutorial-extras/004-images/cloudflare-add-public-hostname-grafana.png)

Click `Save hostname`.

You can now see both your public hostnames for your tunnel.  Cool, right?

![Confirm both your public hostnames](/images/tutorial-extras/004-images/cloudflare-both-public-hostnames-added.png)


### H. Document Your Public Hostnames

Head back to the Cloudflare main menu and choose your domain, then `DNS`, then look for the subdomain you just set up.  I usually add a note to mine, something like `this is for Node-RED for the MetSci Demo Dash project`, just so future me has a clue as to what's going on. 

![Add notes to your DNS records](/images/tutorial-extras/004-images/cloudflare-dns-route-note.png)

Now you've set it up so that you can share a dashboard via your Cloudflare tunnel, but the rest of your Grafana instance is still protected.  Big thanks to **Chaika** over on the Cloudflare Discord for walking me through the Grafana dashboard setup!

---

## 5. **Setting Up Your LDDS 75 Sensor**

Whether this is your first device ever or your 100th, now is a good time to think about how you're going to structure your data.  I've written a [separate tutorial just on structuring data](/docs/tutorial-basics/009-good-housekeeping-for-LoRaWAN-sensor-fleets.md). If you've never thought about this before, it's a good idea to read through that.  You can also just YOLO and follow along, trusting that my data structure is good enough for you.  

I'm not going to tell you what to do, but I will tell you that if you're going to be doing anything with your data, you're going to want to think about it.

### A. Provision That Sucker!

Use the [Add A Device](/docs/tutorial-basics/adding-a-device) tutorial on this site to walk you through it.  A working codec for the device is in MetSci already. When you're done, it should look like this:

![LDDS 75 reporting in the MetSci Chirpstack](/images/tutorial-extras/004-images/LDDS75-working-on-MetSci.png)

### B. Check Link Metrics

Ok, assuming you've got your data structure set up, after a while (for me this is about 3 weeks) your Link Metrics for the device will be pretty boring flat lines, like this:

![LDDS 75 Link Metrics](/images/tutorial-extras/004-images/link-metrics-ldds75.png)

Quick note:  You *can't* see the **Device Metrics** properly in Chirpstack, which is what we're using for an LNS, as both the Battery Voltage and the Distance will be off the chart, which is 0 - 1.0, and unless you have the optional extra temp sensor you won't see that either.  Don't worry about seeing anything here; that's why we're setting up a dashboard.  🔧 

![LDDS 75 Link Metrics](/images/tutorial-extras/004-images/device-metrics-dont-worry.png)

### C. Configure For Fast Firing
We're going to need some data coming through the tunnel in a bit, so let's set up the LDDS75 to fire every minute for now, then we'll pull the power until we're ready to test.

Use [this guide](/docs/tutorial-basics/008-configure-a-device.md) to set up the LDDS75 to fire every minute.  You "could" theoretically do all this with downlinks, but A) I'm not covering that here and B) I want you to have the ability to wire into a sensor and tell it what to do.

However you do it...

Once you've got it set up and seen a few packets come through, pull the power on your LDDS75 using the yellow jumper; we'll use it again in a bit.

![LDDS 75 jumper](/images/tutorial-extras/004-images/ldds-75-jumper-power-off.jpeg)

### D. Set Up The HTTP Integration In MetSci

Head back over to the [MeteoScientific Console](https://console.meteoscientific.com/front/login) and in `Applications`-->`LDDS 75` (or whatever you called it), look for the `Integrations` tab.  

![MetSci LDDS 75 Integrations](/images/tutorial-extras/004-images/metsci-applications-integrations-tab.png)

Find 'HTTP Integrations" and hit the `+`.  

Leave the payload encoding set to JSON. 

Change the event endpoint to `https://node-red.<YOUR-DOMAIN>/metsci-ldds75-data/` then add two headers:

```
CF-Access-Client-ID <your-access-id>
CF-Access-Client-Secret <your-access-secret>
```

Use the `Access ID` and `Access Secret` from the Service Token you set up for the LDDS75 in Cloudflare. 

![Set up your http integration in MetSci Chirpstack](/images/tutorial-extras/004-images/metsci-http-integration.png)

Now you've set it up so the MetSci LNS can securely send data through a Zero Trust Cloudflare tunnel to Node-RED on your Raspberry Pi.  Cool, right?

Nice work!  The NSA can prolly still get in, but the rest of the screaming hordes should be kept at bay.

:::tip Future Integrations
For each new sensor type you add:
1. Create a new Service Token in Cloudflare named for that sensor
2. Configure the HTTP integration with the new token's credentials

This maintains consistent security across all your sensor data routes.
:::

---
## 6. **Local Integration Setup**

At the beginning of the tutorial we ran a script to set up all the services we'll need.  Now we'll go through and configure 'em.

### A. Node-RED Flows

Node-RED is a flow-based programming tool that allows you to create data flows between nodes. In this case, our nodes represent the data flow between MetSci, the InfluxDB database on our Pi, and Grafana.  

Visit Node-RED at `http://<YOUR-PI-IP>:1880` in a browser.  

If you haven't already logged in (back when we set up the services), you'll see a login screen.  Use the user & pass that was setup during the service setup.  You DID save those credentials, right?

Let me show you the whole "flow" first, it'll help you understand how it works.

![Node-RED flow](/images/tutorial-extras/004-images/node-red-full-flow.png)

#### 1. HTTP In

We'll start with an **HTTP In** node, labeled on the image above as `MetSci LDDS75 Input`.  Think of it as the greeter at Wal-Mart.  "Hey, how you doing, are you decent and sober? Come on in!" 

To add a node, you find it in the left menu bar, or just start typing in the name of the node at the top.  Once you see it, drag it onto the workspace. 

![Adding an HTTP In node](/images/tutorial-extras/004-images/node-red-drag-in-node.png)

Once you've dragged a node in, double click it to configure it.  For the HTTP In node:

- Method: `POST`
- URL: `/metsci-ldds75-data`
- Name: `MetSci LDDS75 Input`

![Configuring the HTTP In node](/images/tutorial-extras/004-images/node-red-configure-http-in-ldds75.png)

#### 2. HTTPS Response

Next we'll add in a **https response** node.  This node will let the tunnel know everything is working and follow the best practices of always responding to http requests.  It's like when someone says "Hi" to you in the street; just say "Hi" back.

![Adding an https response node](/images/tutorial-extras/004-images/node-red-http-response-node.png)

Just make sure you name it; leave everything else blank.

With two nodes in the workspace, you can start connecting 'em.  Drag a "wire" from the grey dot on the right side of the HTTP In node to the grey dot on the left side of the HTTPS Response node.

#### 3. JSON

Now we'll add and configure a **JSON** node.  JSON nodes standardize the incoming data, parse errors, and make sure the next node in the flow gets the right data.

   - Search for `json` and add it to your workspace
   - Double-click to configure:
     - Action: `Always Conver to JavaScript Object`
     - Property: `msg.payload`
     - Name: `Parse JSON`
   - Click Done to save

This ensures our data is in the right format for processing, whether it comes from our test Inject node or the HTTP In node.

Now drag a wire from the **HTTP IN** node to the **Parse JSON** node. At this point, you'll have a wire from the `HTTP In` node to the `Parse JSON` node, and a wire from the `Parse JSON` node to the `HTTPS Response` node.

#### 4. Switch

Next we'll add a **Switch** node to route the data to the correct sensor function.
   - Search for `switch` and add it to your workspace
   - Double-click to configure:
     - Name: `Route by Device Type`
     - Property: `msg.` `payload.deviceInfo.deviceProfileName`
     - Rules:
       1. First rule:
          - Operator: `contains`
          - Value: `LDDS75`
       2. Click `+` to add second rule:
          - Operator: `contains`
          - Value: `AM319` (just a demo for this tutorial)
     - Check "otherwise" to catch unknown devices
   - Click Done to save

This node examines the device profile name in the incoming message and routes it to the appropriate function node. 

If the incoming message contains "LDDS75", it goes to output 1, if it contains "AM319" (which we haven't set up yet), it goes to output 2, and any unknown devices go to the "otherwise" output where you can handle them (e.g., with a debug node to see what arrived).

![Configuring the switch node](/images/tutorial-extras/004-images/node-red-switch-node-config.png)

Wire the `Parse JSON` node to the `Switch` node.  

#### 5. Function

Add a **Function** node for the LDDS75.  Function nodes are what allow us to correctly setup the data for insertion into InfluxDB.  A JSON node cleans up the data, the Switch node routes it to the correct sensor function, and a Function node formats it for InfluxDB.

Search for a `function` node and add it to your workspace.  The LDDS75 specs say it can measure from 280mm to 7500mm. You'll want to modify the following function to match your tank size.  I'm using a 1200mm diameter, 1850mm height tank.

    - Double-click to configure:
        - Name it `LDDS75 Function`  
        - Paste the following code into the `Message` tab of the Function node:

```javascript
try {
    // Log receipt of message
    node.warn("LDDS75 function processing message");

    const originalPayload = msg.payload;
    const gateway = originalPayload.rxInfo?.[0] || {};

    // Get the distance value first and validate it
    const distance = parseInt(originalPayload.object?.distance || 0);
    
    // Validate distance reading (LDDS75 range: 280-7500mm for flat objects)
    if (!distance || distance < 280 || distance > 7500) {
        node.warn("Invalid distance reading: " + distance + "mm - outside LDDS75 range (280-7500mm)");
        return null;
    }

    // Optional: Tank-specific validation (comment out or adjust as needed)
    const MAX_TANK_HEIGHT = 1850; // adjust this to your tank height
    if (distance > MAX_TANK_HEIGHT) {
        node.warn("Reading exceeds tank height: " + distance + "mm > " + MAX_TANK_HEIGHT + "mm");
        return null;
    }

    // Create payload array with fields and tags objects
    msg.payload = [
        {
            // Sensor data
            distance: distance,
            battery: parseFloat(originalPayload.object?.battery_voltage || 0),
            temperature: parseFloat(originalPayload.object?.temperature || 0),

            // RF metrics
            rssi: parseInt(gateway.rssi || 0),
            snr: parseFloat(gateway.snr || 0),
            frequency: parseInt(originalPayload.txInfo?.frequency || 0),
            spreading_factor: parseInt(originalPayload.dr || 0),
            bandwidth: parseInt(originalPayload.txInfo?.modulation?.lora?.bandwidth || 0),

            // Frame counter and port
            frame_counter: parseInt(originalPayload.fCnt || 0),
            port: parseInt(originalPayload.fPort || 0)
        },
        {
            // Device info
            device: String(originalPayload.deviceInfo?.deviceName || ""),
            device_eui: String(originalPayload.deviceInfo?.devEui || ""),
            device_addr: String(originalPayload.devAddr || ""),
            device_class: String(originalPayload.deviceInfo?.deviceClassEnabled || ""),
            device_profile: String(originalPayload.deviceInfo?.deviceProfileName || ""),

            // Application info
            application: String(originalPayload.deviceInfo?.applicationName || ""),
            application_id: String(originalPayload.deviceInfo?.applicationId || ""),

            // Gateway info
            gateway: String(gateway.metadata?.gateway_name || ""),
            gateway_id: String(gateway.gatewayId || ""),

            // Network info
            region: String(gateway.metadata?.region_common_name || ""),
            network: String(gateway.metadata?.network || ""),
            tenant: String(originalPayload.deviceInfo?.tenantName || "")
        }
    ];

    // Set measurement name
    msg.measurement = "ldds75_metsci";

    // Add timestamp (convert to nanoseconds for InfluxDB)
    const timestamp = new Date(originalPayload.time).getTime() * 1000000;
    if (isNaN(timestamp)) {
        node.warn("Invalid timestamp");
        return null;
    }
    msg.payload[0].timestamp = timestamp;

    // Log the attempt
    node.warn("Writing to InfluxDB - Device: " + msg.payload[1].device + ", Distance: " + distance + " mm");

    return msg;
} catch (err) {
    node.error("LDDS75 Processing Error: " + err.message);
    node.error("Failed payload: " + JSON.stringify(msg.payload, null, 2));
    node.status({ fill: "red", shape: "dot", text: "Processing Error" });
    return null;
}
```

Make sure you drag the wire from the correct connector on the Switch node (the top one, but you can hover over the node to see which connector is which) to the next node in the flow.  In this case, that'll be our LDDS75 Function node.

#### 6. InfluxDB out

Add an **InfluxDB out** node to the Function node to store the data in InfluxDB.
    - Double-click the node to configure it.
    - Name the node `Local InfluxDB`

Click the `+` icon next to the "Server" field to create a new InfluxDB server configuration
    - Fill in the InfluxDB server properties:
   ```
   Name: [your org name, copy this from your credentials file]
   Version: 2.0
   URL: http://localhost:8086
   Token: [paste in your InfluxDB token from your credentials file]
   Leave other settings as is
   ```
    - `Add` to save the server configuration
   
   Now, in the InfluxDB Out node configuration:
    ```
   Name: Local InfluxDB
   Server: [should be the server you just set up]
   Organization: [your org name, copy this from your credentials file]
   Bucket: sensors [also in the credentials file]
   Measurement: [leave blank]
   Time precision: `Nanoseconds` 
     ```

![Configuring the InfluxDB out node](/images/tutorial-extras/004-images/node-red-influxdb-out-node-configure.png)
 
 Click `Done` to save the node, then click `Deploy` in the top-right.

![Connecting the nodes](/images/tutorial-extras/004-images/node-red-ldds-basic-flow-no-debug.png)

#### 7. Debug

Now, the pro move here is to add in Debug nodes.  It's not required, but it's what I've done.  Add a Debug node to every one our regular nodes. That way we'll see what's going through the whole flow the next time we have a packet come through.

For all of those:
```
- Set Output to `msg.payload`
- Name it something descriptive
```

#### 8. Deploy and test

With your flow set up, click `Deploy` in the top-right. 

![Deploying the flow](/images/tutorial-extras/004-images/node-red-flow-with-debug-deploy.png)

You should see a green bar and the word "Deployed" at the top of the screen.  

Now go back to your LDDS75 and power it back on.  Since you set it to fire on a one minute interval, you'll know quickly if everything is working or not as you'll see the data start flowing through in the debug panel on the right side.  

Remember, it might take a minute or two for the first join to complete and the data to start flowing.

![Connecting the nodes](/images/tutorial-extras/004-images/node-red-first-flow.png)

:::note
This modular structure makes it easy to add more sensors later. You can see I've added an AM319 sensor to the flow above in the image.  Each sensor follows the same basic pattern:
- HTTP In (receives data)
- JSON parser
- Switch (routes data to the correct sensor function)
    - Sensor Function (formats data for your needs)
- InfluxDB out (stores data)
:::

### B. InfluxDB Check

Let's check our InfluxDB to see if the data made it there.  Go to `http://your-pi:8086` and sign in with the credentials from your installation.  

Go to `Data Explorer` (the graphy icon on the left menu) and run a query for `ldds75` by pasting in the query below and hitting "Submit".  Hit the `View Raw Data` button (not circled in the image).  You should see your data there.

![InfluxDB query](/images/tutorial-extras/004-images/influxdb-data-explorer.png)

Here are three script queries you can use. These use my `DEVICE NAME`, in this case `LDDS 3`, so **make sure you change that to your own**.  

The first query gives you the basic distance to liquid surface:

```flux
from(bucket: "sensors")
  |> range(start: -24h)
  |> filter(fn: (r) => r["_measurement"] == "ldds75_metsci")
  |> filter(fn: (r) => r["device"] == "LDDS 3")
  |> filter(fn: (r) => r["_field"] == "distance")
  |> keep(columns: ["_time", "_value", "device"])
  |> yield(name: "mm_to_surface")
```


I built 2 more queries to see my data using my barrel size (1200mm diameter, 1850mm height).  

:::note
A quick note here on metric.  I'm a slowly-converting-to-metric American, so while I'll use mm for distance, I'll convert to gallons for volume.  Sorry, old habits die hard.
:::

First, I'll check the current water volume in gallons, again using my `DEVICE NAME`, in this case `LDDS 3`:

```flux
from(bucket: "sensors")
  |> range(start: -24h)
  |> filter(fn: (r) => r["_measurement"] == "ldds75_metsci")
  |> filter(fn: (r) => r["device"] == "LDDS 3")
  |> filter(fn: (r) => r["_field"] == "distance")
  |> map(fn: (r) => ({
       r with _value: float(v: 3.14159) * ((600.0/1000.0) ^ 2.0) * (1850.0 - float(v: r._value))/1000.0 * 264.172
     }))
  |> keep(columns: ["_time", "_value", "device"])
  |> yield(name: "gallons")
```

Here's another query you could use that would also pull the gateway name that's receiving your data,as well as the distance and RSSI fields.  You might use this to keep track of what kind of coverage you're getting from a given gateway.

```flux
from(bucket: "sensors")
  |> range(start: -24h)
  |> filter(fn: (r) => r["_measurement"] == "ldds75_metsci")
  |> filter(fn: (r) => r["gateway"] == "dancing-daffodil-cheetah")
  |> filter(fn: (r) => r["region"] == "US915")
  |> filter(fn: (r) => r["_field"] == "distance" or r["_field"] == "rssi")
  |> keep(columns: ["_time", "_value", "_field", "device", "gateway"])
```
:::tip
These are all fairly simple queries, but you may still have problems.  We're nerds, and nerd stuff usually don't work right the first time.  That's OK.  If you have problems, start by checking to make sure your queries in InfluxDB match your Device Names, Gateway, and Region.  If you just copy/paste exactly what I put, you're not going to see anything because it'll be looking for my `DEVICE NAME`, in this case `LDDS 3`.  By far the fastest way to debug on your own is to feed in messages from Node-RED debug and InfluxDB,  and drop screenshots into ChatGPT/Cursor/Grok etc.  
:::

### C. Grafana Dashboards

Now let's head over to Grafana and set up a dashboard, woohoo!

Go to the local Grafana at `http://your-pi:3000` and sign in with the credentials from your installation.  You'll see something like this after you sign in:

![Grafana dashboard](/images/tutorial-extras/004-images/grafana-home.png)

Now that we have data flowing into InfluxDB, let's visualize it in Grafana! First, we'll connect Grafana to our InfluxDB data source.

1. Click **Connections** in the left-side menu
2. Click **Add new connection**
3. Search for `InfluxDB` and select it

![Adding a new InfluxDB connection](/images/tutorial-extras/004-images/grafana-connections-influxdb.png)

4. Click **Add new data source**
5. Configure the following settings, leaving everything else as is:
   
   **Basic Settings:**
   - Name: `Local InfluxDB`
   - Default: ✓ (checked)

   **Query Language:**
   - Select: `Flux`
   (You'll see a note that Flux support is in beta - that's okay!)

   **HTTP Settings:**
   - URL: `http://<YOUR-PI-IP>:8086`

   **Auth:**
   - Basic auth: Toggle ON
   - With Credentials: Toggle ON
   - User: [your InfluxDB username]
   - Password: [your InfluxDB password]

   **InfluxDB Details:**
   - Organization: [your org name from credentials file]
   - Token: [paste your token from credentials file]
   - Default Bucket: `sensors`
   - Min time interval: `10s`
   - Max series: `1000`

6. Click **Save & test** at the bottom
   You should see "Data source is working" if everything is configured correctly

![Grafana InfluxDB connection setup](/images/tutorial-extras/004-images/grafana-influxdb-settings.png)

Now let's create a dashboard to visualize our LDDS75 data.

![Grafana add new dashboard](/images/tutorial-extras/004-images/grafana-build-new-dashboard.png)

1. Click the **+** icon up at the top right
2. Select **New Dashboard**
3. Click **Add visualization**
4. Select your `Local InfluxDB` data source
5. In the Flux Query editor, paste the following, making sure you replace `LDDS 3` with your own device name:

```flux
from(bucket: "sensors")
  |> range(start: -4h)
  |> filter(fn: (r) => r["_measurement"] == "ldds75_metsci")
  |> filter(fn: (r) => r["device"] == "LDDS 3")
  |> filter(fn: (r) => r["_field"] == "distance")
  |> keep(columns: ["_time", "_value", "device"])
  |> last()
  |> yield(name: "distance")
``` 

Now, over on the right, we're going to configure the visualization settings.

The type of visualization we're going to use is a `Time Series` graph.  This is ideal for showing changes over time.

![Grafana Time Series](/images/tutorial-extras/004-images/grafana-initial-setup.png)

At the top right, select `Time series`.

6. `Panel Options`
   - Title: "Water Level"
   - Description: "Current distance to liquid surface"

7. `Value Options`
   - Calculate: "Last *"
   - Fields: Select "Numeric Fields" only

8. `Standard Options`
   - Unit: Distance → millimeters (mm)
   - Min: 0
   - Max: 8500 (this is the max, adjust based on your tank size)
   - Decimals: 0 (millimeters don't need decimals)

9. `Thresholds`
   - Add threshold at 80% of your maximum expected water level
   - Base color: Green
   - Above 80%: Red (indicates barrel is getting full)

10. Save your dashboard, then leave the edit window and go `Back to dashboard`.

:::tip
The `keep(columns: ["_time", "_value", "device"])` in the query is crucial - it prevents duplicate gauges by stripping unnecessary tags while maintaining the essential data for display.
:::

Now let's do a little admin work, then set up the sharing aspect.  Grafana makes this dead easy.

First, in your Pi Terminal:
```
sudo nano /etc/grafana/grafana.ini
```

You'll see the full file, modify/add the following, **replacing the domain and subdomain with your own as appropriate**:

```
[server]
domain = grafana.gristleking.dev 
root_url = https://grafana.gristleking.dev 

[security]
allow_embedding = true

```
Save & close with `Ctrl+X`, then `Y`, then `Enter`.

Now restart Grafana:
```
sudo systemctl restart grafana-server
```   

Back in Grafana, `Save` your dashboard, refresh the page, then `Exit Edit`

Click the Share button in the top right.  Go to the `Public Dashboard` tab

![Grafana Share Dashboard](/images/tutorial-extras/004-images/grafana-share-dashboard.png)

Check all the boxes, then click `Generate Public URL`.  It should generate a URL like `https://grafana.<YOUR-DOMAIN>>.dev/d/000000002/ldds75-metsci-dashboard?orgId=1&var-device=LDDS%202`.

Copy the URL and paste it into your browser, or share it with your Mom.  Now everybody can see how much water is in your tank.  Bam, you're public!

--- 
### D. Fun with Monitoring & Triggers

We're now finished with the bulk of this tutorial.  You've got a dashboard, you've got data flowing into InfluxDB, and you've got a way to share it with the world.  From here, you can add more sensors, build more complex dashboards, or string together new Node-RED flows to trigger alerts or other actions.  Following are a few examples of what you could do next.

#### 1. Indoor Environment Monitoring

Liquid level sensing is simple, but generally not that exciting, so...

Using the steps above, I've added in a Milesight AM319, including an Applicaton and Policy in Cloudflare and a second dashboard.  This is what it looks like with some live data:

![Grafana AM319 Dashboard](/images/tutorial-extras/004-images/grafana-am319-burpees.png)

Just so you could see some real change,I closed up all the windows & doors in my office and did burpees until the CO2 went up.  You can also see where we dropped a couple of packets.  The AM319 fires a huge packet every minute, so it's easy to see where the packets are dropped.

:::tip Download My Node-RED Flow
Want to skip the manual setup? You can download the complete LDDS75 flow here and import it directly into Node-RED.
<div className="centered-button-container">
  <a href="/flows/MetSci-LDDS75-flow.json" className="download-button" download>Download  LDDS75 Flow</a>
</div>
After downloading:
1. Configure your InfluxDB credentials
2. Update any device-specific information
3. Deploy the flow after importing
:::

---

#### 2. Home Assistant Integration

If you're using [Home Assistant](https://www.home-assistant.io/) you can use Node-RED on the Pi to pipe in data from the dashboard you just set up to Home Assistant. 

Installing and configuring HA is well beyond the scope of this tutorial, but for those of you who already have it running and want to pipe in data from your shiny new MetSci setup, here's how you can do it:

1. Install the Home Assistant nodes in Node-RED on your MetSci Pi:
   ```bash
   cd ~/.node-red
   npm install node-red-contrib-home-assistant-websocket
   ```

2. In Node-RED, add and configure the `home-assistant` config node:
   - Protocol: `http` or `https` (depending on your HA setup)
   - Base URL: `http://YOUR_HA_IP:8123` (or your external URL)
   - Access Token: Create a Long-Lived Access Token in HA
     (HA Profile → Long-Lived Access Tokens → Create Token)

3. Add a `call-service` node after your LDDS75 Function node:
   ```javascript
   Domain: sensor
   Service: set_state
   Entity ID: sensor.water_level
   Data: {
     state: msg.payload[0].distance,
     attributes: {
       unit_of_measurement: "mm",
       friendly_name: "Water Level",
       device_class: "distance",
       battery_level: msg.payload[0].battery
     }
   }
   ```

4. Restart Home Assistant to apply changes

:::warning Security Considerations
When connecting services across devices:
1. Use strong, unique passwords and tokens
2. Consider setting up a VPN if accessing over the internet
3. Use SSL/TLS when possible
4. Limit firewall rules to specific IPs
5. Monitor logs for unauthorized access attempts
:::

***Example Lovelace Card***
Add this to your Lovelace dashboard in Home Assistant:
```yaml
type: vertical-stack
cards:
  - type: gauge
    name: Water Level
    entity: sensor.water_level
    min: 0
    max: 2500
    severity:
      green: 0
      yellow: 800
      red: 100
  - type: history-graph
    title: Water Level History
    entities:
      - entity: sensor.water_level
        name: Level
```

#### 3. Class C Integration

I've talked about how to use Class C in the [MetSci Class C via API tutorial](/docs/tutorial-extras/002-class_C_kuando_busylight.md).  You could use that, or you can use Node-RED to pipe data from the LDDS75 to your Class C device, in my case, a Kuando Busylight.

Since you've already set up Node-RED, I'll just share the flow I built for mine.

<div className="centered-button-container">
  <a href="/flows/MetSci-Busylight-Trigger-flow.json" className="download-button" download>Download Busylight Trigger Flow</a>
</div>

It'll look like this:

![Node-RED Busylight Trigger](/images/tutorial-extras/004-images/node-red-busylight-trigger-flow.png)

Setting that up will check the LDDS75 distance measurements in the InfluxDB every 15 minutes, then flash your Busylight red 5 times on a 1 second interval every 15 minutes when the tank is full (distance of 120mm or less) until you turn the Node-RED alert off or the tank is no longer full.  

Let your imagination run wild!  You could also use this to trigger other actions, like sending an email, triggering a Home Assistant automation, or even triggering a Class C device to send a message:  

```Airstrikes required on unknown vehicle parked in "MY" parking spot```  

Just kidding, airstrikes triggered by a LoRaWAN device are for war, not parking violations.  But...we're American, so maybe we can make an execption. 😉

## 7. System Maintenance & Troubleshooting

### A. Credentials Management
Your credentials are stored in several locations:
1. Node-RED: `~/.node-red/settings.js`
2. InfluxDB: `/var/lib/influxdb/influxd.bolt` (and `/var/lib/influxdb/engine/`)
3. Grafana: `/etc/grafana/grafana.ini`
4. Installation credentials: Generated in `~/metsci-credentials.txt`

:::warning
After setting up your services, securely store the contents of `~/metsci-credentials.txt` somewhere safe, then delete it from your Pi:
```bash
rm ~/metsci-credentials.txt
```
:::

### B. Backing Up Configurations
Create a backup script for your configurations:
```bash
#!/bin/bash
BACKUP_DIR="/mnt/ssd/backups/$(date +%Y%m%d)"
mkdir -p $BACKUP_DIR

# Backup Node-RED flows and settings
cp -r ~/.node-red/* $BACKUP_DIR/node-red/

# Backup service configs
sudo cp -r /var/lib/influxdb $BACKUP_DIR/influxdb/
sudo cp /etc/grafana/grafana.ini $BACKUP_DIR/

# Set permissions
sudo chown -R $USER:$USER $BACKUP_DIR
```

### C. System Updates
Regular maintenance tasks:
```bash
# Update system packages
sudo apt update && sudo apt upgrade -y

# Restart services after updates
sudo systemctl restart nodered influxdb grafana-server
```

### D. Troubleshooting Guide

#### 1. Service Not Starting
Check service status:
```bash
sudo systemctl status [service-name]  # nodered, influxdb, or grafana-server
```

View logs:
```bash
sudo journalctl -u [service-name] -n 50 --no-pager
```

#### 2. Lost Connection to Pi
1. Check if Pi is powered on
2. Verify network connection
3. Try direct connection via ethernet
4. Check Cloudflare tunnel status:
```bash
sudo systemctl status cloudflared
```

#### 3. Data Not Flowing
Check each step:
1. MetSci LNS → View device events in console
2. Cloudflare → Check tunnel logs
3. Node-RED → Check debug tab
4. InfluxDB → Test token and query recent data:
   ```bash
   # Test token
   curl -v "http://localhost:8086/api/v2/write?org=YOUR_ORG&bucket=sensors" \
     -H "Authorization: Token YOUR_TOKEN" \
     -d "test,host=test value=1"
   ```
5. Grafana → Check data source connection

#### 4. Disk Space Issues
Monitor disk usage:
```bash
df -h
```Check service logs taking up space:
```bash
sudo du -h /var/log | sort -rh | head -n 10
```

:::tip Recovery Steps
If something goes wrong:
1. Check the relevant service status
2. Review the logs
3. Restore from backup if needed
4. If nothing else works, you can always reinstall the affected service
:::


## 8. La Ultima

Last step?  [Here's the dashbboard](https://grafana.meteoscientific.com/public-dashboards/e6bd9074e3ad4fad935bbcacb510059b) I built for MeteoScientific, combining the rain barrel data with weather station data.

I'd love to see what you do!  Please tag us on X [MeteoScientific](https://x.com/meteoscientific) and [Gristleking](https://x.com/thegristleking) we'd love to see what you've done!

![Nik throwing the horns on a fully installed LDDS75 sensor](/images/tutorial-extras/004-images/nik-throwing-the-horns-on-a-fully-installed-ldds75-sensor-using-helium.JPG)

This tutorial was made possible by a generous grant from the Helium Foundation's IOTWG; huge thanks to them for the support.

--------------------------------------------------------------------------------

## Update_Status
Path: maintenance/UPDATE_STATUS.md
Type: tutorial
Intent: Understand the current status and issues related to the deployment of a LoRaWAN educational platform.
Summary: This tutorial provides an overview of the site maintenance log for MeteoScientific, detailing the investigation into preview deployment failures in GitHub Actions while ensuring the production site remains functional. It is aimed at beginners and intermediate learners interested in IoT and LoRaWAN deployment processes.
Difficulty: Intermediate
Keywords: LoRaWAN, IoT deployment, GitHub Actions, Vercel, Docusaurus, gh-pages, site maintenance, production site, preview deployment
Technologies: Vercel, GitHub Actions, Docusaurus
Prerequisites: Basic understanding of GitHub, Familiarity with deployment platforms, Knowledge of DNS configuration
Related Topics: LoRaWAN gateway setup, IoT application deployment, Understanding GitHub Actions, Managing Docusaurus projects

# Site Maintenance Log

## March 2024 - Preview Deployment Investigation

### Issue
- Preview deployments showing failures in GitHub Actions
- Production site remained functional throughout
- Concerns about gh-pages deployment conflicts with Vercel

### Investigation & Resolution
- Identified that failed previews were only affecting gh-pages branch deployments
- Production deployments through Vercel remained stable
- Site accessibility and functionality verified through incognito testing
- DNS and domain configuration confirmed correct

### Current Status
- Production site (www.meteoscientific.com) - ✅ Fully functional
- Vercel deployments - ✅ Working as expected
- Preview deployments - ⚠️ Expected failures (gh-pages related, can be ignored)

### Technical Details
- Deployment platform: Vercel
- Main branch: Deploys successfully to production
- gh-pages branch: Preview failures expected and don't impact production
- Last successful production deployment: March 6, 2024 (added media page)

### Future Considerations
- Optional: Could disable GitHub Pages workflow if preview failures are concerning
- Optional: Docusaurus update available (3.1.1 → 3.7.0) - not urgent
- Keep this log updated with any significant changes or investigations

### Dependencies
- Current Docusaurus version: 3.1.1
- Deployment: Vercel
- DNS: Configured correctly with Vercel's recommended settings 

--------------------------------------------------------------------------------

## Let's Explore The Helium IoT Explorer
Path: blog/2025-04-27-Lets_Explore_Helium_Explorer.md
Type: blog
Intent: Discover how to assess Helium network coverage for IoT projects using LoRaWAN.
Summary: This blog post guides users through evaluating the Helium IoT network, the world's largest LoRaWAN network, to determine coverage for their sensor projects. It covers accessing the Helium coverage map, understanding Hotspot statistics, and the cost of using the network, making it ideal for beginners and IoT enthusiasts.
Difficulty: Beginner
Keywords: Helium Network, LoRaWAN coverage, IoT Hotspots, data credits, HNT, LoRaWAN gateways, Helium Explorer, IoT applications, cryptocurrency in IoT
Technologies: Helium Network, LoRaWAN, HNT, data credits, Hotspots
Prerequisites: Understanding of LoRaWAN basics, Familiarity with IoT concepts, Knowledge of cryptocurrency fundamentals
Related Topics: Getting Started with LoRaWAN, Deploying Your Own LoRaWAN Gateway, Understanding IoT Data Credits, Comparing LoRaWAN Networks, Building IoT Applications with Helium

One of the very first questions any reasonable business owner will have when they’re deciding whether or not to use LoRaWAN to connect their sensors to the internet is, “How do I get coverage?”<!-- truncate -->

With LoRaWAN, you can deploy your own gateways and provide your own coverage, but as I've discussed on [this episode of the MetSci podcast](https://pod.metsci.show/episode/primer-lora-vs-lorawan-how-to-use-it) a few networks exist that already provide coverage and will give you free or very cheap access to it.  One of those is the [Helium network](https://world.helium.com/en/iot/hotspots), a global LoRaWAN.  

We’ll take a look at how to assess whether or not there is already Helium coverage in your area, and if it’s acceptable for your project. Let’s start at their coverage map, found at [`world.helium.com`](https://world.helium.com/en/mobile), which will default to Mobile.

![Helium World Mobile Map](/img/blog/2025-04-27-lets-explore-helium-explorer/world-helium-mobile.png)

Helium has 2 networks.  One is for IoT, and one is for phones.  We’re going to focus on the IoT network, which is the largest LoRaWAN network in the world with over 250,000 LoRaWAN gateways.  

Helium calls these gateways “Hotspots” in an attempt to make this technology relatable to the average person.  I’ll use “gateway” and “hotspot” interchangeably here.

### The Hotspot Map

We’ll start by exploring the Hotspot map, which you can find by [going to the green IoT button on the Helium IoT Explorer](https://world.helium.com/en/iot/hotspots), then clicking it to get dropdown options and selecting “Hotspot Map”.

![Choose IoT Explorer](/img/blog/2025-04-27-lets-explore-helium-explorer/chose-green-iot-then-hotspot-map.png)

You should easily recognize the basic stats, like number of Hotspots and Daily Messages, but “DC burned” may be new to you.  

![Helium IoT Basic Stats](/img/blog/2025-04-27-lets-explore-helium-explorer/helium-basic-stats.png)

Helium is a network powered by cryptocurrency.  The currency, or token, is called an HNT, or Helium Network Token.  It is used to [pay for data credits, or DCs, which allow you to transfer on the network](https://docs.helium.com/tokens/data-credit/).


If you’d like, **you can skip the whole cryptocurrency thing** and just buy DCs with whatever currency you’re used to; dollars, euros, yen, whatever.  If you'd like to try that, you can do it over on the [MeteoScientific Console](https://console.meteoscientific.com/front/login), although I give you the first 400 DC for free. 

### The Cost Of Using The Helium Network

One DC covers up to a 24 byte message and equals `$0.00001` USD.  Yes, that’s a thousandth of a penny.  Over on the MetSci Console (one of many LNS on Helium) I charge a 10x premium, which means you can still run a sensor sending **a packet an hour for a year and spend less than a dollar.**

If you’re sending less than 24 bytes you still get charged for all 24.  If you’re sending more, you’ll get charged multiple DC per message.

You could also buy multiple copies of that message from multiple gateways.

Unlike traditional wireless networks, there is no subscription fee.  You just pay for the data you successfully transfer.

Helium is a permissionless network; there’s no sales staff to talk to first if you want to use it, no crazy sign up process, and if you’ve ever used LoRaWAN before, not much new to learn; you can just use it.  If you need help, check out my [tutorials](https://www.meteoscientific.com/docs/tutorial-basics/LoRaWAN-Big-Picture).

As you can see, Helium is staggeringly transparent.  On April 27th 2025 when I wrote this, 6.3 million messages had been transferred across the network in the last 24 hours at a cost of 10.4 million DC, or $104.81.

![Transparent Data on Helium](/img/blog/2025-04-27-lets-explore-helium-explorer/staggeringly-transparent-costs.png)

You can also see how many Hotspots (gateways) are currently serving the network, about 287,000 as of the time of writing.  If we just do some fast back-of-the-envelope math, you can see that what Helium did using token incentives to build a global LoRaWAN could not have been done in any traditional way.  

If we price a gateway at $100 to buy and deploy, which is on the (very) cheap side, it would have cost a traditional network builder $28,740,000 to deploy today’s network.  Not every company has a cool $27 million to roll out a network.

That number, by the way, will probably shrink over time, stabilizing at (my GUESS) about 150,000 active gateways at any given time, probably providing the same coverage as you currently see with less redundancy.  

:::note
The reasons for the network's changing size go well beyond the scope of this article; if we meet for a coffee sometime I'll walk you through the whole arc of growth and all the deets.  For now, let's stick with exploring coverage.
:::

The ongoing maintenance for gateways on the network is paid for by the people who deployed them, just like any network.  Many are run off their provided internet, but some (including some of mine) are on mountain tops and require a cell backhaul.  

Those are ongoing costs borne by those who either want to earn cryptocurrency by adding something to their home network as well as those who, like me, use the network every day to pull in IoT data about my world, from weather stations to rain tank gauges to soil moisture.

Of course, you might zoom in on an area that doesn’t have a gateway and you want coverage there.  You can always deploy your own.  LoRaWAN gateways can be onboarded onto the Helium network, or you can buy a pre-onboarded one from a manufacturer like [RAK Wireless](https://store.rakwireless.com/products/rak-hotspot-v2-with-free-rak2270-sticker-the-ultimate-tracking-bundle?variant=43023959523526) and deploy it, in which case you’ll be able to use your coverage AND earn a little cryptocurrency.

That leads us to the Coverage map, which you’ll find by going to the green IoT tab at the top right, clicking on it to get the dropdown, and selecting “Coverage Map”.

![Coverage Explorer on Helium](/img/blog/2025-04-27-lets-explore-helium-explorer/helium-coverage-map.png)

### What Does a Gateway Cover?

On the `IoT` --> `Hotspot Map`, you can look for a specific Hotspot if you know its name. For example, `Quick Red Cobra` is one in downtown San Diego California, where I live.  Hotspots are assigned three-word names (Adjective-Color-Animal) randomly when they join the network.  This makes it easier for non-technical people to remember (and refer to) their hotspot.  Not everyone likes calling 'em a `UG56` or `SX1302 based` or the ol' `LPS8N`.

Let’s take a look at Quick Red Cobra and see what we can learn about the coverage this one gateway provides.

![Quick Red Cobra Helium Hotspot](/img/blog/2025-04-27-lets-explore-helium-explorer/quick-red-cobra.png)

The first thing you'll probably notice is all the green hexes.  Helium uses the Uber h3 hex system to map out coverage, focusing on the resolution 8, or `res 8` sized hex, which is about .73 square kilometers.  

Uber has written about this system extensively and open sourced it; you can [learn more about it here](https://www.uber.com/blog/h3/).

The very short version is that a hexagonal shape does a great job of consistently mapping a globe like our planet.  Using different size hexes allows you to map out an area of the world in any level of detail.

The sizes, or "resolutions", range from a `res 0` hex, of which there are only 110 in the world, each covering about 4.3 million square kilometers, all the way down to a `res 15` which has over 569 billion hexagons and maps to just under a square meter.

If you want to check out all the res sizes, [here’s the list](https://h3geo.org/docs/core-library/restable).

If it’s good enough for Uber to find you at the airport among the other hundred people waiting in the rideshare lot, it's good enough to provide an excellent map of coverage for a LoRaWAN.

Every hotspot (or gateway, as you like) will cover a given number of `res 8` hexes.  Using the current coverage calculator, the Helium Explorer estimates that Quick Red Cobra has an expected coverage range of 500 hexes with at least a -130 dBm signal.  Not bad! 

![Quick Red Cobra Hexes covered](/img/blog/2025-04-27-lets-explore-helium-explorer/quick-red-cobra-hexes-covered.png)

How do you know a hex is covered?  

You can use three methods; the easy way, the paid way, or the DIY way.

#### The Easy Way To Check Coverage

The easy way is to just look at what’s reported on this image.  In this case, the hotspot Quick Red Cobra has received data from 500 hexes.  This reported coverage data comes from a project called DIMO, which sells a vehicle data device called a Macaron that transmits information about a vehicle gathered from its OBD port via the Helium LoRaWAN.

If a vehicle with a DIMO Macaron has transmitted data from a hex covered by a gateway, that hex will show you the coverage strength and what gateways received the data.  

#### The Paid Way to Check Coverage

The paid way is to use your own device, like a [GLAMOS mapper](https://glamos.eu/).  You'd use your GLAMOS (or any mapper) to map a specific location, then assess the readings from your device using the GLAMOS app.

#### The DIY Way to Check Coverage

The DIY way is to build your own mapping solution.  That's fun and rewarding, but for most instances, especially in the developed world where a ton of Hotspots are already deployed with plenty of DIMO vehicle traffic to map out signal, the Helium Coverage map is good enough, or for places where you're not sure (or need specific indoor coverage) the GLAMOS app fills in any gaps.

### What About Coverage...HERE?

Now, it’s likely that you’re more interested in actual coverage than which gateway is providing it.  For that, you can go [back to the coverage map](https://world.helium.com/en/iot/coverage) and zoom in on any given area.

![Grenoble Helium Coverage](/img/blog/2025-04-27-lets-explore-helium-explorer/grenoble-helium-coverage.png)

We’ll use the town of Grenoble in France for our example. I’ve zoomed in to it, and clicked on one of the green hexes in the Les Charmettes area.  

Here we can see that 17 gateways provide coverage at better than -130 dBM for this hex, with a best RSSI of -83 dBm.

![17 Gateways In Grenoble](/img/blog/2025-04-27-lets-explore-helium-explorer/17-gateways-in-grenoble.png)

If you have specific dBm requirements, you can use the slider at the bottom right of the screen to set those.  For example, with a minimum RSSI of -108 dBm our redundancy drops to 9 gateways.  This is pretty much what I’d expect in the birthplace of LoRa; excellent coverage all around town.

Now, a global network does not equal ubiquitous coverage, and you’ll notice plenty of spots on the map where no coverage has been recorded.

If you need coverage in the mountains, or anywhere a vehicle can’t go, you can always grab any LoRaWAN device and fire off a few packets, or use the GLAMOS app, or buy a Helium Mapper from [RAK](https://store.rakwireless.com/products/field-mapper-for-helium-with-plug-play-and-3rd-party-mode-rak10701-h?variant=43920609444038) or [Seeed](https://www.seeedstudio.com/WioField-Tester-Kit-p-5282.html) to see what specific coverage is like. 

![Helium Field Mappers](/img/blog/2025-04-27-lets-explore-helium-explorer/helium-mappers.png)

You can also build your own Mapper [following instructions](https://docs.helium.com/iot/coverage-mapping/quickstart) over on the Helium Docs site. 

That wraps it for how to assess LoRaWAN coverage for anywhere in the world on the Helium network.  If you’d like to see coverage on other networks, excellent websites like [Coverage Map](https://www.coveragemap.net/) offer maps of [TTN](https://www.thethingsnetwork.org/) and other networks.  

Not every LoRaWAN offers public mapping information like this (many of them have their own internal tools to manage and monitor their private networks), but if you’re looking for an easy way to see if there’s the kind of LoRaWAN coverage you need for your IoT solution, the Helium World Explorer is an excellent place to start.

Happy coverage hunting!

:::info Author

**Nik Hawks** is a LoRaWAN Educator & Builder at [MeteoScientific](https://meteoscientific.com/). He writes to educate and delight people considering IoT, and to inspire other IoT nerds to build and deploy their own projects into the world. He runs a [podcast](https://pod.metsci.show) discussing all things LoRaWAN and is psyched to hear about what you're building, whether it's a one sensor playground or a million sensor rollout.

:::

--------------------------------------------------------------------------------

## How the U.S. Government Uses LoRaWAN
Path: blog/2025-01-20-How_the_US_Government_Uses_LoRaWAN.md
Type: blog
Intent: Discover how the U.S. government utilizes LoRaWAN technology to improve operational efficiency and address logistical challenges.
Summary: This blog post explores the U.S. government's adoption of LoRaWAN technology to enhance operational efficiency in military aviation and asset tracking. It highlights Cisco's role in providing secure, customizable solutions that comply with data sovereignty regulations. Targeted at IoT professionals and enthusiasts, the content emphasizes practical applications of LoRaWAN in real-world scenarios.
Difficulty: Intermediate
Keywords: LoRaWAN, IoT, Cisco, military aviation, asset tracking, data sovereignty, digital measurement, operational efficiency, logistical challenges
Technologies: Cisco, LoRaWAN, AWS GovCloud, Microsoft Azure, Docker
Prerequisites: Understanding of IoT concepts, Basics of LoRaWAN technology, Familiarity with data sovereignty regulations
Related Topics: Introduction to LoRaWAN, IoT Applications in Government, Securing IoT Data, LoRaWAN for Asset Tracking, Military Applications of IoT

Back in 2022, Mike Harttree, an IoT Architect at Cisco, [gave a talk at the LoRa Alliance's annual conference](https://youtu.be/Gglwe9sKpCA?si=9IS_YBpHCynIk2dT) about how the U.S. government is using LoRaWAN to enhance operational efficiency and tackle long-standing logistical challenges.  

With all the current fuss about Meshtastic and LoRa, I thought it'd be a good idea to review what has already been done.  Some of this is super basic (replacing fuel stick measurements with digital ones), but after all, that's what IoT is about; digitizing the measurements of our world.  

It doesn't have to be fancy, it just has to work.
<!-- truncate -->

**Introduction**  
The U.S. government has begun leveraging LoRaWAN technology to enhance operational efficiency and tackle long-standing logistical challenges. In a recent talk, Cisco's U.S. government IoT engineer detailed how LoRaWAN solutions are addressing critical needs in areas like military aviation and asset tracking. Here's a summary of how LoRaWAN is making an impact.  

---

**Cisco's Role in the LoRaWAN Ecosystem**  
Cisco has positioned itself as a significant player in the LoRaWAN space, with over 480 global customers deploying their gateways, routers, and software. The company's offerings include:  

1. **Industrial Asset Vision**: An all-in-one cloud-based LoRaWAN solution integrating Cisco sensors, gateways, and network servers for seamless deployment.  

2. **Customizable Enterprise Solutions**: Cisco collaborates with Actility and WMW to offer flexible deployments for sensitive use cases, including on-premises Docker-based configurations for government applications.  

---

**Solving Data Sovereignty and Security Challenges**  
In the U.S., government data must comply with strict sovereignty and security regulations, often necessitating that all data remain within national borders. Cisco addresses these requirements by:  

- Deploying Docker containers for network and application servers on government-approved private clouds like AWS GovCloud and Microsoft Azure for secure, localized data processing.  
- Ensuring the solutions meet certifications up to top-secret classification.  

---

**LoRaWAN in Military Aviation**  
Cisco's solutions are being implemented in U.S. military aviation to digitize processes and improve operational readiness. Key insights include:  

- **Aircraft Readiness Challenges**: The U.S. military aims for 80% aircraft readiness, but current rates are well below that for both legacy (F-22) and modern (F-35) fighter jets. LoRaWAN technology helps streamline maintenance and resource allocation.  
- **Fuel Truck Monitoring**: Previously reliant on manual measurements with sticks, jet fuel levels are now digitized with LoRaWAN sensors, ensuring accurate data and reducing errors.  
- **Asset Tracking**: From nitrogen carts to fuel trucks, LoRaWAN devices help locate critical resources and prevent logistical disputes between branches like the Navy and Marines.  

---

**Improving Safety and Efficiency**  
LoRaWAN is also being used to enhance safety and situational awareness:  

- **Tracking Personnel**: Sensors help locate personnel in challenging conditions, such as Marines operating in low visibility.  
- **Monitoring Equipment**: Vehicles, doors, and other assets are being digitized to ensure they are always accounted for.  

---

**Why LoRaWAN is Effective for Government Use Cases**  
Cisco's LoRaWAN deployments for the U.S. government underscore the technology's adaptability and scalability. Its ability to operate on-premises, comply with stringent security standards, and integrate with existing infrastructure makes it an ideal choice for mission-critical applications.  

---

**Takeaways**  
By digitizing processes and providing secure, localized solutions, LoRaWAN is enhancing military readiness, safety, and resource management. As adoption continues to grow, its role in ensuring mission-critical efficiency will only expand.

--------------------------------------------------------------------------------

## Actuarial IoT - When You Must Invest in IoT
Path: blog/2025-02-13-Actuarial_IoT.md
Type: blog
Intent: Understand the financial justification for implementing IoT solutions in utility management.
Summary: This blog post explores the economic rationale for adopting IoT technologies in utilities management across major U.S. cities. It highlights cost savings from IoT implementations, identifies building size thresholds for ROI, and targets CFOs and decision-makers in various sectors, emphasizing the importance of IoT in optimizing utility usage and enhancing operational efficiency.
Difficulty: Intermediate
Keywords: IoT adoption, utility management, cost savings, ROI IoT, building management systems, energy efficiency, water conservation, HVAC optimization, smart buildings
Technologies: Building Management Systems, IoT sensors, wireless technology, energy monitoring, HVAC systems
Prerequisites: Basics of IoT, Understanding utility management, Introduction to energy efficiency
Related Topics: IoT for Smart Cities, Implementing IoT in Retail, Energy Management Systems, LoRaWAN Applications in Utilities, Cost-Benefit Analysis of IoT

# Actuarial Justification for IoT in Business Utilities Management

Implementing IoT (Internet of Things) solutions for monitoring and controlling utilities can yield substantial cost savings in water, electricity, sewer, gas, and HVAC usage. 

This analysis provides data-backed justification for IoT adoption across five major U.S. cities –<!-- truncate --> **New York**, **Los Angeles**, **Chicago**, **Houston**, and **San Francisco** – focusing on utility rates, the business size thresholds where IoT becomes financially compelling, and ROI estimates for key sectors (retail, hotels, offices). 

The goal is to equip CFOs and financial decision-makers with clear evidence that IoT-based efficiency is not just sustainable but economically **essential**.

## Bottom Line Up Front

Utility prices in most cases mean even moderate inefficiencies translate to real dollars. For example, **1 CCF** of wasted water in NYC (~748 gallons) costs a business ~$12 in water/sewer charges ([Rates & Regulations - Water Board](https://www.nyc.gov/site/nycwaterboard/rates/rates-regulations.page#:~:text=2025%207%2F1%2F24,33)); in LA, closer to $15. 

Every **1,000 kWh** of unnecessary electrical usage in California costs ~$182; in New York ~$177; even in cheaper Illinois it’s ~$115. These recurring expenses establish a strong baseline for IoT savings potential.

## When Does IoT Make Financial Sense? (Thresholds by Size)

IoT implementations require upfront investment (sensors, devices, software integration), so a common question is: **at what point (in building size or headcount) do the savings justify the cost?** Key factors include the building’s square footage, occupancy, and baseline utility consumption:

- **Building Size Threshold:** Large facilities tend to waste more absolute energy/water, making IoT controls more immediately cost-effective. Traditionally, **buildings larger than 50,000 sq ft** were the domain of full Building Management Systems (BMS). 

In fact, over [90% of U.S. commercial buildings under 50k sq ft lack a proper BMS](https://buildings.honeywell.com/content/dam/hbtbt/en/documents/downloads/Small%20and%20medium%20buildings_WHP-21-12-2022.pdf) to manage energy, even though the **average commercial building wastes ~30%** of the energy it consumes. 

IoT now bridges this gap by offering “lighter” solutions suitable for **smaller buildings**. Modern IoT-based systems are **wireless and modular**, [avoiding the high CAPEX of traditional BMS](https://zenatix.com/how-is-iot-enabling-energy-savings-with-quick-roi/#:~:text=On%20the%20one%20hand%2C%20traditional,effectiveness%20and%20ease%20of%20deployment). This means **even buildings less than 50k sq ft or with modest staff** can achieve ROI, whereas before they couldn’t justify a full-scale automation system.

**Headcount and Usage:** More employees typically mean more devices, lighting, HVAC load, and water use (restrooms, etc.). However, headcount correlates imperfectly with usage – **square footage and operating hours are better metrics.** 

For example, a **10,000 sq ft retail store** with 5 employees open 90 hours a week may use far more energy than a **20,000 sq ft office** with 50 employees that operates 40 hours a week. **IoT becomes compelling when a business’s annual utility bills are high enough that a 10–20% savings offsets IoT project costs within a few years.** 

In practice, many find this threshold at roughly **$50,000+ in annual utility spend**, which could correspond to a ~**20,000+ sq ft office** or a **50,000 sq ft retail** building ([depending on usage intensity](https://www.costanalysts.com/average-retail-electric-bill/#:~:text=Example%3A)) . At that point, even a modest percentage savings translates to thousands of dollars.

:::note
An average U.S. retail building uses ~14.3 kWh electricity and 30.9 cubic feet of gas per square foot yearly ([Average Electric Cost for Retail Store](https://www.costanalysts.com/average-retail-electric-bill/#:~:text=According%20to%20the%20Energy%20Information,the%20climate%20they%20operate%20in)). 
:::

That equates to about **$1.76 per sq ft per year** in energy costs ([using national average $1.47 for electricity + $0.29 for gas](https://www.costanalysts.com/average-retail-electric-bill)). A **50,000 sq ft retail store** spends roughly **$90,000/year on energy**. If IoT solutions (smart thermostats, lighting controls, etc.) can save ~15%, that’s ~$13,500/year saved. 

Even after equipment and installation, this size store sees a **payback in under 2 years**. Smaller stores (5,000–10,000 sq ft) with maybe $10k–$20k annual energy bills might see a longer payback (3–5 years), but often still within the useful life of the IoT equipment.

:::note
Office buildings have slightly lower energy intensity than retail. A **100,000 sq ft “large” office** uses around [20 kWh of electricity and 24 cubic feet of gas per sq ft annually](https://remotefillsystems.com/how-much-power-does-an-office-building-use), costing on the order of ~$4 per sq ft (depending on local rates). That’s ~$400,000/year in utilities. 
:::

Even a **20,000 sq ft** office (perhaps ~100 employees) might spend $80k/year. As with retail, once you cross roughly **five figures in annual utility costs**, IoT controls become a “no-brainer” – many offices easily meet this with just HVAC and lighting. Notably, small offices (less than 5,000 sq ft) using ~13 kWh/sq ft ([Small and Midsize Offices - Orlando Utilities Commission](https://esource.bizenergyadvisor.com/article/small-and-midsize-offices#:~:text=Small%20and%20Midsize%20Offices%20,of%20electricity)) might have annual bills in the single-digit thousands; IoT can still help, but the **financial “burn” is less acute**. 

In those cases, IoT is often justified more by **comfort, sustainability goals, or preventive maintenance** than immediate cost savings.

## Bottom line: 

If your business occupies a mid-size or larger space – e.g. **>10,000 sq ft for retail**, **>15,000 sq ft for offices**, or **any size hotel** – you likely have enough utility expense that IoT improvements will **pay for themselves quickly**. Even smaller footprints with energy-intensive operations (restaurants, data closets, etc.) can benefit. 

The days when only skyscrapers or factories could justify automation are over – IoT has **lowered the entry barrier** so that **small and medium businesses** can see ROI as well ([How is IoT enabling energy savings with quick ROI? - Zenatix by Schneider Electric](https://zenatix.com/how-is-iot-enabling-energy-savings-with-quick-roi/#:~:text=2,buildings%2C%20ignoring%20the%20small%20infrastructures)) ([How is IoT enabling energy savings with quick ROI? - Zenatix by Schneider Electric](https://zenatix.com/how-is-iot-enabling-energy-savings-with-quick-roi/#:~:text=,energy%20savings)).

## Business Category Breakdown

Let’s examine how IoT-driven efficiency plays out in three key business categories – **retail, hotels, and offices** – which each have different usage patterns and opportunities. We’ll identify typical cost structures and how IoT can cut waste, with an eye on break-even points.

### Retail Spaces (Shops, Malls, Big-Box Stores)

**Usage Profile:** Retail properties consume about **18 kWh of electricity per sq ft annually** on average ([Why Retail Property Owners Should Consider Energy and Water Upgrades - Lone Star PACE](https://www.lonestarpace.com/why-retail-property-owners-should-consider-energy-and-water-upgrades-090221bfprt/#:~:text=As%20retail%20property%20owners%20adjust,of%20usage)) (or **~14.3 kWh** according to EIA ([Average Electric Cost for Retail Store [+ How to Cut Your Bill]](https://www.costanalysts.com/average-retail-electric-bill/#:~:text=According%20to%20the%20Energy%20Information,the%20climate%20they%20operate%20in)), varying by source) and significant heating fuel for large spaces. 

A notable ~**60% of that energy goes to lighting and HVAC** ([Why Retail Property Owners Should Consider Energy and Water Upgrades - Lone Star PACE](https://www.lonestarpace.com/why-retail-property-owners-should-consider-energy-and-water-upgrades-090221bfprt/#:~:text=As%20retail%20property%20owners%20adjust,of%20usage)) – lighting alone often ~25% ([Why Retail Property Owners Should Consider Energy and Water Upgrades - Lone Star PACE](https://www.lonestarpace.com/why-retail-property-owners-should-consider-energy-and-water-upgrades-090221bfprt/#:~:text=As%20retail%20property%20owners%20adjust,of%20usage)). Water use in retail is relatively low (primarily restrooms and maybe landscaping), but can still add up in malls or stores with public facilities.

**Costs:** As noted, U.S. retail spends about **$1.47/sqft on electricity and $0.29/sqft on gas annually** ([Average Electric Cost for Retail Store [+ How to Cut Your Bill]](https://www.costanalysts.com/average-retail-electric-bill/#:~:text=According%20to%20the%20Energy%20Information,the%20climate%20they%20operate%20in)) (climate dependent). 

In high-rate cities like LA or SF, that electricity cost can double. **Lighting, cooling, and heating comprise 70–84%** of a typical retail building’s energy use ([Average Electric Cost for Retail Store [+ How to Cut Your Bill]](https://www.costanalysts.com/average-retail-electric-bill/#:~:text=According%20to%20the%20Energy%20Information,the%20climate%20they%20operate%20in)), meaning efficiency here yields big wins.

**IoT Opportunities:** Smart lighting systems (LED retrofits with IoT controls, occupancy sensors, daylight harvesting) can dramatically cut lighting waste – e.g. dimming or shutting off lights in unoccupied store sections or after hours. 

Smart thermostats and HVAC controls adjust temperatures based on occupancy or even foot traffic patterns. IoT sensors on refrigeration units can optimize defrost cycles and alert to energy-wasting faults (important for grocery retail). 

**Savings & ROI:** Energy audits frequently find **15–25% savings** potential in retail via efficiency ([Why Retail Property Owners Should Consider Energy and Water Upgrades - Lone Star PACE](https://www.lonestarpace.com/why-retail-property-owners-should-consider-energy-and-water-upgrades-090221bfprt/#:~:text=You%20have%20an%20opportunity%20to,month%2C%20impacting%20your%20bottom%20line)). IoT control of lighting/HVAC can often realize **15–20% reduction in energy use** without compromising comfort or sales ambiance. 

For a big retail store spending $90k/year on energy, a 20% cut saves ~$18k annually – directly boosting profit. **Payback periods** are often in the **1–3 year range** for IoT lighting and HVAC upgrades in retail. For example, simply optimizing lighting schedules and HVAC setpoints with IoT can shave thousands off the monthly bill for a big-box retailer. 

Financing tools like C-PACE are even enabling **immediate positive cash flow** by spreading project costs, reinforcing that these upgrades “pay for themselves.” In short, for retail chains and large stores, IoT-based energy management is **financially compelling** – it turns one of the largest operating costs into an opportunity for savings.

### Hotels and Lodging

**Usage Profile:** Hotels are utility-intensive, operating 24/7 with varying occupancy. U.S. hotels and motels consume roughly **14 kWh of electricity and 49 cubic feet of natural gas per square foot each year** ([Solved Hotels and motels typically use an average of 14 | Chegg.com](https://www.chegg.com/homework-help/questions-and-answers/hotels-motels-typically-use-average-14-kilowatt-hours-kwh-electricity-49-cubic-feet-natura-q87845412#:~:text=Chegg,square%20foot%20annually%2C%20according)) – *one of the highest energy intensities of any commercial building*. They also use large volumes of water for guest rooms (showers, toilets), laundry, pools, etc., all of which then require sewer treatment.

**Costs:** Utilities can account for 4–6% of a hotel’s operating costs or more. Using the above usage figures, a **100,000 sq ft hotel** (around ~150 rooms, 4 floors) might use ~1.4 million kWh and 4.9 million cubic ft of gas annually. 

At California rates (~18¢/kWh, ~$1/therm), that’s on the order of **$300k+ per year** in energy costs. Water/sewer bills in a large hotel can also be hefty (millions of gallons per year). This high baseline means **even single-digit percentage improvements** yield big dollar savings.

**IoT Opportunities:** Hotels benefit greatly from **smart HVAC and occupancy-based controls**. Guestrooms are often unoccupied for large parts of the day – IoT occupancy sensors and smart thermostats can set back temperature setpoints when rooms are empty or guests are asleep, without compromising comfort. 

Smart hotel thermostats and integrated energy management systems (EMS) have proven especially effective: they **continuously analyze thermal behavior, weather, and peak loads to optimize HVAC in real-time** ([](http://verdant.copeland.com/wp-content/uploads/2018/04/Increasing-Profitability-with-IoT-Technology.pdf#:~:text=While%20smart%20thermostats%20and%20occupancy,6%2C%20and%20generate%20some%20of)) ([](http://verdant.copeland.com/wp-content/uploads/2018/04/Increasing-Profitability-with-IoT-Technology.pdf#:~:text=IoT%20energy%20savings%2C%20moreover%2C%20are,Other%20HVAC%20devices%20Water%20consumption)). IoT leak sensors on pipes and fixtures can catch running toilets or drips that would otherwise go unnoticed (important for water conservation). 

Common area lighting, pool pumps, and even kitchen equipment can be IoT-scheduled or monitored for efficiency. Hotels also leverage IoT for **predictive maintenance** – e.g. sensing when a chiller or boiler is losing efficiency and needs tune-up, avoiding energy waste and downtime.

**Savings & ROI:** The potential is dramatic. Smart energy management systems (like Verdant’s hotel IoT solution) **can reduce hotel energy costs by up to 20%** ([](http://verdant.copeland.com/wp-content/uploads/2018/04/Increasing-Profitability-with-IoT-Technology.pdf#:~:text=EI,Verdant%20Energy%20Management%20Thermostats%20Lightning)). Hotels that have deployed IoT thermostats and occupancy sensors routinely see **10–20% heating/cooling savings** with **payback periods of 12–24 months** – among the fastest in the industry ([](http://verdant.copeland.com/wp-content/uploads/2018/04/Increasing-Profitability-with-IoT-Technology.pdf#:~:text=EI,Verdant%20Energy%20Management%20Thermostats%20Lightning)). For instance, a case study showed a hotel cutting **20% of its overall electric bill**, translating to ~$14.5k saved in the first year for one limited-service property ([](http://verdant.copeland.com/wp-content/uploads/2018/04/Increasing-Profitability-with-IoT-Technology.pdf#:~:text=savings%20after%20year%20one%20are,By%20the)). 

Those savings continued each year, essentially paying back the IoT investment quickly and then compounding. Another analysis by Schneider Electric’s Zenatix notes that IoT-based building solutions often achieve **ROI in 12–18 months**, whereas older BMS took 3–5 years ([How is IoT enabling energy savings with quick ROI? - Zenatix by Schneider Electric](https://zenatix.com/how-is-iot-enabling-energy-savings-with-quick-roi/#:~:text=periods%20%2812,5%20years)). Beyond energy, water savings (from detecting leaks or optimizing laundry cycles) can add to the ROI – and in cities with Tiered water rates or fines for overuse, avoiding waste has direct payback. 

In many cases, large hotels see annual savings in the six figures, meaning IoT investments can pay for themselves in **well under 2 years** and then continue saving money long-term.

### Offices (Corporate and Commercial Office Buildings)

**Usage Profile:** Office buildings primarily use electricity for lighting, computers, and HVAC, and use natural gas or steam for heating. Occupancy is typically 8–12 hours on weekdays, with off-hours presenting big savings opportunities. 

Energy use intensity for offices averages **15–22 kWh per sq ft/year** (lower for small offices ~13 kWh, higher for large offices ~20 kWh) ([Small and Midsize Offices - Orlando Utilities Commission](https://esource.bizenergyadvisor.com/article/small-and-midsize-offices#:~:text=Small%20and%20Midsize%20Offices%20,of%20electricity)) ([How Much Power Does An Office Building Use? - Remote Fill Systems](https://remotefillsystems.com/how-much-power-does-an-office-building-use/#:~:text=Systems%20remotefillsystems,annually%20by%20large%20office%20buildings)), plus heating fuel. Water use in offices is mostly sanitary (bathrooms) and some cooling tower water for HVAC in larger buildings.

**Costs:** For an **office tower in NYC or SF**, annual electricity bills can reach millions of dollars. 

Even a **50,000 sq ft office** in Chicago might spend on the order of $100k/year across electricity and heating. Notably, **about 30% of the energy in the average office is wasted** due to inefficiencies ([Small & Medium Buildings Report | Honeywell](https://buildings.honeywell.com/content/dam/hbtbt/en/documents/downloads/Small%20and%20medium%20buildings_WHP-21-12-2022.pdf#:~:text=%E2%80%A2%20Reporting%20on%20small%20and,noted%20that%20the%20average%20commercial)) – e.g. lights left on, HVAC running in empty spaces, etc.

**IoT Opportunities:** Offices can leverage a **suite of IoT solutions**: Smart lighting systems that dim or shut off lights in unoccupied rooms or when daylight is sufficient; occupancy sensors and scheduling to power down HVAC in zones that are empty or after hours; smart plugs to cut power to idle equipment (copiers, coffee machines) overnight; and air quality sensors to optimize ventilation (bring in fresh air only as needed rather than running fans full-time). 

Modern **AI-driven building management** can even adjust in real-time – for example, learning daily occupancy patterns and **reducing HVAC output in lightly used areas to save energy**, or pre-cooling a building just enough to avoid a demand charge peak ([AI-Powered Building Systems Are Slashing Energy Costs by 30% - Industrial Build News](https://www.build-news.com/smart-infrastructure-and-urban-development/smart-building-technologies/ai-powered-building-systems-are-slashing-energy-costs-by-30/#:~:text=Advanced%20AI%20algorithms%20are%20revolutionizing,control%20over%20their%20building%E2%80%99s%20performance)) ([AI-Powered Building Systems Are Slashing Energy Costs by 30% - Industrial Build News](https://www.build-news.com/smart-infrastructure-and-urban-development/smart-building-technologies/ai-powered-building-systems-are-slashing-energy-costs-by-30/#:~:text=minimizing%20energy%20waste,improving%20efficiency%20strategies%20over%20time)). Predictive maintenance via IoT (monitoring vibration/efficiency of fans, pumps, compressors) prevents equipment faults that can cause energy spikes.

**Savings & ROI:** Smart office implementations regularly achieve **15–30% energy savings** compared to traditional control ([AI-Powered Building Systems Are Slashing Energy Costs by 30% - Industrial Build News](https://www.build-news.com/smart-infrastructure-and-urban-development/smart-building-technologies/ai-powered-building-systems-are-slashing-energy-costs-by-30/#:~:text=This%20dynamic%20approach%20typically%20results,equipment%20failures%20and%20extends%20the)). A McKinsey study found that connected building technologies can trim **office building energy use by 20–25% on average** (and up to 50% in some cases) ([Next-gen smart buildings will run cheaper and greener - Autodesk](https://www.autodesk.com/design-make/articles/smart-building#:~:text=Next,)). 

These reductions have huge ROI because offices often pay premium rates for peak usage – IoT systems that **shave peak demand** (e.g. by precooling before peak hours and dialing back at expensive times) directly reduce utility bills. 

Many offices see a **payback in ~2 years or less** for lighting + HVAC IoT retrofits. For example, an AI-based HVAC optimization in an office portfolio can yield ~30% savings with ROI under 3 years ([Smart Building - IOT solutions - Ewattch](https://ewattch.com/en/solutions/solution-energetique-batiments-tertiaires/#:~:text=Smart%20Building%20,Start%20your)), and some IoT providers advertise ROI less than **3 months** for certain optimizations in commercial buildings ([Smart Building - IOT solutions - Ewattch](https://ewattch.com/en/solutions/solution-energetique-batiments-tertiaires/#:~:text=Smart%20Building%20,Start%20your)) (likely in very wasteful pre-IoT scenarios). 

Even **small offices** benefit: cloud-based IoT building platforms are allowing small/medium offices to get **BMS-like savings (20–30% cuts) at a fraction of the cost** ([How is IoT enabling energy savings with quick ROI? - Zenatix by Schneider Electric](https://zenatix.com/how-is-iot-enabling-energy-savings-with-quick-roi/#:~:text=2,buildings%2C%20ignoring%20the%20small%20infrastructures)) ([How is IoT enabling energy savings with quick ROI? - Zenatix by Schneider Electric](https://zenatix.com/how-is-iot-enabling-energy-savings-with-quick-roi/#:~:text=,energy%20savings)). 

One whitepaper noted a small office pilot that **achieved 29% energy savings in under 3 months** using an IoT retrofit ([Small & Medium Buildings Report | Honeywell](https://buildings.honeywell.com/content/dam/hbtbt/en/documents/downloads/Small%20and%20medium%20buildings_WHP-21-12-2022.pdf#:~:text=Achieved%2029,an%20average%20of%204%2C273%20kilowatt)). The **bottom line for offices** is that IoT not only pays for itself but often contributes to significant operational cost reduction, improved occupant comfort (which can indirectly boost productivity), and even higher property value – efficient buildings command higher rents and asset values ([Impact of Energy and Water Savings on Multifamily Properties | WegoWise](https://www.wegowise.com/resources/financial-impact-of-energy-and-water-savings#:~:text=,property%20to%20an%20entire%20portfolio)) ([Impact of Energy and Water Savings on Multifamily Properties | WegoWise](https://www.wegowise.com/resources/financial-impact-of-energy-and-water-savings#:~:text=Energy%20and%20water%20benchmarking%20and,a%20fast%20time%20to%20value)).

## Other Industries with Strong IoT Justification

While retail, hospitality, and offices are prime candidates, **many other industries** also see exceptional ROI from IoT-driven efficiency:

- **Manufacturing & Industrial:** Factories and industrial plants often have *massive* energy consumption (electric motors, process heat, compressed air systems) and water usage (for cooling or processes). 

IoT sensors enable **predictive maintenance** (avoiding inefficient operation and downtime) and continuous energy monitoring. According to Deloitte, IoT-based predictive maintenance can cut maintenance costs **up to 25%** and reduce unplanned downtime by **up to 50%** ([Investing in the Future: How Predictive Maintenance Can Drive ROI](https://hexastate.com/investing-in-the-future-how-predictive-maintenance-can-drive-roi/#:~:text=ROI%20hexastate,downtime%20by%20up%20to%2050)) – improvements that directly protect revenue and reduce waste. 

The ROI here comes not only from utility savings but from **increased production uptime**. Many manufacturers see IoT projects pay off within 1–2 years just from maintenance savings and energy efficiency (e.g. shutting off idle equipment, optimizing HVAC in warehouses, etc.). 

Industrial facilities also often face demand charges; IoT controls can stagger equipment startups and **reduce peak load**, saving on those charges.

- **Data Centers & Tech Facilities:** Data centers are energy hogs (powering servers and cooling them). IoT sensors and AI can optimize **cooling systems (HVAC)** – for example, adjusting setpoints and airflow to match server load or using outside air cooling when conditions allow. 

Even a 1% improvement in PUE (power usage effectiveness) can translate to tens of thousands of dollars in large data centers. IoT monitoring can also prevent thermal runaway or pinpoint hot spots to avoid overcooling. 

Many data centers have implemented IoT-driven dynamic cooling and seen **payback in well under 2 years** due to the enormous energy baseline.

- **Healthcare (Hospitals):** Hospitals operate 24/7 with intensive HVAC and water demands (sterilization, laundry, etc.). They often have older infrastructure that runs continuously. 

IoT building management in hospitals can safely reduce HVAC usage in unoccupied zones (or at night in administrative areas), monitor medical refrigeration units, and detect water leaks (important for infection control and cost). 

Given that hospitals in high-cost regions can spend $5–$10 million a year on utilities, even a 10% savings is huge. Many hospitals are finding IoT upgrades (sometimes funded through energy performance contracts) that deliver ROI in ~3 years and then free up funds to reinvest in patient care.

- **Multifamily Residential:** Apartment complexes and commercial residential buildings benefit from IoT through smart thermostats, leak detectors, and boiler controls. While not “industrial,” this sector sees strong financial cases for IoT because utility costs often either eat into NOI or are passed to tenants who demand efficiency. 

Analytics on energy and water use in multifamily buildings can **increase NOI and property value significantly**, with benchmarking software creating **payback in mere months** for owners ([Impact of Energy and Water Savings on Multifamily Properties | WegoWise](https://www.wegowise.com/resources/financial-impact-of-energy-and-water-savings#:~:text=,property%20to%20an%20entire%20portfolio)). For example, finding and fixing water leaks or insulating a building after IoT data analysis can yield immediate savings that increase an apartment building’s net income (and thus its appraised value) by hundreds of thousands ([Impact of Energy and Water Savings on Multifamily Properties | WegoWise](https://www.wegowise.com/resources/financial-impact-of-energy-and-water-savings#:~:text=,property%20to%20an%20entire%20portfolio)) ([Impact of Energy and Water Savings on Multifamily Properties | WegoWise](https://www.wegowise.com/resources/financial-impact-of-energy-and-water-savings#:~:text=,property%20to%20an%20entire%20portfolio)).

- **Agriculture and Irrigation:** In farming, IoT soil moisture sensors and smart irrigation systems drastically reduce water usage (sometimes by 30–50%) while improving crop yield. Water is a major cost in agriculture; IoT systems often pay for themselves in **one growing season** by eliminating overwatering and runoff. 

This may be outside typical “business office” environments, but for agribusiness CFOs the financial logic is analogous: **spend on IoT to save on water** (and energy for pumping) – it’s a quick ROI and hedges against drought risks.

In each of these sectors, IoT projects are often **self-funding through savings**. A telling statistic: **92% of enterprises report positive ROI** from IoT implementations, according to a wide-ranging survey ([75F: The World's Most Advanced IoT Building Automation](https://www.75f.io/#:~:text=More)). 

The industries above are standouts because their pre-IoT utility costs (or maintenance costs) are so high that even modest efficiency gains translate into big financial wins.

## ROI Estimates and Payback Periods

A data-backed financial analysis is critical for CFO approval. Fortunately, IoT efficiency investments generally have **attractive ROI profiles**. Here are some key points on returns and payback periods, along with examples:

- **Typical Payback:** Most IoT energy management projects for buildings see payback within **1 to 3 years**. Lighting retrofits with IoT controls often pay back in ~1–2 years (thanks to power savings and utility rebates). 

HVAC IoT upgrades are often 2–3 years unless major equipment replacement is involved. These periods are **well within the lifespan** of the equipment, meaning strong net present value. 

In fact, IoT-based solutions often **outperform** traditional capital projects on ROI – for example, IoT controls (12–18 month payback) vs. a chiller replacement (maybe a 7+ year payback).

- **Fast Payback Cases (Months, Not Years):** There are numerous instances where IoT projects have **paid for themselves in a matter of months**. For example, an IoT retrofit in a large commercial building that optimized cooling and lighting achieved **15% energy savings (~400,000 kWh/year)** and paid back in **just 5 months** ([Energy Efficient Cities: Building-Level Solutions, Microgrids and IoT](https://www.iotforall.com/energy-efficient-cities-building-solutions-microgrids-iot#:~:text=IoT%20www,that%20building%20cooling%20and)). 

Another case: a building analytics software identified operational tweaks that created **an immediate reduction in utility bills, achieving payback in under 6 months** ([Impact of Energy and Water Savings on Multifamily Properties | WegoWise](https://www.wegowise.com/resources/financial-impact-of-energy-and-water-savings#:~:text=,property%20to%20an%20entire%20portfolio)). These “low-hanging fruit” scenarios are not universal, but they highlight that *some IoT improvements start contributing to the bottom line almost immediately*. 

Usually, fast-payback items include things like scheduling controls (which cost little to implement but save a lot by turning things off) and fixing blatant issues (like a mis-programmed HVAC system running 24/7). 

It's not uncommon for IoT investments to become net-positive within the same fiscal year of implementation for the most wasteful facilities.

- **Multi-Year ROI and TCO:** When evaluating multi-year impact, IoT shines even more. A project with a 2-year payback yields a 50% annual ROI; over a 10-year period, that’s a huge cumulative return. 

IoT systems also often extend equipment life (through reduced run-time and predictive maintenance), which avoids capital expenditures – those avoided costs effectively improve the ROI when viewed holistically. For instance, if smart monitoring prevents a $50k catastrophic failure of a boiler that would have happened in year 3, that “saving” should be included. 

Many CFOs therefore consider not just direct utility savings but also **risk mitigation ROI** (avoided damage, downtime, compliance fines, etc.) which IoT provides by giving early warning of issues.

- **ROI in Financial Terms:** CFOs may translate savings into familiar metrics like **increase in EBITDA or asset value**. Energy savings drop straight to the bottom line. 

For a property owner, reducing operating costs by $1 can increase asset value by $10–$20 (using cap rates of 5–10%). We saw an example where **$69,700 in annual energy/water savings raised a multifamily property’s value by $610k–$1.16M** ([Impact of Energy and Water Savings on Multifamily Properties | WegoWise](https://www.wegowise.com/resources/financial-impact-of-energy-and-water-savings#:~:text=,property%20to%20an%20entire%20portfolio)). 

Similar logic applies to commercial buildings – an office building that saves $100k/yr in utilities could be worth $1–2 million more. Thus, IoT isn’t just cutting this year’s expenses, it’s **building long-term enterprise value**. 

The ROI can be communicated in those terms for clarity – e.g., “This IoT upgrade has a 50% IRR and increases our building’s appraised value by $X million.”

- **Real-world Benchmarks:** 
  - *Hotels:* 15–20% energy savings, **ROI ~50–100%** (payback 1–2 years) ([](http://verdant.copeland.com/wp-content/uploads/2018/04/Increasing-Profitability-with-IoT-Technology.pdf#:~:text=EI,Verdant%20Energy%20Management%20Thermostats%20Lightning)). 
  - *Offices:* 10–30% savings, ROI often **30–80%** (payback ~1.5–3 years). Many see positive cash flow from year 1 due to financing or phased roll-outs.
  - *Retail:* 10–20% savings, ROI ~20–60% (payback ~2–4 years, faster for larger stores). The variance depends on store size and hours – 24-hour big boxes save more absolute energy and thus have faster ROI.
  - *Industrial:* ROI can be extremely high when preventing costly downtime – often justified on reliability alone, with energy savings as a bonus (difficult to generalize a number, but many have seen multi-hundred-percent ROI just from avoiding one big failure).

## Conclusion

From the above analysis, it’s clear that **IoT-driven efficiency is a financially savvy move** for businesses in New York, Los Angeles, Chicago, Houston, San Francisco, and beyond. High utility rates in many of these cities magnify the value of saving each kilowatt-hour or gallon. 

IoT implementations can often be justified purely on an actuarial cost-savings basis: by reducing waste (often ~15–30%), they slash recurring expenses and pay back rapidly. 

Crucially, we identified that even mid-sized facilities (tens of thousands of square feet, or utility bills in the mid five-figures) reach the threshold where IoT is compelling. 

No longer is IoT only for marquee skyscrapers or giant factories – **it’s now an essential tool for cost control and sustainability in everyday businesses.** Retail stores can curtail one of their largest operating costs, hotels can protect their thin margins from energy volatility, and offices can turn facility management into a source of savings. 

Other industries like manufacturing, data centers, and healthcare are similarly ripe for IoT optimizations that bolster the bottom line.

For CFOs and financial decision-makers, the message is: **investing in IoT solutions is not an experimental tech spree, but a prudent financial strategy**. The data shows that these investments yield tangible returns – often boosting annual profits after a short payback period and continuing to generate savings year after year. 

In many cases, IoT upgrades can be structured so that savings exceed costs from day one (via smart financing or phased implementation), making the decision even easier.

In sum, implementing IoT for utility management is a **cost-saving measure with proven ROI**, vital for business sustainability and competitiveness. Companies that embrace it will not only reduce expenses and improve their efficiency metrics; they’ll also enhance asset values and resilience against future utility cost increases. 

As illustrated with the rates and examples for NYC, LA, Chicago, Houston, and SF, the numbers speak clearly: **IoT is a smart investment that pays for itself – often quicker than expected – and continues paying dividends in operational savings.** 

## Utility Cost Landscape in Major Cities

Utility rates vary widely by city and region. To compare costs, we’ve converted water and sewer rates to a common unit (CCF, or hundred cubic feet; *1 CCF ≈ 748 gallons*). Electricity is given in cents per kilowatt-hour (¢/kWh) and natural gas in dollars per therm (1 therm ≈ 100 cubic feet of gas). Below are **official utility rates** in each city:

### New York City (NYC)

**Water:** $4.49 per CCF; **Sewer:** $7.14 per CCF (159% of water rate) Combined, [NYC businesses pay about **$11.63 per CCF**](https://www.nyc.gov/site/nycwaterboard/rates/rates-regulations.page#:~:text=2025%207%2F1%2F24,33) of water consumed. 

**Electricity:** ~17.7¢/kWh on average for commercial customers ([Electric Power Monthly - U.S. Energy Information Administration (EIA)](https://www.eia.gov/electricity/monthly/epm_table_grapher.php?t=epmt_5_6_a#:~:text=New%20York%2024,51)). 

**Natural Gas:** Approximately $1.00–$1.20 per therm (varies seasonally). New York’s water/sewer costs are relatively high (FY2025 rates rise to $4.87 + $7.74 = **$12.61/CCF** ([Rates & Regulations - Water Board](https://www.nyc.gov/site/nycwaterboard/rates/rates-regulations.page#:~:text=2025%207%2F1%2F24,33))), making water efficiency critical.

### Los Angeles (LA)

**Water:** ~$9.39 per CCF ([City of LA, commercial Tier-1 rate mid-2024](https://www.ladwp.com/account/customer-service/water-rates/schedule-c-commercial-industrial-governmental)). LADWP uses tiered pricing; heavy users pay up to ~$13.4/CCF in higher tiers. 

**Sewer:** $5.80 per CCF ([city wastewater charge](https://sanitation.lacity.gov/cs/groups/sg_rates/documents/document/y250/mduw/~edisp/cnt050142.pdf)). Together, LA businesses effectively face ~$15 per CCF for water/sewer. 

**Electricity:** ~18.2¢/kWh for commercial accounts ([California average](https://www.eia.gov/electricity/monthly/epm_table_grapher.php?t=epmt_5_6_a#:~:text=match%20at%20L384%20California%2032,68)). 

**Natural Gas:** ~$1.00–$1.10 per therm (SoCal Gas rates, varying with market prices). 

### Chicago

**Water:** $35.10 per 1,000 cubic feet, i.e. **$3.51 per CCF** ([
    City of Chicago :: Water and Sewer Rates
](https://www.chicago.gov/city/en/depts/fin/supp_info/utility-billing/water-and-sewer-rates.html#:~:text=Water%20Rate%20per%201%2C000%20Cubic,Feet)); 

**Sewer:** charged at 100% of water usage ([dollar-for-dollar](https://www.chicago.gov/city/en/depts/fin/supp_info/utility-billing/water-and-sewer-rates.html#:~:text=For%20both%20metered%20and%20non,front%20of%20the%20utility%20bills)). This equals **$3.51 per CCF** for sewer, or about **$7.02 per CCF combined**.  Chicago’s water costs per volume are lower than coastal cities. 

**Electricity:** ~11.5¢/kWh [on average for commercial users in Illinois](https://www.eia.gov/electricity/monthly/epm_table_grapher.php?t=epmt_5_6_a#:~:text=New%20York%2024,51). 

**Natural Gas:** ~$0.95–$1.00 per therm ([Peoples Gas in Chicago has a 2024 cap at ~$0.97/therm](https://www.peoplesgas.com/4a5cbb/contentassets/76b6b8638ec743a18f041648c4c29bd1/july-2024-commercial-rates.pdf#:~:text=,%E2%80%A2%20Swing)).

### Houston 

**Water:** tiered by usage; in 2022 commercial rates were ~$5.55 per 1,000 gallons, rising to over $7.00 per 1,000 gallons by 2024 ([](https://www.houstontx.gov/citysec/HPW/ratestable.pdf#:~:text=Industrial%20All%20Usage%205,39)) (roughly **$5.3 per CCF**). 

**Sewer:** similarly rising into the ~$9+ per 1,000 gal range by 2024 ([](https://www.houstontx.gov/citysec/HPW/ratestable.pdf#:~:text=match%20at%20L294%20Commercial%20All,60)) (~**$6.9 per CCF**). Combined, Houston’s water/sewer runs around **$12–$13 per CCF** for high-volume users. 

**Electricity:** ~8.7¢/kWh average for Texas commercial customers ([energy costs are low due to deregulated markets](https://www.eia.gov/electricity/monthly/epm_table_grapher.php?t=epmt_5_6_a#:~:text=Texas%2015,71)). 

**Natural Gas:** ~$0.50–$0.60 per therm (Texas enjoys low gas prices). *Houston’s relatively cheap electricity makes HVAC efficiency more about peak demand management than unit cost, while water is a growing expense.* 

### San Francisco (SF)

**Water:** SFPUC charges uniform rates for businesses; [wholesale cost to the city is ~$5.21/CCF](https://www.cityofpaloalto.org/files/assets/public/v/1/utilities/rates-schedules-for-utilities/prop-218-notice-fy25-final.pdf#:~:text=It%20is%20anticipated%20that%20beginning,to), with retail rates higher after distribution costs (on the order of ~$7–$8+ per CCF for end-users). 

**Sewer:** San Francisco’s combined sewer/stormwater system leads to high wastewater fees that depend on discharge volume and strength. For typical commercial waste strength, sewer rates per CCF can **exceed water rates** (often making total water + sewer > **$15 per CCF**). 

**Electricity:** ~18¢/kWh for commercial users ([California average](https://www.eia.gov/electricity/monthly/epm_table_grapher.php?t=epmt_5_6_a#:~:text=match%20at%20L384%20California%2032,68)) note SF’s electricity is delivered by PG&E or CleanPowerSF at similar averages. 

**Natural Gas:** ~$1.10–$1.20 per therm (PG&E gas rates). *San Francisco has some of the highest combined water-sewer costs, so water efficiency and leak detection IoT can yield particularly large savings.*

--------------------------------------------------------------------------------

## Networked Synesthesia
Path: blog/2025-02-02-Networked_Synesthesia.md
Type: blog
Intent: Explore innovative applications of LoRaWAN in enhancing spatial awareness through sensory feedback.
Summary: This blog post discusses the concept of synesthesia and its potential integration with LoRaWAN technology to enhance spatial awareness in military and rescue operations. By utilizing vibratory feedback devices, such as bracelets, users can perceive their surroundings through tactile sensations. The content targets IoT enthusiasts and professionals interested in practical applications of LoRaWAN for improving situational awareness.
Difficulty: Intermediate
Keywords: LoRaWAN, IoT, vibratory feedback, spatial awareness, military applications, NeoSensory vest, Reticulum, wireless protocol, sensor technology
Technologies: LoRa, Reticulum, NeoSensory, vibratory motors, LoRaWAN gateway
Prerequisites: Basic understanding of LoRaWAN, Familiarity with IoT concepts, Knowledge of sensor technology
Related Topics: LoRaWAN applications in emergency services, IoT sensor deployment strategies, Integrating Reticulum with LoRaWAN, Advancements in wearable technology for IoT, Spatial awareness technologies in IoT

Synethesia is when the expereince of one sense triggers another.  The classic example is seeing colors when hearing music, but you could taste words, smell sounds, or feel textures when you see colors. 

A recent excellent [Freakonomics episode with David Eagleman](https://freakonomics.com/podcast/feeling-sound-and-hearing-color/) sparked an idea on how to combine synthestia with LoRaWAN for spatial awareness in the military context. 
<!-- truncate -->
Dr. Eagleman described the develpment of the NeoSensory vest that captured sound and converted it to vibratory feedback on the torso, allowing deaf people to hear. We're all bathed in sound, but deafness is the inability to translate it into, well, sounds we hear.

By placing vibratory motors through a vest and then translating sounds into a felt experience, the brains of the users "livewired" themselves to hear sound again.  Pretty rad.

Dr. Eagleman managed to get that down from a vest to a bracelet with vibratory motors evenly spaced around the bracelet.  Interestingly, where a vibration is felt can be shifted between 2 motors by changing the power of the buzz in each motor.  The stronger the buzz (comparatively), the closer to that motor the sensation is felt.  This effectively gave them way more "buzz points" which translated into a more granular ability to translate incomin sound waves into signals the brain could use.

Now, if you can hear sounds with a bracelet, it's reasonable to imagine that you could get a sense of other things, including spatial awareness of where other people are if they're transmitting their position.

LoRa is a potential excellent wireless protocol for this; it's robust, low energy, can be encrypted (or could run through [Reticulum](https://reticulum.network/?) so it's definitely encrypted, and long range (that's what LoRa is short for).

Imagine an element of soldiers all wearing a bracelet (or vest, or whatever) who could literally feel where other soldiers in their element were?  

Obviously this could be used by firefighters and other rescue elements in chaotic situations.

By running this over LoRa (or a LoRaWAN) and integrating Reticulum to use multiple communications protocols and integrate other assets (an overhead drone with a LoRaWAN gateway, for example), you could potentially have an extraordinary advantage over a wide area whenever you need to coordinate human activity.

Pretty cool use case, eh?  Keep on crushing out there, and if you need help with IoT sensors, whether it's designed, deployment, or business-fit, please reach out.

:::info Author

**Nik Hawks** is a LoRaWAN Educator & Builder at [MeteoScientific](https://meteoscientific.com/). He writes to educate and delight people considering IoT, and to inspire other IoT nerds to build and deploy their own projects into the world. He runs a [podcast](https://pod.metsci.show) discussing all things LoRaWAN and is psyched to hear about what you're building, whether it's a one sensor playground or a million sensor rollout.

:::

--------------------------------------------------------------------------------

## Four Ways To Improve Your LoRaWAN Business
Path: blog/2025-04-30-4-Ways-To-Improve-Your-LoRaWAN-Business.md
Type: blog
Intent: Discover strategies to enhance your LoRaWAN business by addressing customer needs and increasing awareness.
Summary: This blog post outlines four key strategies to improve your LoRaWAN business, emphasizing the importance of understanding customer problems and increasing awareness of LPWAN technology. Targeted at business owners and integrators, it provides practical advice on starting with impactful solutions and leveraging data from multiple sensors to expand offerings.
Difficulty: Intermediate
Keywords: LoRaWAN, LPWAN, IoT solutions, sensor technology, customer engagement
Technologies: LoRa Alliance, TTN, Macnman, Harmony Analytica, The Business of LoRaWAN podcast
Prerequisites: Understanding of LoRaWAN technology, Basic IoT concepts, Knowledge of sensor applications
Related Topics: LoRaWAN deployment strategies, IoT business models, Maximizing sensor data in IoT, Challenges in LPWAN adoption

The number one threat to LoRaWAN isn’t technical issues or competition, according to Alper Yegin, CEO of the [LoRa Alliance](https://lora-alliance.org/).

It’s **awareness**.  Not enough people know about LPWANs, let alone LoRaWAN.  What does that mean for you, the business owner who is deploying LoRaWAN to service clients?<!-- truncate -->

*This is for anyone exploring or deploying LoRaWAN as part of a business solution—whether you’re an integrator building out a product, a founder launching a sensor-powered service, or a company exploring IoT for compliance, energy savings, or smarter operations.*

### Start With A Problem

As Rish Chauhan, head of Business Development at [TTN](https://www.thethingsnetwork.org/) says, you have to “start with a problem.”

It’s not magic; that’s the whole purpose of a business: To solve somebody else’s problems.  

People buy cars to solve the problem of getting to work or the grocery store or the gym.  They don’t need to know how an alternator works, or whether or not there’s an M20B25 or 27 engine in a 1979 BMW 320i.  The car gets them to work; they don’t care exactly how it does it.

That’s something those of us in the LoRaWAN world can forget.  We spend a lot of time geeking out on the fascinating tech of it, but as Andy Humphrey over at [Harmony Analytica](https://harmonyanalytica.com/) says:

> What the customer wants is what matters. You're serving the customer, not your tech desires.

Once you’ve solved their problem, THEN you can start talking about how you solved it, and let that lead into solving even more problems.  This is Humphrey’s **land and expand** strategy, where you land with one solution, then start going sideways to introduce more sensor types.

Now, that doesn’t mean you have to  start with just one sensor.  Bansi at the firm [Macnman](https://www.macnman.com/) recommends starting with at least 100 sensors as the sweet spot for getting enough data and justifying the infrastructure cost.  [In his podcast episode](https://pod.metsci.show/episode/from-handfuls-to-hundreds-bansi-talks-scale) he gives the smoke detector example. 

Think of how much you can cover with one LoRaWAN enabled smoke detector in a ten story building vs multiple LoRaWAN smoke alarms on each floor.  One is cute, the other saves lives and machinery.  

Starting focused doesn’t necessarily mean to start small.

Finally, you may not know what problems they have when you go in; maybe you're walking in cold, or you just bumped into someone at the coffee shop.  [Scott Andrews](https://www.senseability.uk/), whose LoRaWAN work spans both the public and private sector advises you to just ask:  "Ask about their machines and what they do and how they work."

Awareness may be the number one threat facing LoRaWAN, but in the course of the 15 conversations I’ve had in the past few weeks starting up [The Business of LoRaWAN podcast](https://pod.metsci.show/), the business side faces other challenges, among them how complicated it can be for non-engineers to use.


### Make It Easy

This is the difference between encouraging small business owners to deploy their own networks and coming in as a full stack integrator; one has the problem but struggles with the solution.  The other has the solution and needs to find the problem.  

One happy middle ground is to make using LoRaWAN a lot easier by designing for beginners.

That’s what Slaven Damjanovic at [GLAMOS](https://glamos.eu/) has done with his LoRaWAN field tester.  Slaven started GLAMOS just before Helium introduced LoRaWAN to a few hundred thousand people over the course of about 9 months.  

The LoRaWAN field testers he was producing HAD to be beginner friendly; most of the new Helium entrants had never heard of LoRaWAN.  They wanted to know what coverage was like in their area, and it need to be push-button easy.

The easier it is for someone to use a system, whether it’s a field test device like the GLAMOS or a soil moisture sensor, the better.  In fact, by making a device much easier to use you can increase the value of the thing, something that that Harmony Analytica does with their soil moisture sensor.  

Sure, you can order a [MakerFabs soil moisture sensor from Robot Shop](https://www.robotshop.com/products/makerfabs-lorawan-temperature-humidity-soil-moisture-sensor-915mhz?) for $20 and even 3D print a [cool little housing](https://www.printables.com/model/421370-makerfabs-soil-moisture-sensor-lorawan-housing) for it, but then you have to program it, protect it from the elements (and lawnmowers), ruggedize it, then display its data or better yet, use the data to solve a problem.  

All of those are value-add steps that Harmony Analytica offers in its $200 soil moisture sensor custom designed for the vertical of busy irrigation professionals.

### Leverage The Strengths

We tend to forget about how good LoRaWAN is at solving certain problems, one of which is making almost anything, from sensor to skyscraper, smarter.  

Manoj Telrandhe at [TerraQ](https://www.terraq.tech/) does a great job highlighting this, and it has nothing to do with managing uplinks or what spreading factor was used; it's how much area one gateway can cover.

TerraQ deploys sensors throughout restaurants, adding HVAC monitoring, energy management (where he has a long history), and food compliance safety reporting.  As these restaurants expand, whether it’s knocking down a wall to make their space bigger or shifting down the street, adding a new sensor is as easy as putting in the batteries and sticking it on the wall (or the equipment.)

A LoRaWAN gateway can cover a huge area, so once you get that first gateway in, you’ve opened the door for up to 2,000 more sensors to deploy.  This is a massive advantage of LoRaWAN, and leaning into that wide area coverage should be on your business expansion checklist with any client.  You’ve got the coverage; why not use it?

The first and biggest cost is getting that gateway and first sensors installed; once it’s there, adding more sensors should be positioned as speeding up ROI. As Dean Marsh at [UK Connect](https://www.ukconnect.com/) says: 

> You’ve got to speak the language of ROI to the customer.

### Be Unafraid to Roam

Since LoRaWAN is a wide area network, the chances are good that wherever you deploy, there’s already coverage there from another network.  Ignoring this can cost you and your clients money, which slows down ROI; never a good thing.

Test what’s available on site and don’t be afraid to figure out roaming agreements with other providers.  The most pervasive and easiest network to use (completely permissionless) will probably be Helium, a global community network with [coverage across most of the developed world](https://world.helium.com/en/iot/coverage).  

Sign up for a free [MeteoScientific Console account](https://console.meteoscientific.com/front/login) and carry a field tester with you to your next potential client to test it out.  You get your first 400 Data Credits (24 byte each) for free, and I think you’ll be pleasantly surprised with the coverage.

This can make for a great demo to not have to set up a gateway.

> Here’s your sensor, here’s your data.  Do you want this on a consistent basis?  

From there you can provide your own gateways as needed to fill in the gaps, using [Paul Pinault’s](https://www.disk91.com/) strategy of using a hybrid network approach to reduce downtime, increase reliability, and maximize ROI while maintaining control over data and encryption.

As Robert Bogs says of his deployment project [Kayna-Funkt](https://kayna-funkt.de/), "With IoT you can have immediate impacts."  What more immediate impact than showing a business owner their data before you charge them anything?

However you use LoRaWAN, incorporating these 4 aspects will help you build your LoRaWAN business faster, better, and stronger.
 - Start with a problem
 - Make it easy
 - Leverage the strengths
 - Be unafraid to roam

Here's to you getting out there and gettin' after it, crushing sensor deployments, making the world a better, smarter place, and helping solve the number one problem in LoRaWAN.

Get 'em, friends!

:::info Author

**Nik Hawks** is a LoRaWAN Educator & Builder at [MeteoScientific](https://meteoscientific.com/). He writes to educate and delight people considering IoT, and to inspire other IoT nerds to build and deploy their own projects into the world. He runs a [podcast](https://pod.metsci.show) discussing all things LoRaWAN and is psyched to hear about what you're building, whether it's a one sensor playground or a million sensor rollout.

:::

--------------------------------------------------------------------------------

## LoRaWAN In Elder Care
Path: blog/2025-02-06-LoRaWAN_for_senior_tracking.md
Type: blog
Intent: Discover how LoRaWAN technology enhances emergency alert systems in elder care.
Summary: This blog post explores the application of LoRaWAN in elder care, highlighting an emergency alert system implemented in Singapore. With a simple wall-mounted button, seniors can easily alert a 24-hour response center, showcasing the potential of IoT solutions in enhancing safety and communication. Ideal for IoT enthusiasts and professionals looking to understand practical applications of LoRaWAN.
Difficulty: Beginner
Keywords: LoRaWAN, elder care, emergency alert system, IoT solutions, public housing, wireless technology, smart healthcare, IoT applications
Technologies: LoRaWAN, Semtech, iWOW Technology Ltd, emergency response system
Prerequisites: Basic understanding of LoRaWAN, Familiarity with IoT concepts, Knowledge of emergency alert systems
Related Topics: LoRaWAN Applications in Healthcare, Building IoT Solutions with LoRaWAN, Emergency Response Systems using IoT, LoRaWAN Gateway Setup, Smart Home Technologies

# LoRaWAN for Senior Care

Can you use LoRaWAN for emergencies?  Yep.  Semtech and iWOW Technology Ltd [announced they've been running a LoRaWAN based emergency alert system](https://iotbusinessnews.com/2025/01/06/20510-semtech-and-iwow-enhance-elder-care-with-lorawan-wireless-emergency-system/?utm_source=chatgpt.com) in Singapore covering 10,000 public housing flats; that's a lot!
<!-- truncate -->
The system has been in place and running since 2019, and 6 years on 98% of the devices are still operational.  This is a classic example of elder care IoT solutions, bringing high tech to help with emergency alerts.  

The system is simple; it's just a wall-mounted red button that anyone can press to route an emergency call to a 24 hour response center. Simultaneously, the app used notifies next of kin.

These types of systems also offer opportunities to the businesses providing them, as once you're providing coverage for emergency buttons you're also providing coverage for the rest of the building.

If you're building a LoRaWAN-based business, thinking about your gateway use case (pun intended) as just the beginning is a great way to enter a market.

Get 'em!

:::info Author

**Nik Hawks** is a LoRaWAN Educator & Builder at [MeteoScientific](https://meteoscientific.com/). He writes to educate and delight people considering IoT, and to inspire other IoT nerds to build and deploy their own projects into the world. He runs a [podcast](https://pod.metsci.show) discussing all things LoRaWAN and is psyched to hear about what you're building, whether it's a one sensor playground or a million sensor rollout.

:::

--------------------------------------------------------------------------------

## How Do You Keep Your Data?
Path: blog/2025-06-29-How-Do-You-Keep-Your-Data.md
Type: blog
Intent: Understand how to effectively store and manage data from LoRaWAN devices.
Summary: This blog post guides business owners and IoT enthusiasts on how to store and utilize data from LoRaWAN devices, specifically using the Digital Matter Oyster 2.1 asset tracker. It covers data flow concepts, temporary storage solutions, and the importance of integrating data for long-term insights, making it ideal for those looking to enhance their IoT knowledge.
Difficulty: Intermediate
Keywords: LoRaWAN data storage, IoT sensor integration, Digital Matter Oyster 2.1, MeteoScientific Console, data retention, LoRaWAN applications, asset tracking, data pipeline
Technologies: LoRaWAN, Digital Matter Oyster 2.1, MeteoScientific Console, Device Metrics, LNS
Prerequisites: Understanding of LoRaWAN basics, Familiarity with IoT sensors, Basic knowledge of data integration
Related Topics: Setting Up LoRaWAN Gateways, IoT Data Analytics, Introduction to LoRaWAN Protocols, Using MeteoScientific for IoT Projects

If you're a business owner and psyched on LoRaWAN (or even just curious about it), one of the things you'll have to wrap your head around is how to store your data.

LoRaWAN devices are generally exceptional at **sending** data from one place to another, but if you want your data to be useful you have to both retain it and be able to integrate it into what you want.<!-- truncate -->

Now, the economics of LoRaWAN can send you a bunch of different directions here. You could use a fully managed service to just set up all your devices, gateways, and data pipeline for you, but there are two problems with that approach:

A) **Less fun** - Why let someone else learn all this rad stuff? 

B) **More expensive** - You'll pay someone else to have all your fun.  That's silly.

Obviously this depends on your definition of "fun" and "expensive", but I'll assume for now that you're a business owner who is a little geeky and curious, intrigued by the idea of free data storage on a world-class platform, and you have an idea about how you'd use data from an IoT sensor to give you longer term insights into your business .

If that's not you and you just want someone to handle all this for you, reach out to me via the [Contact](/contact) page and I'll put you in touch with someone who'll do the heavy lifting.

Ok, with all the caveats out of the way, let's briefly sketch out the data flow to give you the big concepts, then we'll go through a step by step tutorial for how to get a sensor to send data that you can keep.

It starts with the sensor sending data.  In this case we'll use an Oyster 2.1 asset tracker from Digital Matter.  Onboarding these to any LNS is straightforward (hell, there's even a `Digital Matter Oyster 2.1` Device Template set up for all users of the [MeteoScientific Console](https://console.meteoscientific.com) that you can use for free)

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/device-profile-template.png"
    alt="Device profile template for Oyster 2.1 asset tracker in MeteoScientific Console"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

With the data coming **in** to the LNS from the device, you’ve got a VERY temporary storage set up, but it’s only useful for testing.  

I usually set up the Device Metrics in MeteoScientific just because I’m a nerd and it’s fun to do a quick check on what’s come in, but it’s NOT (by a long shot) a data storage mechanism that’s useful. 

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/device-metrics-testing.png"
    alt="Device metrics testing interface showing battery voltage, GPS coordinates, and tracking data"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

As you can see above, the tracker I’ve set up for this demo has been moving occasionally, and when it does it transmits the data it’s supposed to transmit (battery voltage, heading, latitude, etc.).

So, where do we send the data?  You’ve got a TON of options here.  For a few devices or very low volume most of them are free, with restrictions ranging from the number of devices you can have to the length of time you can store the data.

Services like [Datacake](https://datacake.co/) or [TagoIO](https://tago.io/) offer free data storage and visualization of data for low device counts (5 or less) and short term data storage (30 days).

What we’re going to do today is slightly more geeky but gives you way more data for far longer.

It IS less easy, make no mistake.  However, once you learn this you can use it for the rest of your business life, so there's that.  

We’re going to send our data to a database on Cloudflare called a D1, and we’re going to do that with a Cloudflare Worker.

I get it, this might sound super scary and technical.  

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/scary-data-center.png"
    alt="Intimidating data center control room with multiple screens and complex equipment"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

It’s actually not that scary.  

Think of a database like a muscular Excel sheet and you’ve got a good picture of what you’re doing. The Worker is just the thing that takes your data from the LNS and puts it into the database. 

If you can visualize rows and columns, you’re visualizing a database.  Yes, it can get way more complex, but we're not running an Amazon warehouse here, we're storing the data of a couple dozen things, starting with just one thing.

The massive advantage of a Cloudflare D1 for what we’re doing is that the free level is more than enough for most small business needs.  You can have up to 10 databases with each one having 500 MB of data.  

As a **rough** stand-in for how much 500 MB will get you, it’s about 4 million rows if you’re tracking 10 “short” things (id, name, latitude, longitude, speed, heading, battery voltage, rssi, and snr.)

For a tracker sending every 5 minutes you can store 7+ years of data.(4,000,000 / 1440 minutes per day / 365 days in a year).

You get 10 of those databases on the free plan, and the first paid tier after that is $5/month.

The “hidden” cost is the geekery of setting it up, but I’ll walk you through that now.

I’ll make three assumptions here.  

First, I’ll assume you have a [Cloudflare](https://www.cloudflare.com/?utm_source=meteoscientific&utm_medium=blog&utm_campaign=how-do-you-keep-your-data) account.  

Second, I’ll assume you have a domain that you manage via Cloudflare.  If you don't, it’s about $11 a year to buy a domain on Cloudflare which you can then use for this project.  If you don’t want to go through the trouble of taking your current domain and futzing around with getting it onto Cloudflare, just buy a new domain and use that.

Third, I’ll assume you have a LoRaWAN device sending out data you want to track. In my case, it’ll be an [Oyster 2.1 tracker](https://www.lonestartracking.com/tracking-devices/oyster3-4g-5g-waterproof-battery-powered-gps-tracking-device/?utm_source=meteoscientific&utm_medium=blog&utm_campaign=how-do-you-keep-your-data) that I’ve got mounted on my bike.  

I can use this to store all the places that my bike goes and call in airstrikes if it gets stolen.  If I wanted to get nerdy, I could use the data to build a heat map of local LoRaWAN coverage, but that’ll be for another tutorial.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/oyster-on-bike.JPG"
    alt="Oyster 2.1 asset tracker mounted on bicycle frame for location tracking"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

## Set Up The Database

Let's do this!  Sign in to Cloudflare.  Once you’re on the Cloudflare Account home, select **Storage & Databases**, then **D1 SQL Database** from the dropdown.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/cloudflare-storage-databases.png"
    alt="Cloudflare dashboard showing Storage & Databases section with D1 SQL Database option"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Now you’ll hit the big blue `+ Create Database` button at the top right and then follow the prompts.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/create-database.png"
    alt="Cloudflare D1 database creation interface showing the Create Database button"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Name it (I’ll call mine `metsci-bike-tracker`), and leave the location as automatic. 

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/name_D1.png"
    alt="Database naming interface showing metsci-bike-tracker database name input"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

### Create A Table

Next we’ll create a table.  Click the blue “Create table” button at the top right, then select the `Console` tab in your new database and paste in the following command.  To copy, hit the little copy button in the top right of the field, otherwise you'll only get the first few words.

```
CREATE TABLE oyster_tracks (   id              TEXT    PRIMARY KEY,   time            TIMESTAMP,   dev_eui         TEXT,   battery_voltage REAL,   fix_failed      BOOLEAN,   latitude        REAL,   longitude       REAL,   speed_kmph      REAL,   heading_deg     REAL,   rssi            INTEGER,   snr             REAL );
```

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/create-table-with-console-command.png"
    alt="D1 database console showing CREATE TABLE command for oyster_tracks table"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

If you’re not using an Oyster, modify your table to save whatever you’d like from your device.  The absolute easiest way to get a custom table-create command is to use ChatGPT, telling it what you want and giving it a recent event log from your device.

The prompt for this would be something like:

```

Using the event log from my device, 
please build me a "CREATE TABLE" SQL command 
for a Cloudflare D1 table that stores the 
following values: id, time, dev_eui, 
battery_voltage, latitude, longitude, rssi, snr.

```

Each LNS can be a bit different, but to get your Event log in the MeteoScientific LNS, go into Applications —> your application —> Devices —> your device and select the Events tab, then Download.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/get-event-log-json.png"
    alt="MeteoScientific Console device events interface showing download option for multiple event logs"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Ok, now you’ve got your database and a table setup, we’ll need to create the connection between your LNS and the database.  We’ll do this using an http integration to send from the LNS, and a Cloudflare Worker to receive the data and put it into the database.

## Set Up The Worker

In Cloudflare, start by creating a Worker.  Go to `Compute (Workers)` on the left column, choose `Workers & Pages`, then look for the `Create` button

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/create-a-cloudflare-worker.png"
    alt="Cloudflare Workers dashboard showing the Create button for new workers"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Choose `Workers` then `Start with Hello World!` option:

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/worker-start-hello-world.png"
    alt="Cloudflare Worker creation interface showing Hello World starter template option"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Name your worker (I’ll use the same name as my database, `metsci-bike-tracker`) and hit Deploy in the bottom right.  You don’t need to change the `worker.js` code here, we'll do that later.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/name-and-deploy-worker.png"
    alt="Worker naming interface showing metsci-bike-tracker worker name and Deploy button"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

### Domain & Routes

Now, as stated in the Assumptions, if you haven’t set up a domain with Cloudflare, this next part won’t work. 

We’re going to set up three things here, a custom domain, a route, and a Cloudflare Secret.

Start with `Add custom domain` which will take you to the `Settings` tab in your fancy new Cloudflare Worker.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/domains-routes-secrets.png"
    alt="Cloudflare Worker settings showing Domains & Routes and Variables & Secrets sections"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

In Domains & Routes at the top of the page, select the `+ Add` button, then choose Custom Domain and enter your custom domain.  

In my case, because I manage meteoscientific.com through Cloudflare and this is a bike-tracker, I’m going to use bike-tracker.meteoscientific.com as my domain.  You can use whatever you want.  Hit `Add domain` at the bottom to save your selection.

Next we’ll set up a Route.  Use the same `+ Add` button as before in the Domains & Routes section, except this time choose `Route`, then choose your Zone (your domain url) and paste in a Route.  I’m going to use `bike-tracker.meteoscientific.com/api/track`

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/create-a-route-in-cloudflare-worker.png"
    alt="Cloudflare Worker route creation interface showing custom route setup"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

### Set Up Your Secret

So now your Worker knows where to listen for incoming data, which is cool.  We’re going to secure it so that not every jackwagon on the internet can just willy nilly add data to your table.  We’ll do that using a Cloudflare Secret.  

Hit the `+ Add` in the `Variables and Secrets` section 
Choose `Type —> Secret` then enter in your Variable Name (I used `TRACKER_AUTH_TOKEN`) and then a secret Value.  Save this value and don’t share it with anyone.  Use numbers and letters, no symbols, and make it long.  

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/cloudflare-secret-setup.png"
    alt="Cloudflare Worker secret setup showing TRACKER_AUTH_TOKEN variable configuration"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

### Add Worker Code

Now you’ll add the Worker code.  I’ll give you mine for the Oyster, but if you’re using a different device, yours will be different. Again, the easiest way to get a working Worker is to use ChatGPT.  Give it this as an example along with a full Event from your latest uplink and tell it what you want.  For now, we’ll proceed with my example.

Choose the `Edit Code` button at the top right.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/choose-edit-code-icon.png"
    alt="Cloudflare Worker interface showing the Edit Code button"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Then in the worker.js space, paste in the following:

```
export default {
  async fetch(request, env) {
    // 1. Only POST + auth
    if (request.method !== "POST") {
      return new Response("Method Not Allowed", { status: 405 });
    }
    const auth = request.headers.get("Authorization");
    if (auth !== `Bearer ${env.TRACKER_AUTH_TOKEN}`) {
      return new Response("Unauthorized", { status: 401 });
    }
    
    // 2. Parse JSON
    if (!request.headers.get("Content-Type")?.includes("application/json")) {
      return new Response("Unsupported Media Type", { status: 415 });
    }
    let body;
    try {
      body = await request.json();
    } catch {
      return new Response("Bad JSON", { status: 400 });
    }

    // 3. Extract fields
    const id           = body.deduplicationId;
    const time         = body.time;
    const dev_eui      = body.deviceInfo?.devEui;
    const batV         = body.object?.batV           ?? null;
    const fixFailed    = body.object?.fixFailed       ?? false;
    const latitude     = body.object?.latitudeDeg     ?? null;
    const longitude    = body.object?.longitudeDeg    ?? null;
    const speedKmph    = body.object?.speedKmph       ?? null;
    const headingDeg   = body.object?.headingDeg      ?? null;

    // 4. Take the reported RSSI/SNR (first rxInfo entry)
    const firstRx      = Array.isArray(body.rxInfo) ? body.rxInfo[0] : null;
    const rssi         = firstRx?.rssi  ?? null;
    const snr          = firstRx?.snr   ?? null;

    // 5. Insert into oyster_tracks
    try {
      await env.DB.prepare(`
        INSERT INTO oyster_tracks (
          id, time, dev_eui,
          battery_voltage, fix_failed,
          latitude, longitude,
          speed_kmph, heading_deg,
          rssi, snr
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `)
      .bind(
        id, time, dev_eui,
        batV, fixFailed,
        latitude, longitude,
        speedKmph, headingDeg,
        rssi, snr
      )
      .run();

      return new Response("OK", { status: 200 });
    } catch (err) {
      return new Response(`DB error: ${err.message}`, { status: 500 });
    }
  }
}


```
It'll look like this:

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/paste-in-worker-code.png"
    alt="Cloudflare Worker code editor showing the JavaScript code for handling IoT data"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Then hit the blue `Deploy` at the top right.

One last thing and we’ll be done on the Cloudflare side.  In the top left, click the left arrow `metsci-bike-tracker` or whatever you named your Worker.  

This will take you back to your Worker and the main menu.  Select the `Bindings` tab, then the blue `Add binding` button.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/add-binding.png"
    alt="Cloudflare Worker bindings interface showing the Add binding button"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Then choose D1 Database from the list of options, use `DB` for the Variable name, and select your database, then save or deploy. 

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/select-and-name-database-to-bind.png"
    alt="D1 database binding configuration showing DB variable name and database selection"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

You’ll see a new binding in the Connected Bindings section.  

## Set Up The Integration in MetSci Console

Cool!  The D1 database and the Worker are now set up and connected, ready to receive.  All we have to do now is set up the http integration side, check our work, and then let our database fill up with data.

I’ll be using the [MeteoScientific Console](https://console.meteoscientific.com/) in this example, which makes it really easy to use the Helium network plus your first 400 data credits are free, which is enough to send one packet an hour for a year!  You can use whatever LNS you have.

In your MetSci Console, go to your Application, then select the `Integrations` tab and hit the `+` on the HTTP box.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/console-application-integration-http.png"
    alt="MeteoScientific Console showing application integrations with HTTP integration option"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Leave the `Payload encoding` as `JSON`, paste in the custom Route you set up (for me it was `bike-tracker.meteoscientific.com/api/track`, then hit  `+ Add header`.

For the Key put `Authorization`, and for the Value put `Bearer your-long-Cloudflare-secret`.  

Don’t forget the `Bearer` in front!

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/add-http-integration-route-and-header.png"
    alt="HTTP integration setup showing route configuration and authorization header setup"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

Hit Submit and you’re done!

## Confirm Packets

Fire off a few packets from your device and then watch them come in over on the Cloudflare D1.   

To see that, from the Cloudflare main menu: 

`Storage & Databases` —> `D1 SQL Database` —> choose your database 

then hit the Explore Data blue button in the top right.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/explore-data.png"
    alt="Cloudflare D1 database interface showing the Explore Data button for viewing stored data"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

You’ll see the first few rows of data in there (depending on how often your device is firing).  Now you have a database storing your data, congrats!

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-29-how-do-you-keep-your-data/successful-uplinks.png"
    alt="D1 database showing successful data uplinks with device tracking information stored in table rows"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

We'll talk about what to DO with your stored data in future tutorials.  For now, well done on diving a little further down the rabbit hole of geekery and taking control of your data with LoRaWAN devices.  

If you like this kind of dive into LoRaWAN I've got a set of [Tutorials](/docs/tutorial-basics/LoRaWAN-Big-Picture) for you as well as a [podcast](https://pod.metsci.show).  Enjoy the learning, and pass it on wherever you can.

Rock 'n roll!

:::info Author

**Nik Hawks** is incurably curious at [MeteoScientific](https://meteoscientific.com/). He writes to educate and delight people considering IoT, and to inspire other IoT nerds to build and deploy their own projects into the world. He runs [The Business of LoRaWAN podcast](https://pod.metsci.show) discussing all things LoRaWAN and is psyched to hear about what you're building, whether it's a one sensor playground or a million sensor rollout.

:::

--------------------------------------------------------------------------------

## Read This First
Path: blog/2030-01-02-Read_This_First.md
Type: blog
Intent: Explore various use cases for LoRaWAN sensors on the Helium network.
Summary: This blog post introduces readers to the diverse applications of LoRaWAN sensors utilizing the Helium network. It serves as a beginner-friendly guide for those new to MeteoScientific, encouraging users to sign up and explore the Console. The content highlights the potential of LoRaWAN in IoT, making it suitable for enthusiasts and professionals alike.
Difficulty: Beginner
Keywords: LoRaWAN, Helium network, IoT sensors, MeteoScientific, use cases, Console, AI applications, tutorials
Technologies: Helium, LoRaWAN, MeteoScientific, AI, IoT
Prerequisites: Basic understanding of IoT, Familiarity with LoRaWAN concepts
Related Topics: Getting Started with LoRaWAN, IoT Sensor Applications, Helium Network Overview, LoRaWAN Tutorials, AI in IoT

LoRaWAN sensors on [Helium](https://www.helium.com/) can be used for an awful lot of things, and in this blog we use AI (plus Nik at MetSci) to write about exploring some of the possible use cases.  

If this is your first time at the MetSci (short for MeteoScientific) site and you just want to try using things and muddling through, head over to the [Console](https://console.meteoscientific.com/front/login), sign up for an account and get going.
<!-- truncate -->

If you'd like step-by-step instructions on how to get started, check out our [Tutorials](/docs/tutorial-basics/intro-to-console).
Oh, you actually want to read the blog, and you'd like to know a little more?  Cool!

## Author Stuff

If you see that an author is just MetSci, you're reading a guided LLM piece.  If the author is **also** Nik, you know there was some human redacting.  If it's **only** Nik, it's a fully human-written piece.

You should consider this blog a general exploration of using the Helium LoRaWAN, not an exhaustive resource for every possible application.  Go get 'em, tigers!

--------------------------------------------------------------------------------

## Is One Sensor Enough?
Path: blog/2025-06-22-Single-IoT-Sensor-Power-The-Sled.md
Type: blog
Intent: Explore the potential of using a single IoT sensor to engage communities in IoT applications.
Summary: This blog post discusses how a single IoT sensor can transform community engagement with technology, challenging the notion that thousands are necessary for impact. It emphasizes the balance between IoT efficiency and human action, making it relevant for both beginners and IoT enthusiasts interested in practical applications of LoRaWAN.
Difficulty: Beginner
Keywords: IoT sensor, LoRaWAN, community engagement, sensor applications, IoT technology
Technologies: LoRaWAN, IoT, weather station, 915 MHz antenna, sensors
Prerequisites: Understanding of IoT basics, Familiarity with LoRaWAN technology
Related Topics: Introduction to LoRaWAN, Building IoT Projects with LoRa, Practical Applications of IoT Sensors

What if I told you that a single IoT sensor could turn your entire neighborhood into a playground that got people interested in IoT?

There's this story in IoT that you need thousands of sensors to make a difference.  Maybe that's true.  <!-- truncate -->

Today I wanted to talk about what you can do with just one sensor.  Before we begin with that, I should give you some context.

## Action & IoT

For as far back as I can remember, I've been active.  Running, swimming, wrestling, lacrosse, and just being out in the wild moving through terrain.  Action has been the great restorative for me, both a source of daily joy and a catch net for times of depression.

We are the same in that way, you and I, because we are human.  Humans feel better when they move, when they physically work.  It's in our genes.  A bias for (thinking) action is part of what has made us the dominant species on the planet. 

Over the past few years as I've gotten deeper into IoT, I have set aside much of my old action.  I called it "glueing my face to the computer", and while it has been intensely fascinating to dive into the world of IoT and LoRa and uplinks and routing, it has not been good for action.

In fact, with a few rare exceptions, like this helicopter delivery of a weather station to a mountain top:

<video 
  controls
  preload="metadata"
  poster="/img/blog/video-thumbnails/weather-station-delivery-thumb.png"
  style={{
    width: '100%',
    maxWidth: '800px',
    margin: '20px auto',
    borderRadius: '8px',
    border: '4px solid var(--metsci-primary)',
    boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    backgroundColor: 'var(--metsci-white)',
  }}
>
  <source src="https://video.meteoscientific.com/helicopter-delivery-of-iot-weather-station-el-cajon-mtn.mp4" type="video/mp4" />
  Your browser does not support the video tag.
</video>

or hiking in a giant 915 MHz antenna and half the accoutrements of a LoRaWAN gateway in a 70 lb pack on that same mountain range:

<video 
  controls
  preload="metadata"
  poster="/img/blog/video-thumbnails/giant-antenna-delivery-thumb.png"
  style={{
    width: '100%',
    maxWidth: '800px',
    margin: '20px auto',
    borderRadius: '8px',
    border: '4px solid var(--metsci-primary)',
    boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    backgroundColor: 'var(--metsci-white)',
  }}
>
  <source src="https://video.meteoscientific.com/hiking-in-giant-lorawan-915-antenna.mp4" type="video/mp4" />
  Your browser does not support the video tag.
</video>

IoT and real world human action seldom overlap.  One of the main selling points of IoT is that you actually do less action.  With a network of sensors, you can focus down to only doing the action that matters.

In one sense that's much more efficient, and certainly better for a business.  In the other, that brings us closer to death.  I'm not ready to die yet, and so I sought a way to increase action with two caveats:

First, I would do it with others.  I'm no misanthrope, and while I've had plenty of joyous times alone, there's something genetically satisfying about sharing physical effort with someone else.  It's (part) of what makes sex satisfying, but the joy of joint work is not solely the realm of procreation.

A hard run with a friend, or a climb out of a deep canyon, or crossing a river, or just lifting weights with a group all trigger deep centers of joy.  We evolved to work together; it's how we brought down mammoths, kept the children safe, maintained and grew the tribe.

Together is how we best operate.

Second, I would involve IoT.  I love this tech; I think it's so cool that we can start to measure the world, record it, and react much faster, more accurately, and over far longer range than ever we could before.  IoT is so clearly the way forward that ignoring it borders on the criminal.  

Still, IoT is a dense thicket.  To use it you typically have to be able to do more than just make text bold or italic; there's code involved, hardware, software, connectivity, and more.  In fact, the deeper you get into IoT, the more you need to know just to get something simple to work.

How then can we integrate the joy of action together with the barriers of getting something to actually work that surround IoT?

## BEGINNINGS

Years ago, when I was deep in my metal working phase, a buddy of mine came by to give me a couple of heavy iron elongated pyramids that looked like teeth off a robot T-rex. 

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-22-single-iot-sensor-power-the-sled/dredger_teeth.JPG"
    alt="Heavy iron dredger teeth from San Diego bay dredger, looking like robot T-rex teeth"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

In actual fact they were the worn out teeth of the San Diego bay dredger, the thing that digs out the bottom of the bay so it's deep enough for our various and sundry aircraft carriers, destroyers, and other large ships that dock here in America's Finest city and make up much of the US Pacific fleet.

For the longest time I didn't know what to do with 'em.  Then one day on the internet back in 2015-ish, I saw some football guys pushing a metal sled.

Ah, I thought, those dredger teeth would make excellent sled feet, and using them as the front skids, I welded together a heavy metal sled out of scrap I had laying around. I pushed it around the neighborhood causing all kinds of grinding-steel-on-concrete noise and was generally very pleased with myself as I bulldogged the thing around the block.

I used it a few times because I love action, but other actions called in both real and virtual worlds, and the sled sat next to the weight rack until last Thursday.

Through a longer turn of events, on that day I ended up pushing the sled to a buddy's house about ½ a mile away as a workout and a challenge for him to push back.  

He did, and as I heard it grinding towards me on the street it hit me that I should share this idea, of pushing the sled between houses in a neighborhood, in a way that combined my love of action with my love of IoT, and the rapidly growing capabilities of vibe-coding (which just means working with AI to build something).

## COORDINATION
 
So over the weekend I built a system to coordinate IoT action amongst strangers.  

It relies on the IoT device of a Digital Matter Oyster2, which is a slightly older piece of tech that is enormously stable and delivers on all the promises of IoT & LoRaWAN; long battery life, long communication range, and dead simple to use.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-22-single-iot-sensor-power-the-sled/oyster2-tracker-on-helium.JPG"
    alt="Digital Matter Oyster2 IoT tracker device with Helium branding"
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

The Oyster is attached to the sled; it's the black plastic thing on the front with a Helium sticker on it.

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-22-single-iot-sensor-power-the-sled/sled-with-tracker.png"
    alt="Tracker mounted on sled, post-delivery."
    style={{
      maxWidth: '800px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

When the sled is stationary for more than 7 minutes, the Oyster goes to sleep for 24 hours.  When the sled is moving, an accelerometer in the Oyster wakes the device up and it starts transmitting every 20 seconds.

<video 
  controls
  preload="metadata"
  poster="/img/blog/video-thumbnails/get-after-it-sled-pushing-thumb.png"
  style={{
    width: '100%',
    maxWidth: '800px',
    margin: '20px auto',
    borderRadius: '8px',
    border: '4px solid var(--metsci-primary)',
    boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    backgroundColor: 'var(--metsci-white)',
  }}
>
  <source src="https://video.meteoscientific.com/sled-pushing-nik.mp4" type="video/mp4" />
  Your browser does not support the video tag.
</video>

## Let's Talk Cost - Helium

The Oyster sends data packets via uplinks through the Helium Network to a LoRaWAN Network Server, or LNS.  In this case, we're using the MeteoScientific LNS Console. 

The [MetSci Console](https://console.meteoscientific.com) is available for anyone to use, just sign up.  I've written a whole series of [Tutorials](/docs/tutorial-basics/LoRaWAN-Big-Picture) on how to use it if you need help.  You get your first 400 data packets for free, and after they they cost $.0001 each.  Yeah, pretty cheap.  

A half-mile push by an out of shape former athlete takes about 20 minutes.  If the Oyster is firing 3 packets a minute, that trip will cost $.006, or less than a **drop** of coffee in your $7 latte frappa-macca-chino.  Compare that to your monthly gym membership and you'll start wondering why there aren't more fun IoT workout projects.  Using Helium as a network is incredibly cheap, and [the coverage is superb where I am.](https://world.helium.com/en/network/iot/coverage)

## Cloudflare Workers & More

The LNS decodes the packets and sends them on via an http integration to a Cloudflare Worker.  Everything on Cloudflare at this level is free.  If you grow insanely huge (more than 100,000 requests **per day**), then you'll have to pay.  That seems fair. 

The Worker puts the incoming packets from the Oyster into a Cloudflare D1 database.  It then reads that database and updates the website that coordinates and informs all the human actions. 

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-22-single-iot-sensor-power-the-sled/cloudflare-worker-bindings.png"
    alt="Cloudflare Worker bindings showing connections to Assets, R2 bucket, D1 database, and KV namespace for intersections"
    style={{
      maxWidth: '600px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

You can go to the MetSci sled website to see how the rest of it works, but before I send you there, let me walk you through the general workflow of a user, from discovery to sweaty finish.

## How People Find It

Let's say you're a reasonably fit person out walking your dog in my neighborhood.  If, like me, you want to work out with other people but joining a gym isn't your thing, you might be interested in a flyer you see on a telephone pole that says "Hard Work - Sled Pushing"

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-22-single-iot-sensor-power-the-sled/sled-pushing-flyer.JPG"
    alt="Flyer for sled pushing signup in Normal Heights, San Diego California"
    style={{
      maxWidth: '600px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

You tear off one of the tabs at the bottom which has a QR code and 5 or 6 character password and take it home.

You scan the QR code and find the site, read through the description, and decide to sign up.  Now, that's not the only way people found it; I posted on Facebook and Reddit for my neighborhood as well.  I'm not a Luddite, you know.

The very short version of the description is that you're signing up for a heavy metal sled to be pushed to you by a stranger, then you're responsible for "delivering" (by pushing) the sled to the next stranger.  

The distances are bounded by 300 and 1,000 meters so that the push will be neither too long nor short, and the general rules (during the day, of course you can bring a friend, contact me if anything goes wrong) are laid out.

When you sign up, you enter your email, the handle you want to go by publicly, your address, and the password you entered.

### A Quick Revisit of Nerdville

The Cloudflare Worker receives that information and calculates your latitude and longitude, making sure you're within the neighborhood so that no one orders up a delivery to Tuktoyaktuk as a prank.  It then runs your coordinates through a Cloudflare KV pair of every intersection in the neighborhood so it can give others a general idea of your closest intersection, which maintains your privacy at a reasonable level but still triggers a "Hey, I know where 35th & Collier is, some dude named Sam just signed up!"

The Worker puts all that data into a Cloudflare D1 table, then uses the Haversine formula to calculate distances along with some other logic (who signed up first, who's the right distance away, who hasn't pushed yet), and figures out where you should go in the sled delivery queue.

## The Feedback Loop

You can see where you are in the queue on the website, and when the pusher before you starts their push (calculated by the Oyster recording movement outside of a 15 meter radius from the pusher's address, meaning they've started their journey to you), the Worker fires off an email via Mailgun telling you the sled is coming.

When the sled enters the 15 meter radius around your address, you'll get another email confirming that the sled has been dropped off and giving you the address of where you'll push to.

This continues on for as long as people sign up; at the end of the queue it just loops back to the beginning.  They say that the sun never set on the British Empire during the 19th and 20th centuries. My aims are slightly smaller; I hope that one day there will be no daylight hour where the sled isn't moving throughout the neighborhood.  

## Making The Map

All of this information about location is displayed on a PMTiles map I generated after downlaading an 80GB map of the entire world and processing out just my little neighborhood using a local machine I call Monstra for the processing (3 x 4070 Super Ti GPUs and a Threadripper). 

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-22-single-iot-sensor-power-the-sled/monstra-gpu-and-threadripper-local-ai.JPG"
    alt="Triple GPU machine with Threadripper for running local LLM and AI tasks"
    style={{
      maxWidth: '600px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

The PMTiles map is stored in a Cloudflare R2 and displayed on the site, with the live tracker of the sled on it:

<div style={{
  display: 'flex',
  justifyContent: 'center',
  margin: '20px auto'
}}>
  <img 
    src="/img/blog/2025-06-22-single-iot-sensor-power-the-sled/sled-tracking-map.png"
    alt="The displayed PMTiles map I built with Monstra"
    style={{
      maxWidth: '600px',
      width: '100%',
      borderRadius: '8px',
      border: '4px solid var(--metsci-primary)',
      boxShadow: '0 4px 12px rgba(217, 74, 24, 0.15)',
    }}
  />
</div>

So that's the combination of nerd workflow and action.

## The Next Steps

If you're in our little neighborhood of Normal Heights, you can [sign up to have the sled "delivered" to you](https://sled.meteoscientific.com), and then you'll be on the hook to deliver it to the next person.
 
As more people sign up, we get two very important things.  

First, we combine IoT and Action, which is a source of deep joy for me.  Every person that participates is using IoT, and many of them will learn just a little bit more about how they're using it just from interacting with the sled website.  I try to answer their questions up front in the [Sled FAQ section](https://sled.meteoscientific.com/faq)) on the sled site, that way they're not afraid to ask.

Second, I get to connect with the section of all the people in my neighborhood (about 5,000 families total according to US Census statistic) who are willing to engage in a string of hot and sweaty deliveries from and to a stranger.  I've got the feeling they'll be my kind of people.

There is one other aspect of this one-sensor project that's pretty cool; this system is repeatable and cheap.  

It runs entirely on the free tiers of Cloudflare Workers, D1, R2, and KV. It's all in a Github repo that I'd be happy to share, though I'll warn you that the Worker is messy and for now, it'll be a bit than just "copy/paste" to get it going.

The only cost is the tracking device.  The Oyster2 is (generally) no longer sold, but you can get the next gen Oyster3 that runs about $130.  I'd recommend getting one from [LoneStar Tracking](https://www.lonestartracking.com/tracking-devices/oyster-lora-gps-tracking-device-915mhz/).  That's where I got my Oyster, and Tommy at LoneStar is good people.

You could get creative here and find a device that gathers more than just GPS data; say, air quality, or temperature, etc. and display that as well.  You could also think up of your own even cooler games using IoT to spark action.  

You may have read this and thought this is all too much, and there's some aspect of it that you just couldn't do.

## Yes, You Can

If you've read this far, you absolutely have the two critical things required to make a project work; the **focus to read** and the **curiosity to keep going**.  Everything else is just action, and humans are built for action!

Those two things are all anyone needs to succeed in the world of IoT, which is, after all, the thing that will change our world.

With those two things and one sensor, you too can expand a new truth about IoT.

What'll your one-sensor project be?

:::info Author

**Nik Hawks** is incurably curious at [MeteoScientific](https://meteoscientific.com/). He writes to educate and delight people considering IoT, and to inspire other IoT nerds to build and deploy their own projects into the world. He runs [The Business of LoRaWAN podcast](https://pod.metsci.show) discussing all things LoRaWAN and is psyched to hear about what you're building, whether it's a one sensor playground or a million sensor rollout.

:::

--------------------------------------------------------------------------------

## Global LoRaWAN Industry Analysis
Path: blog/2025-02-03-Global_LoRaWAN_Industry_Analysis.md
Type: blog
Intent: Understand the evolution and current landscape of the LoRaWAN industry.
Summary: This blog post explores the history and evolution of LoRaWAN technology, detailing its origins, early adoption, and the establishment of the LoRa Alliance. It targets IoT enthusiasts and professionals interested in the development of low-power, long-range communication networks and their applications in various industries.
Difficulty: Intermediate
Keywords: LoRaWAN, IoT, chirp spread spectrum, LoRa Alliance, low-power communication, network protocol, utility meters, telecom operators, long-range networks
Technologies: LoRaWAN, LoRa Alliance, SX1272, SX1301, Cycleo
Prerequisites: Basic understanding of IoT, Familiarity with wireless communication, Knowledge of network protocols
Related Topics: Introduction to LoRaWAN, Setting up a LoRaWAN gateway, LoRaWAN applications in smart cities, Comparing LoRaWAN and NB-IoT, Best practices for IoT device deployment

# Global LoRaWAN Industry Analysis

## History and Evolution of LoRaWAN

LoRaWAN's technological roots [date back to 2009 in Grenoble, France](https://blog.semtech.com/a-brief-history-of-lora-three-inventors-share-their-personal-story-at-the-things-conference#:~:text=The%20story%20of%20LoRa%20began,technology%2C%20a%20technology%20widely%20in), when Nicolas Sornin and Olivier Seller began experimenting with chirp spread spectrum (CSS) modulation for low-power, long-range communications​. 
<!-- truncate -->
This led to the founding of Cycleo in 2010 with the goal of enabling wireless data links for utility meters using sub-GHz radio. Instead of inventing a new modulation from scratch, Cycleo applied CSS (a technique long used in sonar and radar) to IoT communications – essentially repurposing chirp signals for data transmission​. The breakthrough proved that kilometer-range wireless links could be achieved with very low power, ideal for battery-operated IoT sensors.

Seeing the potential, Semtech acquired Cycleo in 2012, gaining the LoRa IP and the small team of inventors​. Over the next few years, Semtech refined the technology into silicon – releasing chipsets like the [SX1272](https://www.semtech.com/products/wireless-rf/lora-connect/sx1272)/1276 transceivers for end devices and the multi-channel [SX1301](https://www.semtech.com/products/wireless-rf/lora-core/sx1301) for gateways​. With hardware in place, attention turned to creating a standardized networking protocol on top of LoRa. 

In 2015, industry leaders including Semtech, Actility, and IBM formed the LoRa Alliance, which published the first LoRaWAN specification. LoRaWAN (Long Range Wide Area Network) defines the MAC-layer protocol and architecture for LoRa networks, enabling interoperability across vendors. The first LoRaWAN spec (v1.0) emerged around 2015, and the Alliance began promoting it as an open standard for Low Power WAN.

### Early Adoption (2015–2017)

LoRaWAN quickly gained traction, especially in Europe. By 2016, multiple telecom operators had launched LoRaWAN networks as a complement or alternative to cellular IoT. For example, Orange and Bouygues Telecom in France each deployed nationwide LoRaWAN coverage by 2016, [seeing LoRa as a ready solution for IoT](https://www.rudebaguette.com/en/2015/09/taking-aim-at-sigfox-orange-announces-rollout-for-a-lora-based-iot-network-in-2016/#:~:text=Taking%20aim%20at%20SIGFOX%2C%20Orange,the%20first%20quarter%20of%202016) before NB-IoT was widely available​. 

KPN in the Netherlands likewise [rolled out a nationwide LoRaWAN network by mid-2016](https://www.sdxcentral.com/articles/news/sk-telecom-kpn-deploy-nationwide-lorawan-iot-networks/2016/07/), one of the first in the world​. In South Korea, [SK Telecom partnered with Samsung](https://www.samsung.com/global/business/networks/insights/press-release/samsung-electronics-to-jointly-build-skt-world-first-nationwide-lorawan-network-dedicated-to-iot/#:~:text=Samsung%20Electronics%20to%20jointly%20build,2016) to deploy a country-wide LoRaWAN network in 2016, offering IoT coverage spanning 99% of the population. 

These early networks targeted applications like smart city sensors and asset tracking. Simultaneously, the open community model took off: [The Things Network](https://www.thethingsnetwork.org/), launched in 2015 in Amsterdam, rallied volunteers to set up LoRaWAN gateways and provide free community coverage in hundreds of cities globally, demonstrating grassroots adoption.

### Growth and Maturity (2018–2021) 

By 2018, LoRaWAN had achieved significant global footprint. The LoRa Alliance reported over [100 network operators in 100+ countries by 2018](https://lora-alliance.org/lora-alliance-press-release/lora-alliance-registra-una-crescita-del-66-delle-reti-pubbliche-lorawan-negli-ultimi-3-anni/)​. This included not just telecom-led public networks, but also private enterprise networks and community deployments. 

Over these years, the LoRaWAN specification evolved (versions 1.1, 1.0.3 etc.) to add features like better security, roaming between networks, and firmware updates over-the-air. The ecosystem expanded with more device makers and solution providers joining the Alliance. Cumulative device deployments climbed into the tens of millions, driven by use cases in smart utilities, agriculture, and logistics. By 2020, Semtech estimated over 100 million devices were running on LoRa/LoRaWAN globally. 

A major milestone in 2021 was **LoRaWAN’s recognition by the ITU-T as an official international standard for LPWAN**, [cementing its status alongside cellular standards](https://www.melita.io/articles-news/lora-alliance-publishes-annual-report-global-expansion-of-the-lorawan-market-in-2022/#:~:text=The%20report%20reveals%20that%20LoRaWAN,and%20most%20diverse%20IoT%20ecosystem)​. This ITU approval (achieved in late 2021) underscored LoRaWAN’s maturity and interoperability as an open protocol.

### Recent Developments (2022–2025) 

In the last few years, LoRaWAN adoption has accelerated and diversified. As of the end of 2022, [industry analysts estimated over 200 million LoRaWAN devices were active worldwide](https://transformainsights.com/low-power-wide-area-networks#:~:text=Insights%20transformainsights,deployment%2C%20the%20focus%20of)​. The LoRa Alliance’s 2022 report highlighted that LoRaWAN is no longer “new” but a widely adopted IoT technology, with deployments in 160+ countries and a rapidly growing ecosystem​. By 2023, the number of LoRaWAN network operators had nearly doubled to ~200 (from 100 in 2018), providing coverage [“in nearly every country in the world”](https://lora-alliance.org/lora-alliance-press-release/lora-alliance-registra-una-crescita-del-66-delle-reti-pubbliche-lorawan-negli-ultimi-3-anni/)​. 

Analyst projections show LoRa/LoRaWAN connections continuing a steep rise: [around 500 million connections in 2024, expected to reach 1.3 billion by 2030](https://www.rcrwireless.com/20240619/internet-of-things/nb-iot-and-lorawan-crowned-the-kings-of-long-range-iot-to-double-connections-to-3-5bn-in-five-years#:~:text=judging%20by%20a%20cursory%20look,3%20million)​. This growth is now driven not just by traditional public networks, but also by community and hybrid models. A notable phenomenon has been the Helium network, a community-built LoRaWAN network where individuals deploy hotspots. By 2022, Helium had over 800,000 LoRaWAN gateways worldwide contributing coverage​, although that has stabilized to around [300,000 gateways today](https://world.helium.com/en/iot/hotspots) – a scale rivaling telecom operators. Another trend is LoRaWAN via satellite: since 2020, multiple operators (e.g. [Lacuna Space](https://lacuna-space.com/), [EchoStar](https://echostarmobile.com/lora-satellite-iot-devices/), [Eutelsat](https://www.eutelsat.com/en/blog/iot-connectivity-for-businesses.html) have launched LoRaWAN-capable satellites, aiming for global IoT coverage for remote areas​. LoRaWAN protocol extensions now support satellite links and have opened use cases in maritime and wilderness monitoring.

Technologically, LoRaWAN has continued to improve. Newer device classes and features ([Class B for scheduled receive slots, Class C for near-continuous listening](https://www.semtech.com/uploads/technology/LoRa/lorawan-device-classes.pdf)) were implemented to support applications needing downlink or lower latency. Recent specifications have introduced relay nodes and network roaming to increase coverage and flexibility. 

The focus has also turned to network scalability and management as deployments grew – demonstrated by initiatives like [LoRaWAN Network Roaming](https://lora-alliance.org/wp-content/uploads/2020/11/actility.pdf) across providers and the development of peering platforms (e.g. [Packet Broker](https://packetbroker.net/getting-started/what-is-packet-broker/)) to interconnect public and private LoRaWAN networks. 

All these advancements show LoRaWAN’s evolution from a novel idea to a mature, global IoT standard with a decade of development. It now stands alongside cellular IoT options, offering a proven low-power, long-range connectivity solution with a robust ecosystem.

## Key Players in the LoRaWAN Ecosystem

**Semtech Corporation** – Semtech is the semiconductor company that owns and licenses LoRa technology. It acquired French startup Cycleo (the inventor of LoRa’s radio modulation) in 2012 to [commercialize LoRa chips​](https://blog.semtech.com/a-brief-history-of-lora-three-inventors-share-their-personal-story-at-the-things-conference#:~:text=Convinced%20about%20the%20long%20range,time%2C%20the%20creation%20of%20the). Semtech produces the LoRa transceiver chips (e.g. SX1272/76) used in IoT devices and gateway chipsets (e.g. SX1301) that form the hardware backbone of LoRaWAN networks​. Semtech has been the key driver behind LoRa’s development and works closely with the [LoRa Alliance](https://www.lora-alliance.org/).

**The Things Industries (TTI)** – [The Things Industries](https://www.thethingsindustries.com/) is the company behind The Things Network, a global open LoRaWAN community. Led by founders like Wienke Giezeman, TTI provides a LoRaWAN network server and infrastructure that power both community-driven and commercial deployments. The Things Network began in 2015 in the Netherlands as an open, crowdsourced LoRaWAN network and has grown worldwide. TTI is a leading provider of LoRaWAN solutions for enterprises, and a prominent member of the LoRa Alliance​.

**Actility** – [Actility](https://www.actility.com/) (founded by Olivier Hersent in 2010) is a French company and a pioneer in LPWAN connectivity platforms. Actility’s ThingPark platform is widely used for [industrial-grade LoRaWAN network management​](https://www.semtech.com/company/press/leading-iot-industry-players-bring-implementation-of-relay-utilizing-lorawan-to-market#:~:text=Actility%20is%20the%20world%20leader,Actility%20provides%20its). Many telecom operators launching LoRaWAN networks have partnered with Actility for core network servers. Actility is considered a world leader in LoRaWAN network solutions, enabling nationwide deployments and IoT services for smart cities, utilities, and industry​.

**Helium** – [Helium](https://www.helium.com/) is a blockchain-based network for the Internet of Things (IoT). It uses a crowdsourced network of LoRaWAN gateways to provide coverage for the internet of things. The Helium blockchain is used to reward gateways for contributing to the network.

Other Major Companies – The LoRaWAN ecosystem includes many players across hardware, network operations, and cloud services. Key contributors in the LoRa Alliance include [device manufacturers, network operators, and cloud giants](https://en.wikipedia.org/wiki/LoRa#:~:text=Key%20contributing%20members%20of%20the,36)​. Notable examples are [Kerlink](https://www.kerlink.com/) (LoRaWAN gateway manufacturer), [TEKTELIC](https://tektelic.com/products/gateways/) and [MikroTik](https://mikrotik.com/products/group/iot-products) (hardware providers), [Netmore](https://www.rcrwireless.com/20240207/internet-of-things/netmore-buys-senet-to-create-trans-atlantic-lorawan-operator) which recently acquired Senet (a former LoRaWAN operator in the US), [Everynet](https://everynet.com/) (operates LoRaWAN networks internationally), and [MachineQ](https://www.machineq.com/) (Comcast) – Comcast’s enterprise IoT arm offering LoRaWAN in the US​. 

Cloud and tech companies like Amazon Web Services ([AWS IoT](https://aws.amazon.com/iot-core/lorawan/)) and [Microsoft Azure](https://azure.microsoft.com/en-us/services/iot-hub/) are also involved, providing IoT services that integrate LoRaWAN connectivity​. Even traditional telcos and tech firms such as Cisco were part of the ecosystem (Cisco provided LoRaWAN infrastructure gear, though it [announced its exit](https://www.cisco.com/c/en/us/products/collateral/routers/wireless-gateway-lorawan/lorawan-eol.html) from this market in late 2024)​.

## Notable Individuals and Thought Leaders

The LoRaWAN industry was [kickstarted by inventors Nicolas Sornin and Olivier Seller](https://blog.semtech.com/a-brief-history-of-lora-three-inventors-share-their-personal-story-at-the-things-conference#:~:text=The%20story%20of%20LoRa%20began,the%20technology%20for%20sending%20data.), who in 2009 first developed the long-range, chirp spread spectrum radio technology that became LoRa​. They co-founded Cycleo with François Sforza to target utility metering, which led to Semtech’s acquisition in 2012​. [Nicolas Sornin](https://www.thethingsnetwork.org/article/nicolas-sornin-tells-about-the-future-of-lorawan) is often credited as the inventor of LoRa/LoRaWAN and continues to influence LoRaWAN’s evolution as an executive at Semtech. 

On the ecosystem side, [Wienke Giezeman](https://www.thethingsnetwork.org/u/wienkegiezeman) and [Johan Stokking](https://www.thethingsnetwork.org/u/johan) (The Things Network founders) are notable for mobilizing the global LoRaWAN community. 

[Olivier Hersent](https://www.actility.com/management-team/) (Actility’s CEO) is a recognized expert who helped shape LoRaWAN’s early technical architecture. In the LoRa Alliance,former CEO [Donna Moore](https://www.linkedin.com/in/donnamoore4/) has been instrumental in driving global standardization and adoption while current CEO [Alper Yegin](https://lora-alliance.org/author/alper-yeginlora-alliance-com/), appointed in October of 2024, has a track record indicating a strategic, forward-looking approach to ecosystem development.

[Thomas Telkamp](https://www.linkedin.com/in/thomastelkamp/), CTO and co-foudner at Lacuna Space brought LoRaWAN into space, which was important because prior to this, if there wasn't a physical gateway on the ground, you weren't getting LoRaWAN coverage.

Other thought leaders include industry engineers like [Olivier Seller](https://www.linkedin.com/in/olivier-seller-527909/?originalSubdomain=fr) (Semtech) and ecosystem advocates such as [Marc Pégulu](https://www.techtarget.com/contributor/Marc-Pegulu) (Semtech’s IoT VP) and [Amir Haleem](https://x.com/amirhaleem), co-founder of [Helium](https://www.helium.com/), which used crowdsourcing to build the largest LoRaWAN network in the world. 

[Dave Kjendal](https://www.linkedin.com/in/dkjendal/), the former CTO at Senet and LoRa Alliance Technical Director and [Dave Tholl](https://www.linkedin.com/in/dave-tholl-a31252a/?originalSubdomain=ca) at Tektelic have also contributed mightily to the LoRaWAN ecosystem.

These individuals, among others, have guided LoRaWAN from a niche technology to a global IoT standard.

## LoRaWAN vs. Other LPWAN Technologies

LoRaWAN is one of several Low-Power Wide-Area Network (LPWAN) technologies addressing IoT connectivity. 
The LPWAN field also includes cellular standards like NB-IoT and LTE-M, and proprietary systems like Sigfox, among others. Below is a brief comparison for context:

**LoRaWAN (LoRa Wide Area Network):** An open LPWAN protocol operating in unlicensed ISM bands (e.g. 868 MHz in Europe, 915 MHz in US). LoRaWAN’s key advantages are its long range (15+ km in rural areas), very low power consumption, and an ecosystem not tied to any single operator – anyone can set up a LoRaWAN network. As a result, LoRaWAN supports private networks (enterprise or community) as well as public operator networks. 

Globally, LoRa/LoRaWAN connections were estimated around 500 million in 2024, headed toward 1.3 billion by 2030​. LoRaWAN leads the LPWAN market in Europe and North America and is the top choice for private IoT deployments worldwide​. Its alliance-driven model means a multi-vendor ecosystem of devices, gateways, and software, giving users choice and often lower cost. The trade-off is that LoRaWAN operates in unlicensed spectrum, which has power and duty-cycle limits and potential interference (mitigated by adaptive data rates and robust modulation).

**NB-IoT ([Narrowband IoT](https://www.gsma.com/solutions-and-impact/technologies/internet-of-things/narrow-band-internet-of-things-nb-iot/)):** A LPWAN radio standard defined by 3GPP, operating in licensed cellular spectrum. NB-IoT is deployed by mobile carriers on their infrastructure. It offers similar low-data, long-battery capabilities as LoRaWAN, but with telco control. [NB-IoT has seen massive adoption in China](https://www.lightreading.com/iot/china-crosses-100m-nb-iot-connections-but-still-short-of-target) – about 90% of NB-IoT connections are in China​ thanks to strong government and operator backing. Globally, NB-IoT leads in total connections; as of 2024 NB-IoT had ~900 million connections (mostly in Asia), projected to reach ~1.9 billion by 2030​. LoRaWAN, by contrast, [dominates in most regions outside China](https://www.iot-now.com/2024/06/20/145050-nb-iot-and-lora-dominate-lpwan-market/)​. 

NB-IoT’s reliance on carriers means it’s used primarily for operator-driven public networks (e.g. [nationwide utility metering by telcos](https://stl.tech/blog/how-do-telcos-contribute-to-utilities-that-utilize-iot-technology/)). It generally offers slightly higher data rates than LoRaWAN and better integration with cellular networks, at the cost of higher infrastructure complexity and usually less flexibility for private deployments.

**Sigfox:** [Sigfox](https://www.sigfox.com/) is a proprietary LPWAN technology (originating from a French startup of the same name) that also uses unlicensed sub-GHz spectrum but with a very narrow-band modulation. Sigfox networks are characterized by ultra-narrowband signals and a star topology with Sigfox-owned base stations. In the 2010s, Sigfox built out its own global network in dozens of countries. 

Unlike LoRaWAN’s open multi-operator approach, Sigfox was a single-network, vertically integrated solution. Sigfox achieved some adoption (notably in France, Spain, and parts of Latin America) for simple sensors and tracking devices, but it faced challenges scaling. By end of 2023, [the installed base of Sigfox devices was only about 12.5 million](https://www.rcrwireless.com/20240619/internet-of-things/nb-iot-and-lorawan-crowned-the-kings-of-long-range-iot-to-double-connections-to-3-5bn-in-five-years)​ – far lower than LoRaWAN or NB-IoT. The Sigfox company filed for bankruptcy in 2022 and was acquired by Unabiz, which is now attempting to revive and open up the ecosystem​. Sigfox’s technical limits (very low message counts per day, no mesh or relay capabilities) and the business model of a single global operator hampered its growth relative to LoRaWAN’s flexible approach.

**LTE-M (Cat-M1):** [LTE-M](https://en.wikipedia.org/wiki/LTE-M) is a cellular IoT standard (also by 3GPP) that can be seen as the “twin” of NB-IoT, offering higher bandwidth and mobility (supporting device handover between cell towers) at the cost of higher power usage. It operates in licensed bands on LTE networks. LTE-M is often used for applications needing more data or voice (e.g. wearables or vehicle telematics), complementing NB-IoT. In LPWAN contexts, LTE-M has a smaller share: around 100+ million connections in 2024, forecast to reach ~400 million by 2030​. 

LTE-M is popular in North America (operators like AT&T, Verizon deployed LTE-M nationwide) and developed Asia (e.g. Japan) for IoT use cases that require the cellular network’s QoS and roaming. However, for the very low-power, low-cost sensor scenarios, LTE-M is less efficient than LoRaWAN or NB-IoT.

Other LPWANs: There are other niche or emerging LPWAN technologies. **Wi-SUN** (Wireless Smart Utility Network) is a mesh networking standard often used by utilities (especially in smart electricity metering) – it isn’t strictly long-range star network like LoRaWAN, but serves a similar market. **MIoTy** is a newer LPWAN protocol based on telegram-splitting (TS-UNB) technology, targeting industrial IoT with high interference tolerance. These technologies are still in early stages; collectively their deployments were around 20 million devices in 2024​, expected to grow to 100+ million by 2030. They target specific niches (Wi-SUN in utility grids, MIoTy in factory sensor networks, etc.), often inspired by the success of LoRaWAN’s open ecosystem model.

In summary, [NB-IoT and LoRaWAN are the two dominant LPWAN technologies globally](https://www.rcrwireless.com/20240619/internet-of-things/nb-iot-and-lorawan-crowned-the-kings-of-long-range-iot-to-double-connections-to-3-5bn-in-five-years#:~:text=NB,3%20million), accounting for about 86% of LPWA connections today. NB-IoT holds the lead in absolute connections due to China’s massive deployments, but LoRaWAN is the leader in most other regions and in private IoT networks​. Sigfox, once a competitor, now lags far behind in scale​. 

LoRaWAN’s openness, flexibility, and multi-vendor support have made it a preferred choice for many IoT projects, while NB-IoT is preferred when a licensed-band, operator-managed solution is required (especially by government mandate or where existing cellular infrastructure is leveraged). The two aren’t mutually exclusive – some IoT solutions use LoRaWAN for certain tasks and NB-IoT or LTE-M for others, and hybrid deployments are evolving. But broadly, the LPWAN landscape has settled into a duopoly of LoRaWAN and NB-IoT coexisting, with LoRaWAN excelling in unlicensed, collaborative deployments and NB-IoT in carrier-centric models​



# Global LPWAN Technology Analysis 2024

| Technology | Spectrum | Standard & Ecosystem | Estimated Devices (2024) | Notable Regions and Uses |
|------------|----------|---------------------|-------------------------|------------------------|
| LoRaWAN | Unlicensed ISM (e.g. 868/915 MHz) | Open standard via LoRa Alliance; multi-vendor ecosystem (Semtech chips) | ~500 million RCRWIRELESS.COM (projected to 1.3B by 2030) | Global (leader outside China) RCRWIRELESS.COM; used in smart cities, utilities, agriculture, logistics, private IoT networks. |
| NB-IoT | Licensed Cellular (e.g. LTE bands) | 3GPP standard (cellular operators) | ~900 million RCRWIRELESS.COM (projected ~1.9B by 2030) | Dominant in China (90% of connections) RCRWIRELESS.COM; growing in Europe, ME. Ideal for nationwide carrier-led deployments (smart meters, etc.). |
| Sigfox | Unlicensed ISM (Ultra-narrowband) | Proprietary (Sigfox/Unabiz network) | ~12.5 million RCRWIRELESS.COM (2023) | Primarily Europe and LATAM; single operator model. Used for simple tracking and sensors. Slower growth due to proprietary model. |
| LTE-M (Cat-M1) | Licensed Cellular (LTE) | 3GPP standard (cellular operators) | 100+ million RCRWIRELESS.COM | North America, Japan, etc. Suited for IoT needing higher bandwidth or mobility (wearables, vehicles). Often paired with NB-IoT deployments. |
| Others (Wi-SUN, MIoTy) | Unlicensed (sub-GHz) | Wi-SUN Alliance; MIoTy Alliance (ETSI TS-UNB) | ~20 million RCRWIRELESS.COM (combined 2024) | Emerging tech: Wi-SUN in smart utility grids; MIoTy in industrial sensor networks. Growing niche adoption. |

Source: [RCR Wireless News, 2024](https://www.rcrwireless.com/20240619/internet-of-things/nb-iot-and-lorawan-crowned-the-kings-of-long-range-iot-to-double-connections-to-3-5bn-in-five-years#:~:text=Meanwhile%2C%20high,the%20graph%20to%20be%20limited)


## Market Analysis

### Regional Adoption and Investment
LoRaWAN has achieved global reach, but adoption varies by region. Europe was an early adopter and remains a stronghold of LoRaWAN deployment. By 2020, [Europe accounted for about 36.4%](https://www.industryarc.com/Report/19424/lora-and-lorawan-devices-market.html) of the global LoRa/LoRaWAN devices market – the largest share at the time​. European countries embraced LoRaWAN early for national networks and city projects. 

**France** not only saw its major telcos deploy LoRaWAN nationwide, but also has millions of devices in operation. France alone has [over 1.5 million LoRaWAN devices deployed](https://resources.lora-alliance.org/home/lorawan-deployments-achieve-market-leadership-deliver-strong-roi-for-iot-across-wide-spectrum-of-industries-across-france-and-spain) as of 2022​, including applications like smart water meters and environmental sensors. The Spanish government [plans to deploy 13.5 million smart water meters by 2025](https://lora-alliance.org/category/lora-alliance-press-release/page/5/) (a €1.35 billion project), many of which will use LoRaWAN for connectivity​ – a testament to the country’s investment in this tech for utilities. **Spain** is a leading market in Europe, with about 500,000 LoRaWAN devices active (and 200k more being added) as of 2022​. Countries like the Netherlands, Belgium, Switzerland, and Germany also host nationwide or wide-scale LoRaWAN networks, often led by telecom operators or regional utility collaborations.

**North America** has become a major growth region for LoRaWAN in recent years. The United States in particular has seen wide adoption of private LoRaWAN networks in enterprise and industrial contexts, as well as community deployments. [Market reports](https://www.globenewswire.com/news-release/2024/09/10/2943901/0/en/LoRa-and-LoRaWAN-IoT-Market-Is-Expected-To-Reach-a-Revenue-Of-USD-183-9-Bn-By-2033-At-36-5-CAGR-Dimension-Market-Research.html#:~:text=Regional%20Analysis-,North%20America%20is%20projected%20to%20dominate%20the%20global%20LoRa%20and,supporting%20large%2Dscale%20IoT%20deployments.) indicate North America is now the leading region by LoRaWAN market revenue, with about 40.1% of global LoRa/LoRaWAN market share in 2024​. 

This leadership is driven by large-scale deployments in sectors like smart agriculture (e.g. connected irrigation in California), logistics (asset tracking in supply chains), and smart buildings. Several dedicated LoRaWAN network operators have emerged in the US, such as Senet (covering many regions with public LoRaWAN service) and MachineQ (Comcast) providing LoRaWAN for enterprise campuses. Moreover, the **Helium** community network – with over 800k crowd-funded hotspots across North America and beyond – has effectively blanketed many urban areas with LoRaWAN coverage​. 

This combination of commercial and community initiatives has attracted significant investment into LoRaWAN-based solutions in the U.S. and Canada. (In Canada, cities like Calgary and companies in mining/oil industries are using LoRaWAN for remote monitoring). North America’s momentum is further boosted by cloud integration; e.g., Amazon’s [AWS IoT Core supports LoRaWAN devices](https://aws.amazon.com/iot-core/lorawan/), making it easier for businesses to adopt the technology.

**Asia-Pacific** presents a mixed landscape due to the prominence of NB-IoT in some countries. 

**China**, by policy, focused on NB-IoT (with tens of millions of NB-IoT smart meters deployed), so LoRaWAN’s public footprint in China is relatively small. However, LoRa is used in China in private industrial networks and by some regional carriers for specific verticals. Outside China, LoRaWAN has seen strong uptake in Asia. 

**South Korea** was one of the first APAC countries to invest heavily – SK Telecom’s nationwide LoRaWAN network (launched 2016) was used for services from metering to manhole monitoring​. 

**India** has a [large LoRaWAN network rolled out](https://www.tatacommunications.com/press-release/hpe-work-tata-communications-build-worlds-largest-iot-network-india-enhance-resource-utilization/) by Tata Communications covering dozens of cities, supporting use cases like smart street lighting, agriculture, and asset tracking. In **Japan**, telecom operators and big tech firms (e.g. SoftBank, NEC) have run LoRaWAN trials and deployments for smart city systems. **Australia** and **New Zealand** have active LoRaWAN communities and regional networks (often targeting agriculture in remote areas). Generally, Asia-Pacific is seen as the fastest-growing LoRaWAN market, as IoT adoption surges across Southeast Asia and India​. 

The absence of ubiquitous NB-IoT in some emerging economies gives LoRaWAN an opportunity to be the connectivity of choice for IoT projects, which is reflected in increasing investments there.

### Other Regions: 

In **Latin America**, LoRaWAN has gained traction in countries like Brazil, Mexico, and Argentina for smart agriculture and city applications. For example, Brazil has LoRaWAN networks used in agri-tech (connecting farm sensors over long ranges). 

**Mexico City** has pilot projects for air quality monitoring on LoRaWAN. Many LATAM deployments have been spearheaded by local telcos in partnership with LoRaWAN solution providers. 

In the Middle East and Africa, IoT adoption is still emerging, but LoRaWAN is present in several countries. **South Africa** has seen LoRaWAN used in wildlife conservation and utility metering pilots. 

The United Arab Emirates and [Saudi Arabia have smart city initiatives](https://saudiex.com.sa/what-is-lorawan/) where LoRaWAN is evaluated for connecting municipal sensors. One advantage in developing regions is LoRaWAN’s low cost and flexibility (no need for licensed spectrum), making it attractive for NGOs and city authorities to deploy networks for specific needs (like disaster warning sensors, agricultural soil monitoring, etc.). The LoRa Alliance notes that as of 2020, LoRaWAN networks (public or private) are active in over 160 countries worldwide, indicating a truly global spread.

To support this growth, over 160 major mobile network operators (MNOs) have deployed LoRaWAN networks or services globally​. This is a remarkable number, showing that many of the same telecom companies that run cellular networks also invest in LoRaWAN as part of their IoT portfolio. Examples include Orange, SK Telecom, KPN, Swisscom, Deutsche Telekom (via subsidiary), Comcast, Telstra, and Tata Communications, among many others. This broad backing by operators and enterprises ensures continuing investment into LoRaWAN infrastructure in virtually every region.

(For a snapshot of key LoRaWAN markets, see Table 2.)

## Table 2: Selected LoRaWAN Adoption Highlights by Country/Region

| Country/Region | LoRaWAN Adoption Highlights |
|---------------|----------------------------|
| France | Two nationwide networks (Orange & Bouygues) since 2016; >1.5 million devices on LoRaWAN to date MOKOLORA.COM. Major projects in utilities (e.g. plan for 13.5M smart water meters by 2025) MOKOLORA.COM and smart cities. Paris and other cities use LoRaWAN for street lighting, parking sensors, and environmental monitoring. |
| United States | Mix of public and private deployments; no single nationwide network, but regional coverage by operators like Senet and community Helium network (~800k gateways) BLOG.LORA-ALLIANCE.ORG. Used in industrial IoT (oil & gas, manufacturing), agriculture (crop monitoring in California), and logistics (asset tracking by logistics firms). Comcast's MachineQ and Everynet provide LoRaWAN in many metro areas. Strong enterprise uptake due to easy private network setup. |
| Netherlands | Early adopter – KPN launched one of the first national LoRaWAN networks in 2016 SDXCENTRAL.COM. Also home to The Things Network, which started in Amsterdam and spread community LoRaWAN across Europe. LoRaWAN used in smart agriculture (e.g. soil sensors in fields) and flood control (dike monitoring sensors) by Dutch water authorities. |
| India | Tata Communications deployed LoRaWAN across ~38 cities by 2017, creating one of the largest LoRa networks in Asia. Focus on smart city use cases: connected streetlights, waste management, and soil moisture sensors for farmers. Indian startups and system integrators have embraced LoRaWAN for its cost-effectiveness in rural IoT projects. |
| South Korea | SK Telecom completed a nationwide LoRaWAN network in 2016 SAMSUNG.COM, parallel to its LTE-M rollout. LoRaWAN is used for city services in Seoul and other areas: e.g. monitoring public infrastructure (manholes, streetlights) and providing connectivity for thousands of gas and water meters. South Korea's case proved the feasibility of large-scale LoRaWAN by a mobile operator. |
| Spain | Rapid growth in LoRaWAN deployments; ~500,000 devices live on LoRaWAN (2022) MOKOLORA.COM, with more being added for smart utility and tracking projects. Cities like Barcelona and Madrid use LoRaWAN for smart parking and environmental sensing. Spanish telecoms (Telefónica, Everynet in partnership) have nationwide LoRaWAN coverage. |
| Australia | Strong adoption in mining and agriculture. Several regional networks cover farming areas (for water tank monitoring, cattle tracking). The national science agency CSIRO has trialed LoRaWAN for environmental monitoring in the outback due to its long range. Major cities have community LoRaWAN coverage via The Things Network. |

(Note: The above table highlights a few examples; LoRaWAN is present in many more countries worldwide, often with multiple networks per country.)

## Major Use Cases and Industries

LoRaWAN’s versatility and low operating cost have led to its use across a wide range of industries. The LoRa Alliance identifies six key vertical domains driving LoRaWAN adoption: Smart Agriculture, Smart Buildings, Smart Cities, Smart Industry (manufacturing), Smart Logistics, and Smart Utilities​. In each of these, LoRaWAN enables new IoT solutions that were previously impractical with shorter-range or higher-power networks. Below we outline these major use cases and examples:

### Smart Utilities (Water/Gas/Electric Metering): 

Utility metering is a flagship LoRaWAN application. Utilities deploy LoRaWAN-enabled smart water meters and gas meters to collect readings remotely over long distances. The long battery life (often 10+ years) of LoRaWAN meters and deep indoor penetration make it ideal for this use. For example, cities in France are rolling out millions of LoRaWAN water meters to automate usage readings and detect leaks in real-time​. 

In Spain, LoRaWAN is used by utilities for gas meter monitoring (replacing manual monthly checks). Electricity grid operators also use LoRaWAN for grid telemetry in some regions. [The ROI is significant](https://www.digi.com/blog/post/calculating-roi-for-lorawan-deployments) – automated meter reading saves labor and can reduce water loss by early leak detection, yielding economic and environmental benefits. Utilities also use LoRaWAN for smart grid sensors (e.g. monitoring distribution transformers or pole top monitors in electric networks).

### Smart Cities: 

Urban deployments of LoRaWAN cover a broad array of smart city services. Street lighting control is commonly done via LoRaWAN nodes that allow dimming schedules and maintenance alerts (achieving energy savings for municipalities). Smart parking systems use LoRa sensors embedded in parking spots to relay availability, reducing traffic congestion. 

Cities like Los Angeles, Amsterdam, and Singapore have trialed such solutions. Waste management is another use: LoRaWAN bin sensors report fill levels so that trash collection routes can be optimized (as done in cities in Belgium and Australia). Environmental monitoring is also crucial – many cities deploy LoRaWAN air quality sensors and noise sensors on street poles to gather hyperlocal pollution data. 

The cost-effectiveness of LoRaWAN (no monthly SIM fees, one gateway can cover a whole district) makes these city-wide sensor networks feasible within municipal budgets. [There are numerous examples globally of cities achieving strong ROI](https://www.smartcitiesworld.net/internet-of-things/simplifying-the-smart-city) and improved services with LoRaWAN deployments in lighting, parking, and waste management (e.g., improved parking fee collection, lower energy bills, etc.)​. LoRaWAN’s presence in smart cities continues to grow as part of “Smart City” initiatives.

### Smart Agriculture: 

Agriculture and farming benefit from LoRaWAN by enabling IoT in fields far from cellular coverage. Soil moisture sensors, weather stations, and crop health sensors with LoRaWAN connectivity help farmers do precision agriculture – irrigating only when needed, optimizing fertilizer use, and monitoring microclimates. LoRaWAN collars or tags on livestock (cattle, sheep) enable ranchers to track animal location and health across large pastures. 

In Australia and the US, [ranchers use LoRaWAN to get alerts if cattle wander or if water levels in remote tanks are low](https://www.ndsu.edu/agriculture/extension/publications/basics-lora-technology-crop-and-livestock-management). These devices run on small batteries or solar and can transmit miles to the nearest gateway. The economic impact is notable: improved yields and reduced resource waste. 

In wine regions (like California and Italy), vineyards use LoRaWAN sensors to monitor soil and vine conditions, leading to better crop management. Asia-Pacific’s fast LoRaWAN growth is partly due to agricultural use in countries like India and Indonesia, where rural connectivity is crucial​. The ability to cover large, remote areas with minimal infrastructure (just a few gateways covering thousands of acres) is a unique advantage of LoRaWAN in this sector.

### Logistics and Asset Tracking: 

LoRaWAN is increasingly used for tracking assets that move through supply chains or within large facilities. LoRaWAN asset trackers (small battery-powered GPS or BLE-enabled tags) can be placed on pallets, containers, or equipment. They periodically send their location (or sensor data like temperature for cold-chain monitoring) to nearby LoRaWAN gateways. Logistics providers utilize LoRaWAN at ports and warehouses to track containers without needing cellular on each device. The range allows coverage of entire shipping yards with one gateway. 

For cross-country or international tracking, LoRaWAN can be combined with satellite connectivity – for instance, a container tracker might use LoRaWAN to talk to a small satellite modem which then sends data back to the cloud​. 

Companies have reported improved inventory management and theft reduction by using LoRaWAN trackers on high-value assets. In airports, luggage carts and equipment are tracked via private LoRaWAN networks (e.g. [Schiphol Airport in Amsterdam deployed a LoRaWAN network](https://www.iotm2mcouncil.org/iot-library/news/smart-building-construction-news/kerlink-flies-lora-network-at-schiphol-airport/) for asset tracking over its campus​). The logistics sector values LoRaWAN for its low power (trackers can last years on a battery) and its ability to penetrate indoor areas like warehouses or basements where GPS alone fails.

### Industrial IoT (Smart Industry): 

Manufacturing plants and industrial sites use LoRaWAN for wireless monitoring of equipment and environment. Predictive maintenance is a key use: LoRaWAN vibration or temperature sensors on machines can regularly report data to predict failures. Because running cables in factories is expensive and Wi-Fi may not cover large sites, LoRaWAN provides a reliable, low-cost wireless backbone for these sensors. Safety monitoring is another aspect – LoRaWAN can connect gas leak detectors, fire alarms, or worker safety wearables throughout facilities. 

In oil and gas fields, [LoRaWAN connects pressure sensors and valve monitors](https://lora-alliance.org/wp-content/uploads/2021/04/LoRaWAN-OIl-Gas.pdf) over wide areas. The manufacturing sector is projected to account for about 28% of LoRaWAN’s market in 2024​, underlining how important industrial use is. By retrofitting factories with LoRaWAN sensors, operators can reduce downtime (through early fault detection) and optimize processes, which has direct financial benefits. 

A factory might [use LoRaWAN energy meters on equipment](https://akenza.io/blog/retrofitting-energy-meters-with-lora) to identify power hogs and cut electricity costs – a simple IoT retrofit made feasible by the ease of LoRaWAN wireless deployment.

### Smart Buildings: 

In commercial real estate and facility management, LoRaWAN is used to make buildings “smart” at a low cost. Heating, ventilation, and air conditioning (HVAC) systems are instrumented with LoRaWAN temperature and humidity sensors in different rooms to optimize climate control. Occupancy sensors and people counters using LoRaWAN help manage meeting room usage or lighting (lights can be automated to turn off when areas are unoccupied). Indoor air quality sensors (for CO₂, VOCs) on LoRaWAN are deployed in offices and schools to ensure healthy ventilation. 

:::tip Want to build your own LoRaWAN dashboard?
Check out our [MetSci Demo Dashboard](/docs/tutorial-extras/metsci-demo-dash) to learn how to build a custom dashboard for monitoring your LoRaWAN sensors.
:::

Building managers increasingly adopt LoRaWAN because a single gateway per building can connect hundreds of sensors through walls on multiple floors – something hard to do with Wi-Fi or Bluetooth. 

LoRaWAN also excels in connecting [elevator or basement equipment monitoring](https://lora-alliance.org/wp-content/uploads/2021/10/LA_WhitePaper_BACnet_1021_Final.pdf) that might be out of normal network range. The result is improved energy efficiency (some smart buildings report double-digit percentage reductions in energy use) and better facility utilization. With new LoRaWAN 2.4 GHz options and emerging standards, even more consumer and building devices might integrate LoRaWAN, and this domain is expected to grow.

Across all these sectors, LoRaWAN’s common value proposition is enabling data collection from many distributed points at low cost, with devices that can run for years on a battery. This has led to significant economic impacts: cost savings (e.g. in meter reading and maintenance), new revenue streams (IoT services offered by operators), and improved outcomes (e.g. higher crop yields, reduced city traffic). 

As an illustration, [a study of LoRaWAN in precision agriculture](https://www.sciencedirect.com/science/article/pii/S2772375522000181) might find yield improvements of 5-10% for certain crops due to better irrigation control – which is economically very significant for farmers. In cities, smarter lighting can cut electricity costs by 30-50% in streetlight operations. While exact ROI varies by project, many markets are seeing high ROI from LoRaWAN deployments, which drives further investment. The collaborative ecosystem (sensor makers, network providers, software platforms) lowers barriers for new solutions, accelerating IoT innovation.

## Emerging Trends and Future Outlook

The global LoRaWAN industry continues to evolve with new trends that will shape its future trajectory:

### Satellite-Enabled LoRaWAN: 

One of the most exciting developments is the expansion of LoRaWAN beyond terrestrial limits via satellite connectivity. Starting around 2020, several companies have launched low-earth-orbit satellites equipped to forward LoRaWAN messages​. This effectively creates a space-based LoRaWAN layer for truly global coverage – reaching remote oil rigs, ocean buoys, wildlife trackers, or any sensor outside of cell range. By 2022, early LoRaWAN satellite services (from firms like Lacuna, EchoStar, and Fossa) were in testing, and by 2023 some became commercially available. 

This trend means LoRaWAN could unify terrestrial and satellite IoT on one standard, which is a unique advantage (NB-IoT and others are also pursuing satellite integration, but LoRa’s low power makes it well-suited to burst data to satellites). We can expect growth in hybrid devices that use terrestrial LoRaWAN when available and satellite when not, especially for asset tracking across land/sea and environmental monitoring in remote regions​.

### Community and Decentralized Networks: 

**Helium’s*** model of a decentralized, blockchain-incentivized LoRaWAN network sparked interest in new business models. By rewarding individuals for deploying coverage, Helium rapidly scaled the number of LoRaWAN gateways worldwide​. While the long-term viability of the crypto incentive is still evolving, the concept of community-driven networks is here to stay. 

Other initiatives and community networks (like The Things Network community and regional IoT cooperatives) continue to expand coverage in areas perhaps underserved by traditional telcos. This trend could lead to a patchwork of public, private, and community networks that interoperate. 

The LoRa Alliance is fostering roaming and data exchange between networks via standards like LoRaWAN roaming and the [Packet Broker](https://www.thethingsindustries.com/docs/concepts/packet-broker/)​, so that a device might seamlessly use any available LoRaWAN gateway regardless of owner. The blending of public, private, and community networks is a trend that increases overall coverage and resilience of the LoRaWAN ecosystem.

Convergence with 5G and Cellular IoT: Rather than viewing cellular IoT (NB-IoT/LTE-M) and LoRaWAN as purely competitors, the industry is exploring synergies. Hybrid solutions are emerging where LoRaWAN handles local low-power sensor data, and cellular or 5G backhaul carries aggregated data. For example, some gateway devices combine LoRaWAN and 4G/5G modems to forward data from LoRa sensors to cloud services. 

There are also cases of operators [integrating LoRaWAN into their 5G networks as a slice](https://univ-rennes.hal.science/hal-04239515/file/Jradi%20et%20al-2023-A%20Seamless%20Integration%20Solution%20for%20LoRaWAN%20Into%205G%20System.pdf) or offering managed LoRaWAN service along with NB-IoT. The fact that LoRaWAN leads in private networks has inspired the 5G community to develop private 5G/NR solutions – but those remain costly and power-hungry for many IoT needs. 

We are likely to see LoRaWAN continue to fill the niche for ultra-low-power, long-range sensing even in a 5G world, often working in tandem with high-bandwidth technologies (e.g., using LoRaWAN for short messages and 5G for video or large data when needed). Semtech’s recent collaborations (e.g., with TTI and AWS) also indicate an effort to simplify IoT by uniting LoRaWAN connectivity with cloud platforms for device management​.

## Growth of LoRaWAN Ecosystem and New Standards: 

The LoRaWAN ecosystem is maturing, with over 500 members in the LoRa Alliance and a proliferation of certified devices. Interoperability and certification ensure that sensors and gateways from different vendors work together, which will remain a focus. 

As the ecosystem grows, we see new profiles (like LoRaWAN for smart homes, which might require interoperability with consumer IoT standards) and possibly lightweight versions for simpler devices. Also notable is the [emergence of LoRaWAN in the 2.4 GHz band](https://ieeexplore.ieee.org/document/10614081) (a globally available ISM band). 

While most LoRaWAN today operates in sub-GHz regional bands, 2.4GHz LoRaWAN could allow a single device model to be used worldwide (trading off some range). This could open LoRaWAN to new consumer applications or worldwide logistics tracking without regional SKUs. The alliance-driven approach of LoRaWAN has been highlighted as a key to its success, and even other LPWAN groups (Wi-SUN, mioty) are following similar multi-stakeholder models​. 

We can expect the Alliance to continue updating the standard (security enhancements, support for new frequency regulations, etc.) and driving collaborations (e.g., liaison with 3GPP for coexistence, with Wi-SUN alliance, etc.).

### Higher Density and Scalability Solutions: 

As LoRaWAN networks grow from a handful of gateways to thousands (especially in dense urban deployments or massive industrial complexes), managing interference and capacity is a challenge. The industry is working on network optimization techniques like dynamic channel plans, interference mitigation, and perhaps future revisions of the protocol to allow even greater device densities. 

Research and field experience are defining the limits of LoRaWAN capacity and how to push them (some studies show tens of thousands of devices can coexist per gateway under proper configurations). The introduction of repeating/relay nodes (an optional new feature) can extend range in tough radio environments, though with careful duty cycle management. All these efforts aim to ensure LoRaWAN can scale to the billions of devices projected in coming years.

### Economic Impact and ROI Focus: 

As deployments scale, customers are increasingly measuring the direct economic impact of LoRaWAN solutions. This feedback loop influences the market by highlighting successful applications. For example, if a city reports that its LoRaWAN smart lighting project paid for itself in energy savings within two years, other cities will quickly follow. 

We are seeing such ROI-positive case studies accumulate in domains like smart metering (where utilities see reduced operating costs and improved revenue assurance by catching leaks/theft), cold chain monitoring (preventing spoilage of food or vaccines), and predictive maintenance (avoiding costly downtime in factories). These demonstrated successes drive further investment in LoRaWAN projects. 

Industry analysts note that LoRaWAN’s multi-year head start in real-world deployments has [given it a credibility and “proof of concept”](https://www.nist.gov/system/files/documents/2024/10/21/The%20IoT%20of%20Things%20Oct%202024%20508%20FINAL_1.pdf) library that newer technologies lack​. Consequently, the market is reaching a tipping point where IoT solution buyers trust LoRaWAN as a stable, cost-effective choice with proven outcomes, which should sustain its growth.

In conclusion, the global LoRaWAN industry has moved into a phase of mass adoption and diversification. Key players from startup innovators to telecom giants are collectively strengthening the ecosystem. 

The technology has a rich history from 2009 to now, evolving from a French lab idea to an ITU-recognized international standard. When compared to other LPWANs, LoRaWAN stands out for its global community and flexibility, which has translated into it leading in most markets outside of China. 

The market analysis shows healthy growth across continents, with particularly strong investment in Europe and North America and rapid expansion in Asia and beyond. LoRaWAN’s use cases now cover virtually every industry that needs IoT, delivering tangible benefits and ROI in each. 

The data and trends indicate a robust trajectory: estimates of billions of LoRaWAN devices in the next decade​ and continued innovation (like satellite LoRaWAN and new standards) suggest that LoRaWAN will remain a cornerstone of the IoT landscape. Its ability to provide low-power, long-range connectivity at low cost addresses a fundamental IoT need, ensuring that the LoRaWAN industry will thrive as the Internet of Things continues its global growth.

--------------------------------------------------------------------------------
